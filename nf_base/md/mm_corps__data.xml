<?xml version="1.0" encoding="ISO-8859-1" ?>
<mdscript name="MM_Corps__Data" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../libraries/md.xsd">
	<cues>
		<!-- 
		<set_value name="$build" exact="['']" comment="['massenergy','energy','food','drug','tech','ship','al','ol','warehouse']"/>
		<set_value name="$style" exact="'cooperative'" comment="'domination','cooperative','pirate'"/>
		<include_actions ref="md.MM_Corps__Data.MMCData_config" />
		<remove_value name="$tmpConfig"/>
		-->
		<library name="MMCData_config">
			<actions>
				<set_value name="$tmpConfig" exact="table[]" />

				<set_value name="$tmpConfig.$minBuyShip" exact="30000000Cr" />
				<set_value name="$tmpConfig.$minBuyShipTop" exact="100000000Cr" />
				<set_value name="$tmpConfig.$minBuild" exact="300000000Cr" />
				<set_value name="$tmpConfig.$minBuildSpecial" exact="500000000Cr" />

				<do_if value="$build?" negate="true" comment="fallback">
					<set_value name="$temp_factionId" exact="if $_faction? then $_faction.id else if $faction? then $faction.id else if $_CEO? then $_CEO.owner.id else null" />
					<do_if value="$temp_factionId" list="['familyryak']">
						<set_value name="$build" exact="['spl']" />
					</do_if>
					<do_elseif value="$temp_factionId" list="['teladi','teladidrugrunner','teladigunrunner']">
						<set_value name="$build" exact="['tel']" />
					</do_elseif>
					<do_elseif value="$temp_factionId" list="['xenon']">
						<set_value name="$build" exact="['xen']" />
					</do_elseif>
					<do_elseif value="$temp_factionId" list="['terran','heartofalbion','wholesomefoods','canteran','beryll','nolimits','leddaindustrial','albionenergy','terracorp','plutarch']">
						<set_value name="$build" exact="[ 'al']" />
					</do_elseif>
					<do_elseif value="$temp_factionId" list="['atlas','sovereignsyndicate','reivers']">
						<set_value name="$build" exact="['pir']" />
					</do_elseif>
					<do_elseif value="$temp_factionId" list="['hereticvanguards']">
						<set_value name="$build" exact="['ol']" />
					</do_elseif>
					<do_elseif value="$temp_factionId" list="['deepwater']">
						<set_value name="$build" exact="['merc']" />
					</do_elseif>
					<do_elseif value="$temp_factionId" list="['argongovernment','sonraenergy','aquarius','jonferson','frantonpharma','chow']">
						<set_value name="$build" exact="['ol']" />
					</do_elseif>
					<do_else comment="'fallback'">
						<set_value name="$build" exact="['tel','spl','al','ol']" />
					</do_else>
					<remove_value name="$temp_factionId"/>
				</do_if>
				<do_if value="$_CEO.$style?" negate="true" comment="fallback">
					<set_value name="$temp_factionId" exact="if $_faction? then $_faction.id else if $faction? then $faction.id else null" />
					<do_if value="$temp_factionId" list="['familyryak','argongovernment','heartofalbion','canteran','terracorp','plutarch','xenon','teladi']">
						<set_value name="$_CEO.$style" exact="'domination'" />
					</do_if>
					<do_elseif value="$temp_factionId" list="['atlas','hereticvanguards','sovereignsyndicate','reivers']">
						<set_value name="$_CEO.$style" exact="'pirate'" />
					</do_elseif>
					<do_elseif value="$temp_factionId" list="['deepwater']">
						<set_value name="$_CEO.$style" exact="'mercenary'" />
					</do_elseif>
					<do_else comment="'fallback'">
						<set_value name="$_CEO.$style" exact="'cooperative'" />
					</do_else>
					<remove_value name="$temp_factionId"/>
				</do_if>

				<!-- settings -->
				<do_if value="$_CEO.$style" exact="'domination'">
					<set_value name="$tmpConfig.$stationPatrol" exact="1" />
					<set_value name="$tmpConfig.$zonePatrol" exact="1" />
					<set_value name="$tmpConfig.$sectorPatrol" exact="2" />
					<set_value name="$tmpConfig.$clusterPatrol" exact="2" />
					<set_value name="$tmpConfig.$patrolEscorts" exact="2" />
					<set_value name="$tmpConfig.$scouts" exact="1" />
					<set_value name="$tmpConfig.$fleets" exact="1" />
					<set_value name="$tmpConfig.$max_builders" exact="2" />
					<set_value name="$tmpConfig.$invasionPatrol" exact="1" />
					<set_value name="$tmpConfig.$plunderPatrol" exact="0" />
					<set_value name="$tmpConfig.$traderCluster" exact="2" />
					<set_value name="$tmpConfig.$traderSector" exact="0" />
					<set_value name="$tmpConfig.$traderStation" exact="4" />
					<set_value name="$tmpConfig.$minerCluster" exact="2" />
					<set_value name="$tmpConfig.$donationTax" exact="100000Cr" />
					<set_value name="$tmpConfig.$serviceFee" exact="100000Cr" />
				</do_if>
				<do_elseif value="$_CEO.$style" exact="'pirate'">
					<set_value name="$tmpConfig.$stationPatrol" exact="0" />
					<set_value name="$tmpConfig.$zonePatrol" exact="2" />
					<set_value name="$tmpConfig.$sectorPatrol" exact="0" />
					<set_value name="$tmpConfig.$clusterPatrol" exact="0" />
					<set_value name="$tmpConfig.$patrolEscorts" exact="2" />
					<set_value name="$tmpConfig.$scouts" exact="0" />
					<set_value name="$tmpConfig.$fleets" exact="1" />
					<set_value name="$tmpConfig.$max_builders" exact="1" />
					<set_value name="$tmpConfig.$invasionPatrol" exact="0" />
					<set_value name="$tmpConfig.$plunderPatrol" exact="2" />
					<set_value name="$tmpConfig.$traderCluster" exact="0" />
					<set_value name="$tmpConfig.$traderSector" exact="0" />
					<set_value name="$tmpConfig.$traderStation" exact="3" />
					<set_value name="$tmpConfig.$minerCluster" exact="2" />
					<set_value name="$tmpConfig.$donationTax" exact="1000000Cr" />
					<set_value name="$tmpConfig.$serviceFee" exact="100000Cr" />
				</do_elseif>
				<do_elseif value="$_CEO.$style" exact="'mercenary'">
					<set_value name="$tmpConfig.$stationPatrol" exact="0" />
					<set_value name="$tmpConfig.$zonePatrol" exact="0" />
					<set_value name="$tmpConfig.$sectorPatrol" exact="0" />
					<set_value name="$tmpConfig.$clusterPatrol" exact="0" />
					<set_value name="$tmpConfig.$patrolEscorts" exact="0" />
					<set_value name="$tmpConfig.$scouts" exact="0" />
					<set_value name="$tmpConfig.$fleets" exact="10" />
					<set_value name="$tmpConfig.$max_builders" exact="0" />
					<set_value name="$tmpConfig.$invasionPatrol" exact="0" />
					<set_value name="$tmpConfig.$plunderPatrol" exact="0" />
					<set_value name="$tmpConfig.$traderCluster" exact="0" />
					<set_value name="$tmpConfig.$traderSector" exact="0" />
					<set_value name="$tmpConfig.$traderStation" exact="0" />
					<set_value name="$tmpConfig.$minerCluster" exact="0" />
					<set_value name="$tmpConfig.$donationTax" exact="0Cr" />
					<set_value name="$tmpConfig.$serviceFee" exact="100000Cr" />
				</do_elseif>
				<do_elseif value="$_CEO.$style" exact="'outofbusiness'">
					<set_value name="$tmpConfig.$stationPatrol" exact="0" />
					<set_value name="$tmpConfig.$zonePatrol" exact="0" />
					<set_value name="$tmpConfig.$sectorPatrol" exact="0" />
					<set_value name="$tmpConfig.$clusterPatrol" exact="0" />
					<set_value name="$tmpConfig.$patrolEscorts" exact="0" />
					<set_value name="$tmpConfig.$scouts" exact="0" />
					<set_value name="$tmpConfig.$fleets" exact="0" />
					<set_value name="$tmpConfig.$max_builders" exact="0" />
					<set_value name="$tmpConfig.$invasionPatrol" exact="0" />
					<set_value name="$tmpConfig.$plunderPatrol" exact="0" />
					<set_value name="$tmpConfig.$traderCluster" exact="0" />
					<set_value name="$tmpConfig.$traderSector" exact="0" />
					<set_value name="$tmpConfig.$traderStation" exact="0" />
					<set_value name="$tmpConfig.$minerCluster" exact="0" />
					<set_value name="$tmpConfig.$donationTax" exact="0Cr" />
					<set_value name="$tmpConfig.$serviceFee" exact="10000Cr" />
				</do_elseif>
				<do_else comment="'cooperative'">
					<set_value name="$tmpConfig.$stationPatrol" exact="1" />
					<set_value name="$tmpConfig.$zonePatrol" exact="0" />
					<set_value name="$tmpConfig.$sectorPatrol" exact="0" />
					<set_value name="$tmpConfig.$clusterPatrol" exact="0" />
					<set_value name="$tmpConfig.$patrolEscorts" exact="2" />
					<set_value name="$tmpConfig.$scouts" exact="0" />
					<set_value name="$tmpConfig.$fleets" exact="0" />
					<set_value name="$tmpConfig.$max_builders" exact="3" />
					<set_value name="$tmpConfig.$invasionPatrol" exact="0" />
					<set_value name="$tmpConfig.$plunderPatrol" exact="0" />
					<set_value name="$tmpConfig.$traderCluster" exact="2" />
					<set_value name="$tmpConfig.$traderSector" exact="5" />
					<set_value name="$tmpConfig.$traderStation" exact="5" />
					<set_value name="$tmpConfig.$minerCluster" exact="4" />
					<set_value name="$tmpConfig.$donationTax" exact="0Cr" />
					<set_value name="$tmpConfig.$serviceFee" exact="100000Cr" />
				</do_else>

				<!-- ships -->
				<do_if value="true" comment="ships">
					<set_value name="$temp_ships" exact="table[
							$fight = [],
							$trade = [],
							$mine = [],
							$build = [],
							$trade_sm = [],
							$mine_sm = [],
							$fight_sm = []				
						]" />

					<do_if value="'xen'" list="$build">
						<append_to_list name="$temp_ships.$fight" exact="macro.units_size_xl_xenon_01_macro"/>
						<append_to_list name="$temp_ships.$fight" exact="macro.units_size_l_xenon_01_macro"/>
						<append_to_list name="$temp_ships.$fight" exact="macro.units_size_l_xenon_01_dc_macro"/>
						<append_to_list name="$temp_ships.$fight" exact="macro.units_size_xl_xenon_01_c_macro"/>

						<append_to_list name="$temp_ships.$trade" exact="macro.units_size_l_xenon_01_cargo_macro"/>

						<append_to_list name="$temp_ships.$mine" exact="macro.units_size_l_xenon_01_miner_macro"/>
						<append_to_list name="$temp_ships.$mine" exact="macro.units_size_l_xenon_01_collector_macro"/>

						<append_to_list name="$temp_ships.$fight_sm" exact="macro.units_size_s_xenon_swarm_attack_drone_01_macro"/>
						<append_to_list name="$temp_ships.$fight_sm" exact="macro.units_size_s_xenon_swarm_attack_drone_02_macro"/>
						<append_to_list name="$temp_ships.$fight_sm" exact="macro.units_size_m_xenon_fighter_01_macro"/>
						<append_to_list name="$temp_ships.$fight_sm" exact="macro.units_size_m_xenon_bomber_01_macro"/>

						<append_to_list name="$temp_ships.$trade_sm" exact="macro.units_size_m_universal_transport_macro"/>

						<!--append_to_list name="$temp_ships.$build" exact="macro.units_size_xl_builder_xenon_next_macro"/-->
						<append_to_list name="$temp_ships.$build" exact="macro.units_size_l_xenon_outk_macro"/>
					</do_if>
					<do_if value="'tel'" list="$build">
						<!--
						<append_to_list name="$temp_ships.$fight" exact="macro.units_size_xl_te_kit_none_02_xl_macro"/>
						<append_to_list name="$temp_ships.$fight" exact="macro.units_size_xl_te_kit_none_x1s_macro"/>
						<append_to_list name="$temp_ships.$fight" exact="macro.units_size_xl_te_kit_none_01_macro"/>
						<append_to_list name="$temp_ships.$fight" exact="macro.units_size_xl_te_kit_none_02_macro"/>

						<append_to_list name="$temp_ships.$trade" exact="macro.units_size_xl_te_kit_none_x1_macro"/>

						<append_to_list name="$temp_ships.$trade" exact="macro.units_size_xl_te_kit_bulk_01_macro"/>
						<append_to_list name="$temp_ships.$trade" exact="macro.units_size_xl_te_kit_bulk_02_macro"/>
						<append_to_list name="$temp_ships.$trade" exact="macro.units_size_xl_te_kit_bulk_03_macro"/>
						<append_to_list name="$temp_ships.$trade" exact="macro.units_size_xl_te_kit_container_01_macro"/>
						<append_to_list name="$temp_ships.$trade" exact="macro.units_size_xl_te_kit_container_02_macro"/>
						<append_to_list name="$temp_ships.$trade" exact="macro.units_size_xl_te_kit_container_03_macro"/>
						<append_to_list name="$temp_ships.$trade" exact="macro.units_size_xl_te_kit_energy_01_macro"/>
						<append_to_list name="$temp_ships.$trade" exact="macro.units_size_xl_te_kit_energy_02_macro"/>
						<append_to_list name="$temp_ships.$trade" exact="macro.units_size_xl_te_kit_energy_03_macro"/>
						<append_to_list name="$temp_ships.$trade" exact="macro.units_size_xl_te_kit_liquid_01_macro"/>
						<append_to_list name="$temp_ships.$trade" exact="macro.units_size_xl_te_kit_liquid_02_macro"/>
						<append_to_list name="$temp_ships.$trade" exact="macro.units_size_xl_te_kit_liquid_03_macro"/>
						<append_to_list name="$temp_ships.$trade" exact="macro.units_size_l_te_kit_bulk_03_macro"/>
						<append_to_list name="$temp_ships.$trade" exact="macro.units_size_l_te_kit_container_03_macro"/>
						<append_to_list name="$temp_ships.$trade" exact="macro.units_size_l_te_kit_energy_03_macro"/>
						<append_to_list name="$temp_ships.$trade" exact="macro.units_size_l_te_kit_liquid_03_macro"/>

						<append_to_list name="$temp_ships.$fight_sm" exact="macro.units_size_s_te_02_macro"/>
						<append_to_list name="$temp_ships.$fight_sm" exact="macro.units_size_s_te_03_macro"/>

						<append_to_list name="$temp_ships.$trade_sm" exact="macro.units_size_m_te_bulk_01_macro"/>
						<append_to_list name="$temp_ships.$trade_sm" exact="macro.units_size_m_te_container_01_macro"/>
						<append_to_list name="$temp_ships.$trade_sm" exact="macro.units_size_m_te_energy_01_macro"/>
						<append_to_list name="$temp_ships.$trade_sm" exact="macro.units_size_m_te_liquid_01_macro"/>

						<append_to_list name="$temp_ships.$mine_sm" exact="macro.units_size_m_te_hydrogen_collector_01_macro"/>
						<append_to_list name="$temp_ships.$mine_sm" exact="macro.units_size_m_te_mineral_collector_01_macro"/>
						-->
					</do_if>
					<do_if value="'spl'" list="$build">
						<append_to_list name="$temp_ships.$fight" exact="macro.units_size_xl_split_m1s_macro"/>
						<append_to_list name="$temp_ships.$fight" exact="macro.units_size_xl_split_m2r_macro" chance="0"/>
						<append_to_list name="$temp_ships.$fight" exact="macro.units_size_xl_split_m2s_macro"/>
						<append_to_list name="$temp_ships.$fight" exact="macro.units_size_xl_split_m1_macro"/>

						<append_to_list name="$temp_ships.$trade" exact="macro.units_size_xl_split_tls_macro"/>

						<append_to_list name="$temp_ships.$mine" exact="macro.units_size_xl_split_tls_gas_macro"/>
						<append_to_list name="$temp_ships.$mine" exact="macro.units_size_xl_split_tls_ore_macro"/>

						<append_to_list name="$temp_ships.$build" exact="macro.units_size_xl_builder_ship_ol_macro"/>

						<append_to_list name="$temp_ships.$fight_sm" exact="macro.units_size_s_split_m3_macro"/>
						<append_to_list name="$temp_ships.$fight_sm" exact="macro.units_size_s_split_m4_macro"/>

						<append_to_list name="$temp_ships.$trade_sm" exact="macro.units_size_m_universal_transport_macro"/>

						<append_to_list name="$temp_ships.$mine_sm" exact="macro.units_size_m_crystal_collector_macro"/>
						<append_to_list name="$temp_ships.$mine_sm" exact="macro.units_size_m_hydrogen_collector_macro"/>
					</do_if>
					<do_if value="'pir'" list="$build">
						<do_if value="'tel'" list="$build">
						<!--
							<append_to_list name="$temp_ships.$trade" exact="macro.units_size_xl_te_kit_none_03_macro"/>
						-->
						</do_if>
						<do_else>
							<append_to_list name="$temp_ships.$fight" exact="macro.units_size_xl_cargo_hauler_2_macro"/>
							<append_to_list name="$temp_ships.$fight" exact="macro.units_size_xl_player_hades_macro"/>
							<append_to_list name="$temp_ships.$fight" exact="macro.units_size_xl_kit_pirate_10_macro"/>
	
							<append_to_list name="$temp_ships.$fight" exact="macro.units_size_l_pir_besieger_frig_macro"/>
							<append_to_list name="$temp_ships.$fight" exact="macro.units_size_l_pir_vanguard_frig_macro"/>
							<append_to_list name="$temp_ships.$fight" exact="macro.units_size_l_pir_container_03_macro"/>
	
							<append_to_list name="$temp_ships.$trade" exact="macro.units_size_xl_kit_destroyer_01_macro"/>
							<append_to_list name="$temp_ships.$trade" exact="macro.units_size_l_kit_hybrid_01_macro"/>
							<append_to_list name="$temp_ships.$trade" exact="macro.units_size_l_kit_hybrid_02_macro"/>
	
							<append_to_list name="$temp_ships.$mine" exact="macro.units_size_l_ice_collector_macro"/>
							<append_to_list name="$temp_ships.$mine" exact="macro.units_size_l_ions_collector_macro"/>
	
							<append_to_list name="$temp_ships.$build" exact="macro.units_size_xl_builder_ship_ol_macro"/>
							<append_to_list name="$temp_ships.$build" exact="macro.units_size_xl_builder_ship_macro"/>
	
							<append_to_list name="$temp_ships.$fight_sm" exact="macro.units_size_s_ship_pirate_01_macro"/>
							<append_to_list name="$temp_ships.$fight_sm" exact="macro.units_size_s_ship_pirate_02_macro"/>
							<append_to_list name="$temp_ships.$fight_sm" exact="macro.units_size_s_ship_pirate_03_macro"/>
	
							<append_to_list name="$temp_ships.$trade_sm" exact="macro.units_size_m_universal_transport_macro"/>
	
							<append_to_list name="$temp_ships.$mine_sm" exact="macro.units_size_m_crystal_collector_macro"/>
							<append_to_list name="$temp_ships.$mine_sm" exact="macro.units_size_m_hydrogen_collector_macro"/>
						</do_else>
					</do_if>

					<do_if value="'al'" list="$build">
						<do_if value="$_faction.id" list="['plutarch']">
							<append_to_list name="$temp_ships.$fight" exact="macro.units_size_xl_capital_destroyer_2_macro"/>
							<append_to_list name="$temp_ships.$fight" exact="macro.units_size_l_single_attack_ship_macro"/>
							<append_to_list name="$temp_ships.$fight" exact="macro.units_size_l_kit_carrier_01_macro"/>
							<append_to_list name="$temp_ships.$fight" exact="macro.units_size_l_kit_carrier_02_macro"/>

							<append_to_list name="$temp_ships.$trade" exact="macro.units_size_l_kit_bulk_01_macro"/>
							<append_to_list name="$temp_ships.$trade" exact="macro.units_size_l_kit_container_01_macro"/>
							<append_to_list name="$temp_ships.$trade" exact="macro.units_size_l_kit_energy_01_macro"/>
							<append_to_list name="$temp_ships.$trade" exact="macro.units_size_l_kit_liquid_01_macro"/>
							<append_to_list name="$temp_ships.$trade" exact="macro.units_size_xl_capital_destroyer_2_cargo_macro"/>
							<append_to_list name="$temp_ships.$trade" exact="macro.units_size_l_kit_hybrid_q_macro"/>

							<append_to_list name="$temp_ships.$build" exact="macro.units_size_xl_builder_ship_macro"/>

							<append_to_list name="$temp_ships.$mine" exact="macro.units_size_l_hydrogen_collector_macro"/>
							<append_to_list name="$temp_ships.$mine" exact="macro.units_size_l_ice_collector_macro"/>
							<append_to_list name="$temp_ships.$mine" exact="macro.units_size_l_ions_collector_macro"/>
							<append_to_list name="$temp_ships.$mine" exact="macro.units_size_l_ore_collector_macro"/>

							<append_to_list name="$temp_ships.$fight_sm" exact="macro.units_size_s_ship_pmc_01_macro"/>
							<append_to_list name="$temp_ships.$fight_sm" exact="macro.units_size_s_ship_pmc_02_macro"/>
							<append_to_list name="$temp_ships.$fight_sm" exact="macro.units_size_s_ship_pmc_03_macro"/>

							<append_to_list name="$temp_ships.$trade_sm" exact="macro.units_size_m_container_transporter_5_macro"/>
							<append_to_list name="$temp_ships.$trade_sm" exact="macro.units_size_m_crystal_transporter_macro"/>
							<append_to_list name="$temp_ships.$trade_sm" exact="macro.units_size_m_energy_transporter_macro"/>
							<append_to_list name="$temp_ships.$trade_sm" exact="macro.units_size_m_liquid_transporter_macro"/>

							<append_to_list name="$temp_ships.$mine_sm" exact="macro.units_size_m_crystal_collector_macro"/>
							<append_to_list name="$temp_ships.$mine_sm" exact="macro.units_size_m_hydrogen_collector_macro"/>
						</do_if>
						<do_elseif value="$_faction.id" list="['heartofalbion']">
							<append_to_list name="$temp_ships.$fight" exact="macro.units_size_xl_capital_destroyer_1_macro"/>
							<append_to_list name="$temp_ships.$fight" exact="macro.units_size_l_single_attack_ship_macro"/>

							<append_to_list name="$temp_ships.$trade" exact="macro.units_size_l_kit_container_03_macro"/>
							<append_to_list name="$temp_ships.$trade" exact="macro.units_size_l_kit_cargo_03_macro"/>
							<append_to_list name="$temp_ships.$trade" exact="macro.units_size_l_kit_cargo_03e_macro"/>
							<append_to_list name="$temp_ships.$trade" exact="macro.units_size_l_kit_container_03_macro"/>

							<append_to_list name="$temp_ships.$build" exact="macro.units_size_xl_builder_ship_macro"/>

							<append_to_list name="$temp_ships.$mine" exact="macro.units_size_l_kit_miner_03s_macro"/>
							<append_to_list name="$temp_ships.$mine" exact="macro.units_size_l_kit_minerl_03s_macro"/>

							<append_to_list name="$temp_ships.$fight_sm" exact="macro.units_size_s_ship_ar_military_07_macro"/>
							<append_to_list name="$temp_ships.$fight_sm" exact="macro.units_size_s_ship_ar_military_08_macro"/>
							<append_to_list name="$temp_ships.$fight_sm" exact="macro.units_size_s_ship_ar_military_09_macro"/>

							<append_to_list name="$temp_ships.$trade_sm" exact="macro.units_size_m_container_transporter_5_macro"/>
							<append_to_list name="$temp_ships.$trade_sm" exact="macro.units_size_m_crystal_transporter_macro"/>
							<append_to_list name="$temp_ships.$trade_sm" exact="macro.units_size_m_energy_transporter_macro"/>
							<append_to_list name="$temp_ships.$trade_sm" exact="macro.units_size_m_liquid_transporter_macro"/>

							<append_to_list name="$temp_ships.$mine_sm" exact="macro.units_size_m_crystal_collector_macro"/>
							<append_to_list name="$temp_ships.$mine_sm" exact="macro.units_size_m_hydrogen_collector_macro"/>
						</do_elseif>
						<do_elseif value="$_faction.id" list="['canteran']">
							<append_to_list name="$temp_ships.$fight" exact="macro.units_size_xl_red_destroyer_macro"/>
							<append_to_list name="$temp_ships.$fight" exact="macro.units_size_l_dv_kit_new_defence_01_macro"/>
							<append_to_list name="$temp_ships.$fight" exact="macro.units_size_l_single_attack_ship_macro"/>
							<append_to_list name="$temp_ships.$fight" exact="macro.units_size_l_canteran_frigate_macro"/>
							<append_to_list name="$temp_ships.$fight" exact="macro.units_size_l_dv_fury_new_defence_macro"/>
							<append_to_list name="$temp_ships.$fight" exact="macro.units_size_l_dv_arb_new_defence_macro"/>

							<append_to_list name="$temp_ships.$trade" exact="macro.units_size_l_dv_kit_new_bulk_01_macro"/>
							<append_to_list name="$temp_ships.$trade" exact="macro.units_size_l_dv_kit_new_container_01_macro"/>
							<append_to_list name="$temp_ships.$trade" exact="macro.units_size_l_dv_kit_new_energy_01_macro"/>
							<append_to_list name="$temp_ships.$trade" exact="macro.units_size_l_dv_kit_new_liquid_01_macro"/>
							<append_to_list name="$temp_ships.$trade" exact="macro.units_size_l_dv_kit_new_bulk_liquid_01_macro"/>
							<append_to_list name="$temp_ships.$trade" exact="macro.units_size_l_dv_kit_new_energy_container_01_macro"/>

							<append_to_list name="$temp_ships.$mine" exact="macro.units_size_l_canteran_miner_01_macro"/>
							<append_to_list name="$temp_ships.$mine" exact="macro.units_size_l_canteran_miner_02_macro"/>

							<append_to_list name="$temp_ships.$build" exact="macro.units_size_xl_builder_ship_dv_macro"/>

							<append_to_list name="$temp_ships.$fight_sm" exact="macro.units_size_m_canteran_01_macro"/>
							<append_to_list name="$temp_ships.$fight_sm" exact="macro.units_size_m_canteran_02_macro"/>
							<append_to_list name="$temp_ships.$fight_sm" exact="macro.units_size_s_canteran_fighter_01_macro"/>

							<append_to_list name="$temp_ships.$trade_sm" exact="macro.units_size_m_mercancias_01_macro"/>
							<append_to_list name="$temp_ships.$trade_sm" exact="macro.units_size_m_mercancias_02_macro"/>
							<append_to_list name="$temp_ships.$trade_sm" exact="macro.units_size_m_mercancias_03_macro"/>
							<append_to_list name="$temp_ships.$trade_sm" exact="macro.units_size_m_mercancias_04_macro"/>

							<append_to_list name="$temp_ships.$mine_sm" exact="macro.units_size_m_crystal_collector_macro"/>
							<append_to_list name="$temp_ships.$mine_sm" exact="macro.units_size_m_hydrogen_collector_macro"/>
						</do_elseif>
						<do_else>
							<append_to_list name="$temp_ships.$fight" exact="macro.units_size_xl_capital_destroyer_1_macro"/>
							<append_to_list name="$temp_ships.$fight" exact="macro.units_size_l_single_attack_ship_macro"/>
							<append_to_list name="$temp_ships.$fight" exact="macro.units_size_l_weaponplatform_macro"/>
							<append_to_list name="$temp_ships.$fight" exact="macro.units_size_l_laserjet_01_macro"/>

							<append_to_list name="$temp_ships.$trade" exact="macro.units_size_l_kit_container_03_macro"/>
							<append_to_list name="$temp_ships.$trade" exact="macro.units_size_l_kit_cargo_03_macro"/>
							<append_to_list name="$temp_ships.$trade" exact="macro.units_size_l_kit_cargo_03e_macro"/>
							<append_to_list name="$temp_ships.$trade" exact="macro.units_size_l_kit_container_03_macro"/>

							<append_to_list name="$temp_ships.$build" exact="macro.units_size_xl_builder_ship_macro"/>

							<append_to_list name="$temp_ships.$mine" exact="macro.units_size_l_kit_miner_03s_macro"/>
							<append_to_list name="$temp_ships.$mine" exact="macro.units_size_l_kit_minerl_03s_macro"/>

							<append_to_list name="$temp_ships.$fight_sm" exact="macro.units_size_s_ship_ar_military_01_macro"/>
							<append_to_list name="$temp_ships.$fight_sm" exact="macro.units_size_s_ship_ar_military_02_macro"/>
							<append_to_list name="$temp_ships.$fight_sm" exact="macro.units_size_s_ship_ar_military_03_macro"/>

							<append_to_list name="$temp_ships.$trade_sm" exact="macro.units_size_m_universal_transport_macro"/>

							<append_to_list name="$temp_ships.$mine_sm" exact="macro.units_size_m_crystal_collector_macro"/>
							<append_to_list name="$temp_ships.$mine_sm" exact="macro.units_size_m_hydrogen_collector_macro"/>
						</do_else>
					</do_if>
					<do_if value="'ol'" list="$build">
						<do_if value="$_faction.id" list="['hereticvanguards']">
							<append_to_list name="$temp_ships.$fight" exact="macro.units_size_xl_player_behemoth_macro"/>
							<append_to_list name="$temp_ships.$fight" exact="macro.units_size_xl_player_chimera_macro"/>
							<append_to_list name="$temp_ships.$fight" exact="macro.units_size_l_player_harpy_macro"/>
							<append_to_list name="$temp_ships.$fight" exact="macro.units_size_l_player_fury_macro"/>

							<append_to_list name="$temp_ships.$trade" exact="macro.units_size_xl_cs_omicron_ship_02_pir_macro"/>

							<append_to_list name="$temp_ships.$build" exact="macro.units_size_xl_builder_ship_ol_macro"/>
							<append_to_list name="$temp_ships.$mine" exact="macro.units_size_l_ice_collector_macro"/>
							<append_to_list name="$temp_ships.$mine" exact="macro.units_size_l_ions_collector_macro"/>

							<append_to_list name="$temp_ships.$mine" exact="macro.units_size_l_hydrogen_collector_macro"/>
							<append_to_list name="$temp_ships.$mine" exact="macro.units_size_l_ice_collector_macro"/>
							<append_to_list name="$temp_ships.$mine" exact="macro.units_size_l_ions_collector_macro"/>
							<append_to_list name="$temp_ships.$mine" exact="macro.units_size_l_ore_collector_macro"/>

							<append_to_list name="$temp_ships.$fight_sm" exact="macro.units_size_s_ship_pirate_01_macro"/>
							<append_to_list name="$temp_ships.$fight_sm" exact="macro.units_size_s_ship_pirate_02_macro"/>
							<append_to_list name="$temp_ships.$fight_sm" exact="macro.units_size_s_ship_pirate_03_macro"/>

							<append_to_list name="$temp_ships.$trade_sm" exact="macro.units_size_m_universal_transport_macro"/>

							<append_to_list name="$temp_ships.$mine_sm" exact="macro.units_size_m_crystal_collector_macro"/>
							<append_to_list name="$temp_ships.$mine_sm" exact="macro.units_size_m_hydrogen_collector_macro"/>
						</do_if>
						<do_else>
							<append_to_list name="$temp_ships.$fight" exact="macro.units_size_xl_cs_omicron_ship_02_macro"/>
							<append_to_list name="$temp_ships.$fight" exact="macro.units_size_xl_cs_omicron_ship_03_macro"/>

							<append_to_list name="$temp_ships.$fight" exact="macro.units_size_l_cs_omicron_ship_03_sa_macro"/>
							<append_to_list name="$temp_ships.$fight" exact="macro.units_size_xl_cs_omicron_ship_02_5_macro"/>
							<append_to_list name="$temp_ships.$fight" exact="macro.units_size_xl_cs_omicron_ship_02_yz_macro"/>
							<append_to_list name="$temp_ships.$fight" exact="macro.units_size_xl_cs_omicron_ship_02_mk2_macro"/>
							<append_to_list name="$temp_ships.$fight" exact="macro.units_size_xl_cs_omicron_ship_02_dc_macro"/>

							<append_to_list name="$temp_ships.$trade" exact="macro.units_size_xl_cs_omicron_ship_01_macro"/>
							<append_to_list name="$temp_ships.$trade" exact="macro.units_size_xl_cs_omicron_ship_04_macro"/>

							<append_to_list name="$temp_ships.$build" exact="macro.units_size_xl_builder_ship_ol_macro"/>

							<append_to_list name="$temp_ships.$mine" exact="macro.units_size_xl_cs_omicron_ship_04_mk2_macro"/>

							<append_to_list name="$temp_ships.$fight_sm" exact="macro.units_size_s_ship_ar_military_04_macro"/>
							<append_to_list name="$temp_ships.$fight_sm" exact="macro.units_size_s_ship_ar_military_05_macro"/>
							<append_to_list name="$temp_ships.$fight_sm" exact="macro.units_size_s_ship_ar_military_06_macro"/>

							<append_to_list name="$temp_ships.$trade_sm" exact="macro.units_size_m_nyanae_01_macro"/>
							<append_to_list name="$temp_ships.$trade_sm" exact="macro.units_size_m_nyanae_02_macro"/>
							<append_to_list name="$temp_ships.$trade_sm" exact="macro.units_size_m_nyanae_03_macro"/>
							<append_to_list name="$temp_ships.$trade_sm" exact="macro.units_size_m_nyanae_04_macro"/>

							<append_to_list name="$temp_ships.$mine_sm" exact="macro.units_size_m_crystal_collector_macro"/>
							<append_to_list name="$temp_ships.$mine_sm" exact="macro.units_size_m_hydrogen_collector_macro"/>
						</do_else>
					</do_if>
					<do_if value="'merc'" list="$build">
						<append_to_list name="$temp_ships.$fight" exact="macro.units_size_l_kit_repairship_macro"/>
						<append_to_list name="$temp_ships.$fight" exact="macro.units_size_xl_cs_omicron_repairship_02_macro"/>

						<append_to_list name="$temp_ships.$trade" exact="macro.units_size_xl_cs_omicron_ship_04_macro"/>

						<append_to_list name="$temp_ships.$build" exact="macro.units_size_xl_builder_ship_ol_macro"/>

						<append_to_list name="$temp_ships.$mine" exact="macro.units_size_xl_cs_omicron_ship_04_mk2_macro"/>

						<append_to_list name="$temp_ships.$fight_sm" exact="macro.units_size_s_ship_ar_military_04_macro"/>
						<append_to_list name="$temp_ships.$fight_sm" exact="macro.units_size_s_ship_ar_military_05_macro"/>
						<append_to_list name="$temp_ships.$fight_sm" exact="macro.units_size_s_ship_ar_military_06_macro"/>

						<append_to_list name="$temp_ships.$trade_sm" exact="macro.units_size_m_universal_transport_macro"/>

						<append_to_list name="$temp_ships.$mine_sm" exact="macro.units_size_m_crystal_collector_macro"/>
						<append_to_list name="$temp_ships.$mine_sm" exact="macro.units_size_m_hydrogen_collector_macro"/>
					</do_if>
			
					<set_value name="$tmpConfig.$ships" exact="$temp_ships.clone" />
					<remove_value name="$temp_ships"/>
				</do_if>


				<!-- build -->
				<create_list name="$temp_build" />

				<do_if value="'xen'" list="$build">
					<set_value name="$tempChk"/>
					<!-- xenon economy -->
					<do_if value="'food'" list="$build">
					</do_if>
					<do_if value="'energy'" list="$build">
					</do_if>
					<do_if value="'massenergy'" list="$build">
						<append_to_list name="$temp_build" exact="macro.struct_bt_ol_solar_power_plant_macro"/>
						<append_to_list name="$temp_build" exact="macro.struct_bt_ol_fuelstation_macro"/>
					</do_if>
					<do_if value="'drug'" list="$build">
					</do_if>
					<do_if value="'tech'" list="$build">
					</do_if>
					<do_if value="'ship'" list="$build">
						<append_to_list name="$temp_build" exact="macro.struct_bt_ol_drone_factory_macro"/>
					</do_if>
					<do_if value="'shippart'" list="$build" chance="md.$shipparts? * 100">
					</do_if>
					<do_if value="'outpost'" list="$build" comment="outpost">
						<append_to_list name="$temp_build" exact="macro.struct_at_xen_xenon_outpost_macro"/>
					</do_if>
					<do_if value="'warehouse'" list="$build" comment="4.0 = very bad idea // 4.1 = maybe?">
					</do_if>
				</do_if>
				<do_if value="'tel'" list="$build">
					<set_value name="$tempChk"/>
					<!-- teladi economy -->
					<do_if value="'food'" list="$build">
					</do_if>
					<do_if value="'energy'" list="$build">
					</do_if>
					<do_if value="'massenergy'" list="$build">
					</do_if>
					<do_if value="'drug'" list="$build">
					</do_if>
					<do_if value="'tech'" list="$build">
						<append_to_list name="$temp_build" exact="macro.{['mine_te_ore_s_macro'].{1}}" chance="if md.$FieldsOfOpportunity? and md.$FieldsOfOpportunity then 100 else 0"/>
					</do_if>
					<do_if value="'ship'" list="$build">
					</do_if>
					<do_if value="'shippart'" list="$build" chance="md.$shipparts? * 100">
					</do_if>
					<do_if value="'outpost'" list="$build" comment="outpost">
					</do_if>
					<do_if value="'warehouse'" list="$build" comment="4.0 = very bad idea // 4.1 = maybe?">
					</do_if>
				</do_if>
				<do_if value="'spl'" list="$build">
					<set_value name="$tempChk"/>
					<!-- split economy -->
					<do_if value="'food'" list="$build">
					</do_if>
					<do_if value="'energy'" list="$build">
					</do_if>
					<do_if value="'massenergy'" list="$build">
					</do_if>
					<do_if value="'drug'" list="$build">
					</do_if>
					<do_if value="'tech'" list="$build">
					</do_if>
					<do_if value="'ship'" list="$build">
					</do_if>
					<do_if value="'shippart'" list="$build" chance="md.$shipparts? * 100">
					</do_if>
					<do_if value="'outpost'" list="$build" comment="outpost">
					</do_if>
					<do_if value="'warehouse'" list="$build" comment="4.0 = very bad idea // 4.1 = maybe?">
					</do_if>
				</do_if>
				<do_if value="'pir'" list="$build">
					<set_value name="$tempChk"/>
					<!-- pirate economy -->
					<do_if value="'food'" list="$build">
					</do_if>
					<do_if value="'energy'" list="$build">
					</do_if>
					<do_if value="'massenergy'" list="$build">
					</do_if>
					<do_if value="'drug'" list="$build">
					</do_if>
					<do_if value="'tech'" list="$build">
					</do_if>
					<do_if value="'ship'" list="$build">
					</do_if>
					<do_if value="'shippart'" list="$build" chance="md.$shipparts? * 100">
					</do_if>
					<do_if value="'outpost'" list="$build" comment="outpost">
					</do_if>
					<do_if value="'warehouse'" list="$build" comment="4.0 = very bad idea // 4.1 = maybe?">
					</do_if>
				</do_if>

				<do_if value="$tempChk? and $temp_build.count == 0 and not ( $build.indexof.{'al'} or $build.indexof.{'ol'} )" comment="fallback to AL">
					<set_value name="$temp_factionId" exact="if $_faction? then $_faction.id else if $faction? then $faction.id else if $_CEO? then $_CEO.owner.id else null" />
					<do_if value="$temp_factionId" list="['familyryak','hereticvanguards']">
						<append_to_list name="$build" exact="'ol'"/>
					</do_if>
					<do_else>
						<append_to_list name="$build" exact="'al'"/>
					</do_else>
					<remove_value name="$temp_factionId"/>
				</do_if>

				<do_if value="'al'" list="$build">
					<do_if value="'food'" list="$build">
						<append_to_list name="$temp_build" exact="macro.struct_bt_alb_water_destillery_macro"/>
						<append_to_list name="$temp_build" exact="macro.struct_bt_alb_food_production_plant_macro"/>
						<append_to_list name="$temp_build" exact="macro.struct_bt_alb_food_production_complex_macro"/>
						<append_to_list name="$temp_build" exact="macro.struct_bt_alb_farm_complex_macro"/>
						<append_to_list name="$temp_build" exact="macro.struct_bt_alb_cattle_ranch_macro"/>
					</do_if>
					<do_if value="'energy'" list="$build">
						<append_to_list name="$temp_build" exact="macro.struct_bt_alb_cell_refinery_macro"/>
						<append_to_list name="$temp_build" exact="macro.struct_bt_alb_crystal_refinement_macro"/>
						<append_to_list name="$temp_build" exact="macro.struct_bt_alb_high_energy_construction_macro"/>
					</do_if>
					<do_if value="'massenergy'" list="$build">
						<append_to_list name="$temp_build" exact="macro.struct_bt_alb_solar_power_plant_macro"/>
						<append_to_list name="$temp_build" exact="macro.struct_bt_alb_fuelstation_macro"/>
					</do_if>
					<do_if value="'drug'" list="$build">
						<append_to_list name="$temp_build" exact="macro.struct_bt_alb_medical_supplies_macro"/>
						<append_to_list name="$temp_build" exact="macro.struct_bt_alb_spice_farm_macro"/>
						<append_to_list name="$temp_build" exact="macro.struct_bt_alb_laboratory_macro"/>
						<append_to_list name="$temp_build" exact="macro.struct_bt_alb_wheat_farm_macro"/>
					</do_if>
					<do_if value="'tech'" list="$build">
						<append_to_list name="$temp_build" exact="macro.struct_bt_alb_constructionmaterial_production_macro"/>
						<append_to_list name="$temp_build" exact="macro.struct_bt_alb_tech_complex_macro"/>
						<append_to_list name="$temp_build" exact="macro.struct_bt_alb_hightec_construction_macro"/>
					</do_if>
					<do_if value="'ship'" list="$build">
						<append_to_list name="$temp_build" exact="macro.struct_bt_alb_weaponry_complex_macro"/>
						<append_to_list name="$temp_build" exact="macro.struct_bt_alb_weaponry_production_macro"/>
						<append_to_list name="$temp_build" exact="macro.struct_bt_alb_drone_complex_macro"/>
						<append_to_list name="$temp_build" exact="macro.struct_bt_alb_drone_factory_macro"/>
					</do_if>
					<do_if value="'shippart'" list="$build" chance="md.$shipparts? * 100">
						<append_to_list name="$temp_build" exact="macro.{['struct_bt_alb_shippart_production_macro'].{1}}"/>
					</do_if>
					<do_if value="'outpost'" list="$build" comment="outpost">
						<append_to_list name="$temp_build" exact="macro.struct_econ_weapon_ar_defence_pl_macro"/><!-- struct_econ_weapon_ar_defence_macro -->
					</do_if>
					<do_if value="'warehouse'" list="$build" comment="4.0 = very bad idea // 4.1 = maybe?">
						<append_to_list name="$temp_build" exact="macro.struct_bt_alb_warehouse_macro"/>
					</do_if>
				</do_if>
				<do_if value="'ol'" list="$build">
					<do_if value="'food'" list="$build">
						<append_to_list name="$temp_build" exact="macro.struct_bt_ol_water_destillery_macro"/>
						<append_to_list name="$temp_build" exact="macro.struct_bt_ol_bofu_plant_macro"/>
						<append_to_list name="$temp_build" exact="macro.struct_bt_ol_farm_complex_macro"/>
						<append_to_list name="$temp_build" exact="macro.struct_bt_ol_plankton_tank_macro"/>
						<append_to_list name="$temp_build" exact="macro.struct_bt_ol_soy_farm_macro"/>
					</do_if>
					<do_if value="'energy'" list="$build">
						<append_to_list name="$temp_build" exact="macro.struct_bt_ol_cell_refinery_macro"/>
						<append_to_list name="$temp_build" exact="macro.struct_bt_ol_crystal_refinement_macro"/>
						<append_to_list name="$temp_build" exact="macro.struct_bt_ol_high_energy_construction_macro"/>
					</do_if>
					<do_if value="'massenergy'" list="$build">
						<append_to_list name="$temp_build" exact="macro.struct_bt_ol_solar_power_plant_macro"/>
						<append_to_list name="$temp_build" exact="macro.struct_bt_ol_fuelstation_macro"/>
					</do_if>
					<do_if value="'drug'" list="$build">
						<append_to_list name="$temp_build" exact="macro.struct_bt_ol_spacefuel_production_macro"/>
						<append_to_list name="$temp_build" exact="macro.struct_bt_ol_laboratory_macro"/>
						<append_to_list name="$temp_build" exact="macro.struct_bt_ol_spice_farm_macro"/>
						<append_to_list name="$temp_build" exact="macro.struct_bt_ol_medical_supplies_macro"/>
					</do_if>
					<do_if value="'tech'" list="$build">
						<append_to_list name="$temp_build" exact="macro.struct_bt_ol_tech_complex_macro"/>
						<append_to_list name="$temp_build" exact="macro.struct_bt_ol_hightec_construction_macro"/>
						<append_to_list name="$temp_build" exact="macro.struct_bt_ol_metalworks_macro"/>
						<append_to_list name="$temp_build" exact="macro.struct_bt_ol_construction_material_macro"/>
					</do_if>
					<do_if value="'ship'" list="$build">
						<append_to_list name="$temp_build" exact="macro.struct_bt_ol_weaponrycomplex_macro"/>
						<append_to_list name="$temp_build" exact="macro.struct_bt_ol_weaponryproduction_macro"/>
						<append_to_list name="$temp_build" exact="macro.struct_bt_ol_drone_complex_macro"/>
						<append_to_list name="$temp_build" exact="macro.struct_bt_ol_drone_factory_macro"/>
					</do_if>
					<do_if value="'shippart'" list="$build" chance="md.$shipparts? * 100">
						<append_to_list name="$temp_build" exact="macro.{['struct_bt_ol_shippartproduction_macro'].{1}}"/>
					</do_if>
					<do_if value="'outpost'" list="$build" comment="outpost">
						<append_to_list name="$temp_build" exact="macro.struct_econ_weapon_ar_defence_pl_macro"/><!-- struct_econ_weapon_ar_defence_macro -->
					</do_if>
					<do_if value="'warehouse'" list="$build" comment="4.0 = very bad idea // 4.1 = maybe?">
						<append_to_list name="$temp_build" exact="macro.struct_bt_alb_warehouse_macro"/>
					</do_if>
				</do_if>

				<set_value name="$tmpConfig.$build" exact="if $temp_build.count then $temp_build.clone else []" />
				<remove_value name="$temp_build"/>
				<remove_value name="$tempChk"/>

				<do_if value="$build" exact="'specialmacros'">
					<set_value name="$tmpConfig.$macroIdBoarding" exact="[]" />
					<set_value name="$tmpConfig.$macroIdScout" exact="[]" />
					<set_value name="$tmpConfig.$macroIdShipYard" exact="[]" />
				</do_if>

				<!--do_if value="$_CEO.money gt $tmpConfig.$minBuildSpecial *2">
					<set_value name="$tmpConfig.$max_builders" exact="$tmpConfig.$max_builders * 2" />
				</do_if-->

				<!-- difficult settings -->
				<do_if value="player.difficulty" list="[level.veryeasy, level.easy]">
					<set_value name="$tmpConfig.$cheat" comment="cheat resources at shipyards"/>
				</do_if>
				<do_elseif value="player.difficulty" exact="level.hard">
					<do_if value="$_CEO.$isInvader?">
						<set_value name="$tmpConfig.$sectorPatrol" exact="$tmpConfig.$clusterPatrol" operation="add"/>
					</do_if>
					<set_value name="$tmpConfig.$clusterPatrol" exact="$tmpConfig.$clusterPatrol * 2" />
					<set_value name="$tmpConfig.$patrolEscorts" exact="$tmpConfig.$patrolEscorts * 2" />
					<set_value name="$tmpConfig.$scouts" exact="$tmpConfig.$scouts * 2" />
					<set_value name="$tmpConfig.$fleets" exact="$tmpConfig.$fleets * 2" />
					<set_value name="$tmpConfig.$plunderPatrol" exact="$tmpConfig.$plunderPatrol * 2" />
					<!--set_value name="$tmpConfig.$traderCluster" exact="$tmpConfig.$traderCluster * 2" />
					<set_value name="$tmpConfig.$traderSector" exact="$tmpConfig.$traderSector * 2" />
					<set_value name="$tmpConfig.$traderStation" exact="$tmpConfig.$traderStation * 2" />
					<set_value name="$tmpConfig.$minerCluster" exact="$tmpConfig.$minerCluster * 2" /-->
					<set_value name="$tmpConfig.$donationTax" exact="$tmpConfig.$donationTax * 2" />
					<set_value name="$tmpConfig.$serviceFee" exact="$tmpConfig.$serviceFee *2" />
				</do_elseif>
				<do_elseif value="player.difficulty" list="[level.veryhard, level.impossible]">
					<set_value name="$tmpConfig.$clusterPatrol" exact="$tmpConfig.$clusterPatrol * 2" />
					<do_if value="$_CEO.$isInvader?">
						<set_value name="$tmpConfig.$sectorPatrol" exact="$tmpConfig.$clusterPatrol" operation="add"/>
					</do_if>
					<set_value name="$tmpConfig.$patrolEscorts" exact="$tmpConfig.$patrolEscorts * 4" />
					<set_value name="$tmpConfig.$scouts" exact="$tmpConfig.$scouts * 2" />
					<set_value name="$tmpConfig.$fleets" exact="$tmpConfig.$fleets * 2" />
					<set_value name="$tmpConfig.$max_builders" exact="$tmpConfig.$max_builders * 2" />
					<set_value name="$tmpConfig.$invasionPatrol" exact="$tmpConfig.$invasionPatrol * 2" />
					<set_value name="$tmpConfig.$plunderPatrol" exact="$tmpConfig.$plunderPatrol * 2" />
					<!--set_value name="$tmpConfig.$traderCluster" exact="$tmpConfig.$traderCluster * 2" />
					<set_value name="$tmpConfig.$traderSector" exact="$tmpConfig.$traderSector * 2" />
					<set_value name="$tmpConfig.$traderStation" exact="$tmpConfig.$traderStation * 2" />
					<set_value name="$tmpConfig.$minerCluster" exact="$tmpConfig.$minerCluster * 2" /-->
					<set_value name="$tmpConfig.$donationTax" exact="$tmpConfig.$donationTax * 2" />
					<set_value name="$tmpConfig.$serviceFee" exact="$tmpConfig.$serviceFee *2" />

					<set_value name="$tmpConfig.$cheatNPC" comment="cheat resources at NPC shipyards"/>
					<set_value name="$tmpConfig.$cheatEscorts" comment="cheat escortvessels"/>
				</do_elseif>
				<do_else comment="level.medium">
					<!-- default -->
				</do_else>

				<do_if value="$_CEO.$isInvader?">
					<set_value name="$tmpConfig.$clusterPatrol" exact="0" />
				</do_if>

			<!--set_value name="$tmpConfig.$cheat" comment="for testing disable/remove later"/-->

				<do_if value="$tmpConfig.$cheatEscorts?">
					<set_value name="$_CEO.$cheatEscorts" exact="$tmpConfig.$minBuildSpecial" comment="cheat escortvessels"/>
				</do_if>
				<do_else>
					<remove_value name="$_CEO.$cheatEscorts"/>
				</do_else>

				<!-- init var -->
				<do_if value="md.$stationwiki?" negate="true">
					<!-- TODO: perfect world list -->
					<set_value name="md.$stationwiki" exact="table[]"/>
				</do_if>
			</actions>
		</library>

		<!--
		<set_value name="$_faction" exact="faction.player" />
		<include_actions ref="md.MM_Corps__Data.MMCData_CEO_PROPERTY" />
		-->
		<library name="MMCData_CEO_PROPERTY">
			<actions>
				<do_if value="$startzone? and $startzone.exists" negate="true">
					<find_zone name="$startzone" space="player.galaxy" priorityzone="true" tempzone="false" multiple="false">
						<match class="class.highway" negate="true" />
					</find_zone>
				</do_if>
				<create_list name="$todo_stations" />
				<create_list name="$todo_ships" />

				<do_if value="$_faction.id" list="['deepwater']">
					<find_station name="$temp_station" space="player.galaxy" multiple="false" >
						<match owner="$_faction"/>
					</find_station>
					<do_if value="$temp_station" negate="true">
						<append_to_list name="$todo_stations" exact="
							[ $startzone.macro, null, [
														[macro.struct_bt_alb_warehouse_macro, 'spawn']
													]
							]
						"/> 
					</do_if>
					<remove_value name="$temp_station"/>
				</do_if>
				<!--
				*** Stations (create, free/build)
				<append_to_list name="$todo_stations" exact="
					[ $startzone.macro, null, [
												[macro.struct_bt_alb_drone_factory_macro, 'spawn']
											]
					]
				"/> 
				<append_to_list name="$todo_ships" exact="
					[ $startzone.macro, null, [
												['trade', macro.units_size_l_kit_container_03_macro, 3 ]
											]
					]
				"/>

				-->
		
				<do_if value="$_faction.id" list="['familyryak','heartofalbion','canteran','argon_colony', 'deepwater']" comment="domination">
					<set_value name="$startmoney" exact="5000000000Cr" />
				</do_if>
				<do_elseif value="$_faction.id" list="['argongovernment','terracorp','plutarch']" comment="domination++">
					<set_value name="$startmoney" exact="10000000000Cr" />
				</do_elseif>
				<do_elseif value="$_faction.id" list="['terran','atlas','hereticvanguards','albionenergy','ls_terran']" comment="cooperative++">
					<set_value name="$startmoney" exact="2000000000Cr" />
				</do_elseif>
				<do_elseif value="$_faction.id" list="['wholesomefoods','sonraenergy','aquarius','beryll','nolimits','leddaindustrial','jonferson','frantonpharma','chow']" comment="cooperative">
					<set_value name="$startmoney" exact="1000000000Cr" />
				</do_elseif>
				<do_elseif value="$_faction.id" list="['xenon']">
					<set_value name="$startmoney" exact="50000000000Cr" />
				</do_elseif>
				<do_elseif value="$_faction.id" list="['sovereignsyndicate','reivers','goner','mlspirate','hayen','ls_dark_space']" comment="pirat">
					<set_value name="$startmoney" exact="500000000Cr" />
				</do_elseif>
				<do_else comment="cooperative">
					<set_value name="$startmoney" exact="1000000000Cr" />
				</do_else>

				<do_if value="$todo_ships.count == 0 and $PROPERTY_INIT?">
					<set_value name="$faction" exact="$_faction" />
			
					<include_actions ref="md.MM_Corps__Data.MMCData_config" />

					<do_if value="$tmpConfig.$ships.$fight.count">
						<set_value name="$faction" exact="$_faction" />
				
						<include_actions ref="md.MM_Corps__Data.MMCData_find_space" />

						<do_if value="$validZonesCore.count">
							<set_value name="$nogo" exact="null" />
							<find_zone name="$nogo" macro="macro.tzoneCluster_D_Sector17_Zone34_macro" chance="if player.module == 'ep1' and ['sovereignsyndicate','heartofalbion','wholesomefoods','beryll','nolimits','leddaindustrial','albionenergy'].indexof.{$_faction.id} then 100 else 0"/>
							<do_if value="$validZonesCore.count gt 1 and $validZonesCore.indexof.{$nogo}" chance="if player.module == 'ep1' and $nogo then 100 else 0" comment="remove Twilight Sentinel from spawnlist">
								<remove_value name="$validZonesCore.{$validZonesCore.indexof.{$nogo}}"/>
							</do_if>
							<do_if value="$validZonesCore.count gt 1 and player.primaryship.zone and $validZonesCore.indexof.{player.primaryship.zone}">
								<remove_value name="$validZonesCore.{$validZonesCore.indexof.{player.primaryship.zone}}"/>
							</do_if>

							<do_if value="$tmpConfig.$ships.$build.count and $tmpConfig.$max_builders">
								<do_all exact="[($tmpConfig.$max_builders * 0.33f)i, 1].max">
									<set_value name="$temp" exact="$validZonesCore.random" />
									<append_to_list name="$todo_ships" exact="
										[ $temp.macro, null, [
																	['build', $tmpConfig.$ships.$build.random, 1 ]
																]
										]
									" />
								</do_all>
							</do_if>
							<do_if value="$tmpConfig.$ships.$trade.count and $tmpConfig.$traderCluster and $validCluster.count">
								<do_all exact="[(($tmpConfig.$traderCluster * $validCluster.count) * 0.75f)i, 1].max">
									<set_value name="$temp" exact="$validZonesCore.random" />
									<append_to_list name="$todo_ships" exact="
										[ $temp.macro, null, [
																	['trade', $tmpConfig.$ships.$trade.random, 1 ]
																]
										]
									" />
								</do_all>
							</do_if>
							<do_if value="$tmpConfig.$ships.$mine.count and $tmpConfig.$minerCluster and $validCluster.count">
								<do_all exact="[(($tmpConfig.$minerCluster * $validCluster.count) * 0.9f)i, 1].max">
									<set_value name="$temp" exact="$validZonesCore.random" />
									<append_to_list name="$todo_ships" exact="
										[ $temp.macro, null, [
																	['mine', $tmpConfig.$ships.$mine.random, 1 ]
																]
										]
									" />
								</do_all>
							</do_if>
							<do_if value="$tmpConfig.$ships.$trade.count and $tmpConfig.$plunderPatrol and $validCluster.count">
								<do_all exact="[(($tmpConfig.$plunderPatrol * $validCluster.count) * 0.75f)i, 1].max">
									<set_value name="$temp" exact="$validZonesCore.random" />
									<append_to_list name="$todo_ships" exact="
										[ $temp.macro, null, [
																	['plunder', $tmpConfig.$ships.$trade.random, 1 ]
																]
										]
									" />
								</do_all>
							</do_if>
							<set_value name="$tmp" exact="0"/>

							<set_value name="$tmp" exact="$tmpConfig.$plunderPatrol * $validCluster.count" operation="add"/>
							<set_value name="$tmp" exact="$tmpConfig.$clusterPatrol * $validCluster.count" operation="add"/>
							<set_value name="$tmp" exact="$tmpConfig.$sectorPatrol * $validSectors.count" operation="add"/>
							<set_value name="$tmp" exact="$tmpConfig.$zonePatrol * $validZonesCore.count" operation="add"/>
							<set_value name="$tmp" exact="$tmpConfig.$stationPatrol * $validZonesCore.count" operation="add" comment="route patrol"/>
							<set_value name="$tmp" exact="$tmpConfig.$fleets" operation="add" comment="TODO improve fleet"/>
							<set_value name="$tmp" exact="$tmpConfig.$scouts" operation="add"/>

							<do_if value="$tmpConfig.$ships.$fight.count and $tmp">
								<set_value name="$escorts_master_cap" exact="[4, $tmpConfig.$patrolEscorts].min"/>

								<set_value name="$escorts_profile" exact="	if [level.veryhard, level.impossible].indexof.{player.difficulty} then 'increasing' else 
																			if [level.hard, level.medium].indexof.{player.difficulty} then 'bell' else
																			if [level.veryeasy, level.easy].indexof.{player.difficulty} then 'decreasing' else 'flat'"/>
								<do_if value="not $tmpConfig.$patrolEscorts">
									<set_value name="$escorts_mid_chance" exact="0"/>
									<set_value name="$escorts_cap_chance" exact="0"/>
								</do_if>
								<do_elseif value="player.difficulty" list="[level.veryhard, level.impossible]">
									<set_value name="$escorts_mid_chance" exact="if $tmpConfig.$ships.$fight_sm.count then 40 else 0"/>
									<set_value name="$escorts_cap_chance" exact="100"/>
								</do_elseif>
								<do_elseif value="player.difficulty" list="[level.hard, level.medium]">
									<set_value name="$escorts_mid_chance" exact="if $tmpConfig.$ships.$fight_sm.count then 80 else 0"/>
									<set_value name="$escorts_cap_chance" exact="40"/>
								</do_elseif>
								<do_else>
									<set_value name="$escorts_mid_chance" exact="if $tmpConfig.$ships.$fight_sm.count then 50 else 0"/>
									<set_value name="$escorts_cap_chance" exact="0"/>
								</do_else>

								<do_all exact="[($tmp * 0.7f)i, 1].max">
									<set_value name="$temp" exact="$validZonesCore.random" />
									
									<do_if value="true" chance="$escorts_mid_chance">
										<set_value name="$escorts" min="$tmpConfig.$patrolEscorts/2" max="$tmpConfig.$patrolEscorts" profile="$escorts_profile"/>
										<append_to_list name="$todo_ships" exact="
											[ $temp.macro, null, [
																		['fight', $tmpConfig.$ships.$fight.random, 1 ],
																		['fight', $tmpConfig.$ships.$fight_sm.random, $escorts ]
																	]
											]
										" />
									</do_if>
									<do_elseif value="true" chance="$escorts_cap_chance">
										<set_value name="$escorts" min="$escorts_master_cap/2" max="$escorts_master_cap" profile="$escorts_profile"/>
										<append_to_list name="$todo_ships" exact="
											[ $temp.macro, null, [
																		['fight', $tmpConfig.$ships.$fight.random, 1 ],
																		['fight', $tmpConfig.$ships.$fight.random, $escorts ]
																	]
											]
										" />
									</do_elseif>
									<do_else>
										<append_to_list name="$todo_ships" exact="
											[ $temp.macro, null, [
																		['fight', $tmpConfig.$ships.$fight.random, 1 ]
																	]
											]
										" />
									</do_else>
								</do_all>
							</do_if>
						</do_if>
						<remove_value name="$tmp"/>
						<remove_value name="$temp"/>

						<remove_value name="$escorts"/>
						<remove_value name="$escorts_cap_chance"/>
						<remove_value name="$escorts_mid_chance"/>
						<remove_value name="$escorts_profile"/>
						<remove_value name="$escorts_master_cap"/>
					</do_if>

					<!--
					<set_value name="$do_stations" exact="true" />
					<set_value name="$do_ships" exact="true" />
					<set_value name="$CEO" exact="$_CEO" />
					<set_value name="$target_space" exact="player.galaxy" />
					<include_actions ref="md.MM_Corps__Data.MMCData_setaccount_space" />
					-->
			
					<remove_value name="$validCluster"/>
					<remove_value name="$validSectors"/>
					<remove_value name="$validZones"/>
					<remove_value name="$validZonesCore"/>
					<remove_value name="$validZonesHotZone"/>
					<remove_value name="$tmp_stations"/>
					<remove_value name="$tmpConfig"/>
					<remove_value name="$nogo"/>
			
					<remove_value name="$tmpConfig"/>
					<remove_value name="$faction"/>
					<!-- Status INIT -->
					<include_actions ref="md.MM_Corps__Data.MMCData_CEO_status" />
				</do_if>
			</actions>
		</library>

		<!--
		<set_value name="$_faction" exact="faction.player" />
		<set_value name="$_CEO" exact="$actorCEO" />
		<include_actions ref="md.MM_Corps__Data.MMCData_CEO_INI" />
		-->
		<library name="MMCData_CEO_INI">
			<actions>
				<do_if value="global.$factionCEOs? and typeof global.$factionCEOs == datatype.table" negate="true">
					<set_value name="global.$factionCEOs" exact="table[]" />
				</do_if>
				<set_value name="global.$factionCEOs.{'$' + $_faction.id}" exact="$_CEO" />
		
				<set_actor_account actor="$_CEO"/>

				<include_actions ref="md.MM_Corps__Data.MMCData_CEO_PROPERTY" />

				<create_cue_actor name="$Patsy" cue="INIT">
					<select race="race.argon"/>
					<owner exact="$_faction" />
				</create_cue_actor>

				<transfer_money from="$Patsy" to="$_CEO" amount="$startmoney"/>

				<remove_cue_actor actor="$Patsy" cue="INIT"/>
				<destroy_object object="$Patsy"/>

				<remove_value name="$Patsy"/>
				<remove_value name="$startmoney"/>

				<!--write_to_logbook category="general" text="'%1 CEO init: %2Cr.'.[$_faction, $_CEO.money.formatted.default]"/-->
		
				<do_if value="$_faction.id" list="['xenon','khaak']">
					<set_value name="$_CEO.$isInvader" />
				</do_if>
				<do_if value="$_faction.id" list="['deepwater','acmecorp']">
					<set_value name="$_CEO.$isService" />
				</do_if>

				<!--
				<remove_value name="$_CEO"/>
				<remove_value name="$_faction"/>
				-->

				<remove_value name="$todo"/>
				<remove_value name="$todo_stations"/>
				<remove_value name="$todo_ships"/>
			</actions>
		</library>

		<!--
		<set_value name="$temp_zones" exact="[]" comment="optional"/>
		<set_value name="$fallback" exact="true" comment="optional"/>
		<set_value name="$faction" exact="faction.player" />
		<include_actions ref="md.MM_Corps__Data.MMCData_find_space" />
		<remove_value name="$validCluster"/>
		<remove_value name="$validSectors"/>
		<remove_value name="$validZones"/>
		<remove_value name="$validZonesCore"/>
		<remove_value name="$validZonesHotZone"/>
		-->
		<library name="MMCData_find_space">
			<actions>
				<create_list name="$validZones"/>
				<create_list name="$validZonesCore"/>
				<create_list name="$validZonesHotZone"/>
				<create_list name="$validSectors"/>
				<create_list name="$validCluster"/>
				<set_value name="$coreZchance" exact="100" />

				<find_zone name="$temp_zones" space="player.galaxy" multiple="true" owner="$faction" tempzone="false" mapzone="true" chance="if $temp_zones? and $temp_zones.count then 0 else 100"/>

				<find_station name="$temp_stations" space="player.galaxy" functional="true" multiple="true">
					<match owner="$faction"/>
				</find_station>

				<do_if value="$temp_zones.count == 0 and $temp_stations.count == 0" chance="if $fallback? and $fallback then 100 else 0">
					<find_ship name="$temp_ships" class="[class.ship_l, class.ship_xl]" functional="true" space="player.galaxy" multiple="true">
						<match primarypurpose="objectpurpose.build"/>
						<match owner="$faction"/>
					</find_ship>
					<do_if value="$temp_ships.count == 0">
						<find_ship name="$temp_ships" class="[class.ship_l, class.ship_xl]" functional="true" space="player.galaxy" multiple="true">
							<match owner="$faction"/>
						</find_ship>
						<set_value name="$coreZchance" exact="0" />
					</do_if>
					<do_all exact="$temp_ships.count" counter="$x">
						<do_if value="$temp_ships.{$x}.exists" negate="true">
							<continue />
						</do_if>
						<do_if value="$temp_zones.indexof.{$temp_ships.{$x}.zone} == 0">
							<append_to_list name="$temp_zones" exact="$temp_ships.{$x}.zone"/>
						</do_if>
					</do_all>
				</do_if>
				<remove_value name="$temp_ships"/>
				<remove_value name="$fallback"/>

				<do_all exact="$temp_stations.count" counter="$x">
					<do_if value="$temp_stations.{$x}.exists" negate="true">
						<continue />
					</do_if>
					<do_if value="$temp_zones.indexof.{$temp_stations.{$x}.zone} == 0">
						<append_to_list name="$temp_zones" exact="$temp_stations.{$x}.zone"/>
					</do_if>
					<do_if value="$validZonesCore.indexof.{$temp_stations.{$x}.zone} == 0">
						<append_to_list name="$validZonesCore" exact="$temp_stations.{$x}.zone"/>
					</do_if>
				</do_all>
				<remove_value name="$temp_stations"/>

				<do_all exact="$temp_zones.count" counter="$x">
					<do_if value="$validCluster.indexof.{$temp_zones.{$x}.cluster} == 0">
						<append_to_list name="$validCluster" exact="$temp_zones.{$x}.cluster"/>
					</do_if>
					<do_if value="$validSectors.indexof.{$temp_zones.{$x}.sector} == 0">
						<append_to_list name="$validSectors" exact="$temp_zones.{$x}.sector"/>
					</do_if>

					<find_object name="$temp_object" space="$temp_zones.{$x}" class="[class.gate, class.highwayentrygate]" multiple="true"/>
					<do_all exact="$temp_object.count" counter="$y">
						<do_if value="$temp_object.{$y}.exists and $temp_object.{$y}.destination" negate="true">
							<continue />
						</do_if>
						<do_elseif value="$temp_object.{$y}.isclass.gate and not $temp_object.{$y}.isactive">
							<continue />
						</do_elseif>
						
						<do_if value="$validZonesCore.indexof.{$temp_object.{$y}.zone} == 0" chance="$coreZchance">
							<append_to_list name="$validZonesCore" exact="$temp_object.{$y}.zone" chance="if $temp_object.{$y}.zone.owner and $temp_object.{$y}.zone.owner.relationto.{$faction} gt $faction.relation.neutral.max then 100 else 0"/>
							<append_to_list name="$validZonesHotZone" exact="$temp_object.{$y}.zone" chance="if $temp_object.{$y}.isclass.gate and $validZonesHotZone.indexof.{$temp_object.{$y}.zone} == 0 and $temp_object.{$y}.zone.owner == $faction then 100 else 0"/>
						</do_if>
						<do_if value="$validZones.indexof.{$temp_object.{$y}.destination} == 0">
							<append_to_list name="$validZones" exact="$temp_object.{$y}.destination"/>
						</do_if>
						<do_if value="$validSectors.indexof.{$temp_object.{$y}.destination.sector} == 0">
							<append_to_list name="$validSectors" exact="$temp_object.{$y}.destination.sector"/>
						</do_if>
						<do_if value="$validCluster.indexof.{$temp_object.{$y}.destination.cluster} == 0">
							<append_to_list name="$validCluster" exact="$temp_object.{$y}.destination.cluster"/>
						</do_if>
					</do_all>
					<remove_value name="$temp_object"/>

					<find_object name="$temp_object" space="$temp_zones.{$x}" class="[class.jumpbeacon]" multiple="false"/>
					<do_if value="$temp_object and $validZonesCore.indexof.{$temp_zones.{$x}} == 0">
						<append_to_list name="$validZonesCore" exact="$temp_zones.{$x}" chance="if $validZonesCore.indexof.{$temp_zones.{$x}} == 0 then 100 else 0"/>
						<append_to_list name="$validZonesHotZone" exact="$temp_zones.{$x}" chance="if $validZonesHotZone.indexof.{$temp_zones.{$x}} == 0 and $temp_zones.{$x}.owner == $faction then 100 else 0"/>
					</do_if>
					<remove_value name="$temp_object"/>

					<find_object name="$temp_object" space="$temp_zones.{$x}" class="[class.highwayexitgate]" multiple="true"/>
					<do_all exact="$temp_object.count" counter="$y">
						<do_if value="$temp_object.{$y}.exists" negate="true">
							<continue />
						</do_if>
						<!--do_if value="$validZones.indexof.{$temp_object.{$y}.entry.zone} == 0">
							<append_to_list name="$validZones" exact="$temp_object.{$y}.entry.zone"/>
						</do_if-->
						<do_if value="$validSectors.indexof.{$temp_object.{$y}.entry.sector} == 0">
							<append_to_list name="$validSectors" exact="$temp_object.{$y}.entry.sector"/>
						</do_if>
						<do_if value="$validZonesCore.indexof.{$temp_object.{$y}.zone} == 0" chance="$coreZchance">
							<append_to_list name="$validZonesCore" exact="$temp_object.{$y}.zone" chance="if $temp_object.{$y}.zone.owner and $temp_object.{$y}.zone.owner.relationto.{$faction} gt $faction.relation.neutral.max then 100 else 0"/>
							<append_to_list name="$validZonesHotZone" exact="$temp_object.{$y}.zone" chance="if $validZonesHotZone.indexof.{$temp_object.{$y}.zone} == 0 and $temp_object.{$y}.zone.owner == $faction then 100 else 0"/>
						</do_if>
					</do_all>
					<remove_value name="$temp_object"/>

					<do_all exact="$temp_zones.{$x}.adjacentzones.count" counter="$y">
						<do_if value="$temp_zones.{$x}.adjacentzones.{$y}.istemporaryzone or $temp_zones.{$x}.adjacentzones.{$y}.isclass.highway or not $temp_zones.{$x}.adjacentzones.{$y}.ismapzone">
							<continue />
						</do_if>
						<do_if value="$validZones.indexof.{$temp_zones.{$x}.adjacentzones.{$y}} == 0">
							<append_to_list name="$validZones" exact="$temp_zones.{$x}.adjacentzones.{$y}"/>
						</do_if>
					</do_all>

					<do_if value="$validZones.indexof.{$temp_zones.{$x}} == 0">
						<append_to_list name="$validZones" exact="$temp_zones.{$x}"/>
					</do_if>
				</do_all>

				<set_value name="$temp_HZ" exact="false" />
				<do_all exact="$validZonesCore.count" counter="$x">
					<do_all exact="$validZonesCore.{$x}.adjacentzones.count" counter="$y">
						<do_if value="$validZonesCore.{$x}.adjacentzones.{$y}.istemporaryzone or $validZonesCore.{$x}.adjacentzones.{$y}.isclass.highway or not $validZonesCore.{$x}.adjacentzones.{$y}.ismapzone">
							<continue />
						</do_if>
						<do_if value="$validZonesHotZone.indexof.{$validZonesCore.{$x}} == 0 and $validZonesCore.{$x}.adjacentzones.{$y}.owner and $validZonesCore.{$x}.adjacentzones.{$y}.owner.hasrelation.enemy.{$faction}">
							<append_to_list name="$validZonesHotZone" exact="$validZonesCore.{$x}"/>
							<set_value name="$temp_HZ" exact="true" />
						</do_if>
					</do_all>
				</do_all>
				<do_if value="$temp_HZ" negate="true">
					<clear_list list="$validZonesHotZone" />
				</do_if>
				<remove_value name="$coreZchance"/>
				<remove_value name="$temp_zones"/>
				<remove_value name="$temp_HZ"/>
				<remove_value name="$faction"/>
			</actions>
		</library>

		<!--
		<set_value name="$faction" exact="faction.player" />
		<include_actions ref="md.MM_Corps__Data.MMCData_find_ships" />
		<remove_value name="$shipNothingTodo"/>
		<remove_value name="$shipDoUnknown"/>
		<remove_value name="$shipDoBuild"/>
		<remove_value name="$shipDoTrade"/>
		<remove_value name="$shipDoMine"/>
		<remove_value name="$shipDoPatrol"/>
		<remove_value name="$shipDoPlunder"/>
		<remove_value name="$shipDoEscort"/>
		<remove_value name="$shipDoStationSupport"/>
		-->
		<library name="MMCData_find_ships">
			<actions>
				<create_list name="$shipNothingTodo"/>
				<create_list name="$shipDoUnknown"/>
				<create_list name="$shipDoBuild"/>
				<create_list name="$shipDoTrade"/>
				<create_list name="$shipDoMine"/>
				<create_list name="$shipDoPatrol"/>
				<create_list name="$shipDoPlunder"/>
				<create_list name="$shipDoEscort"/>
				<create_list name="$shipDoStationSupport"/>

				<find_ship name="$tmpShips" class="[class.ship_m, class.ship_s, class.ship_l, class.ship_xl]" owner="$faction" space="player.galaxy" multiple="true"/> 
				<do_all exact="$tmpShips.count" counter="$x"> 
					<do_if value="$tmpShips.{$x}.trueowner == $faction and $tmpShips.{$x}.pilot.exists" negate="true">
						<continue />
					</do_if>
					<do_elseif value="$tmpShips.{$x}.isjobship">
						<do_if value="$tmpShips.{$x}.isclass.[class.ship_l, class.ship_xl] 
									and not ( ($tmpShips.{$x}.pilot.$whatido? and ['move.escort', 'BR.move.escort', 'carrier.default'].indexof.{$tmpShips.{$x}.pilot.$whatido}) 
												or [command.escort, command.protect].indexof.{$tmpShips.{$x}.pilot.command.value} )" 
							chance="if not $tmpShips.{$x}.job or $tmpShips.{$x}.job == null or ($temp_jobIDs? and $temp_jobIDs.indexof.{$tmpShips.{$x}.job}) then 0 else 100">
							<create_list name="$temp_jobIDs" chance="( not $temp_jobIDs? )*100"/>
							<append_to_list name="$temp_jobIDs" exact="$tmpShips.{$x}.job"/>
						</do_if>
						<continue />
					</do_elseif>
					<do_elseif value="$tmpShips.{$x}.ismission">
						<continue />
					</do_elseif>
					<do_elseif value="$tmpShips.{$x}.pilot.$escort? or $tmpShips.{$x}.pilot.$boarding? or $tmpShips.{$x}.pilot.$spawnjob?">
						<continue />
					</do_elseif>
					<do_if value="$tmpShips.{$x}.pilot.$whatido?"> 
						<do_if value="$tmpShips.{$x}.pilot.$whatido" list="['trade.ship', 'trade.ship.ranged']">
							<do_if value="$tmpShips.{$x}.commander and $tmpShips.{$x}.commander.isclass.station">
								<append_to_list name="$shipDoStationSupport" exact="$tmpShips.{$x}"/>
							</do_if>
							<do_else>
								<append_to_list name="$shipDoTrade" exact="$tmpShips.{$x}"/>
							</do_else>
						</do_if>
						<do_elseif value="$tmpShips.{$x}.pilot.$whatido" list="['move.patrol', 'BR.move.patrol', 'move.patrol.route']">
							<append_to_list name="$shipDoPatrol" exact="$tmpShips.{$x}"/>
						</do_elseif>
						<do_elseif value="$tmpShips.{$x}.pilot.$whatido" list="['mining.ship.free', 'mining.ship.station', 'mining.ship.player']">
							<do_if value="$tmpShips.{$x}.commander and $tmpShips.{$x}.commander.isclass.station">
								<append_to_list name="$shipDoStationSupport" exact="$tmpShips.{$x}"/>
							</do_if>
							<do_else>
								<append_to_list name="$shipDoMine" exact="$tmpShips.{$x}"/>
							</do_else>
						</do_elseif>
						<do_elseif value="$tmpShips.{$x}.pilot.$whatido" list="['move.plunder', 'move.plunder.taxi']">
							<append_to_list name="$shipDoPlunder" exact="$tmpShips.{$x}"/>
						</do_elseif>
						<do_elseif value="$tmpShips.{$x}.pilot.$whatido" list="['move.escort', 'BR.move.escort', 'carrier.default']">
							<append_to_list name="$shipDoEscort" exact="$tmpShips.{$x}"/>
						</do_elseif>
						<do_elseif value="$tmpShips.{$x}.pilot.$whatido" list="['move.buildership']">
							<append_to_list name="$shipDoBuild" exact="$tmpShips.{$x}"/>
						</do_elseif>
						<do_elseif value="$tmpShips.{$x}.pilot.$whatido" list="['move.idle']">
							<append_to_list name="$shipNothingTodo" exact="$tmpShips.{$x}"/>
						</do_elseif>
						<do_else>
							<append_to_list name="$shipDoUnknown" exact="$tmpShips.{$x}"/>
						</do_else>
					</do_if> 
					<do_elseif value="not $tmpShips.{$x}.pilot.$whatido? and $tmpShips.{$x}.primarypurpose == objectpurpose.build and $tmpShips.{$x}.buildmodule.buildanchor.exists">
						<append_to_list name="$shipDoBuild" exact="$tmpShips.{$x}"/>
					</do_elseif>
					<do_else>
						<do_if value="$tmpShips.{$x}.pilot.command.value" list="[command.patrol]">
							<append_to_list name="$shipDoPatrol" exact="$tmpShips.{$x}"/>
						</do_if>
						<do_elseif value="$tmpShips.{$x}.pilot.command.value" list="[command.escort, command.protect]">
							<append_to_list name="$shipDoEscort" exact="$tmpShips.{$x}"/>
						</do_elseif>
						<do_elseif value="$tmpShips.{$x}.commander.exists and $tmpShips.{$x}.pilot.$carrier?">
							<append_to_list name="$shipDoEscort" exact="$tmpShips.{$x}"/>
						</do_elseif>
						<do_else>
							<append_to_list name="$shipNothingTodo" exact="$tmpShips.{$x}"/>
						</do_else>
					</do_else>
				</do_all> 
				<remove_value name="$tmpShips"/>
				<remove_value name="$faction"/>
			</actions>
		</library>

		<!-- 
		<set_value name="$do_stations" exact="true" />
		<set_value name="$do_ships" exact="true" />
		<set_value name="$CEO" exact="global.$x_CEO" />
		<set_value name="$faction" exact="faction.player" />
		<set_value name="$target_space" exact="player.galaxy" />
		<include_actions ref="md.MM_Corps__Data.MMCData_setaccount_space" />
		-->
		<library name="MMCData_setaccount_space">
			<actions>
				<do_if value="not $do_stations? or ($do_stations? and $do_stations)">
					<find_station name="$Stations" multiple="true" space="$target_space" owner="$faction"/>
					<do_all exact="$Stations.count" counter="$x" >
						<set_value name="$Object" exact="$Stations.{$x}" />
						<include_actions ref="md.MM_Corps__Data.MMCData_setaccount_station" />
					</do_all>
					<remove_value name="$Object"/>
				</do_if>

				<do_if value="not $do_ships? or ($do_ships? and $do_ships)">
					<find_ship name="$tmpShips" multiple="true" class="[class.ship]" space="$target_space" owner="$faction"/>
					<do_all exact="$tmpShips.count" counter="$x" >
						<do_if value="$tmpShips.{$x}.ismasstraffic">
							<continue />
						</do_if>
						<do_elseif value="$tmpShips.{$x}.ismission">
							<continue />
						</do_elseif>
						<do_elseif value="$tmpShips.{$x}.isjobship" chance="0">
							<continue />
						</do_elseif>
						<do_elseif value="$tmpShips.{$x}.isclass.drone">
							<continue />
						</do_elseif>
						<do_elseif value="$tmpShips.{$x}.pilot.$spawnjob?">
							<continue />
						</do_elseif>
						<do_if value="$tmpShips.{$x}.pilot">
							<share_actor_account actor="$tmpShips.{$x}.pilot" otherobject="$CEO"/>
						</do_if>
						<do_if value="$tmpShips.{$x}.architect">
							<share_actor_account actor="$tmpShips.{$x}.architect" otherobject="$CEO"/>
						</do_if>
					</do_all>
				</do_if>
				<remove_value name="$Stations"/>
				<remove_value name="$tmpShips"/>
				<remove_value name="$target_space"/>
				<remove_value name="$faction"/>
				<remove_value name="$do_ships"/>
				<remove_value name="$do_stations"/>
				<remove_value name="$CEO"/>
			</actions>
		</library>

		<!-- 
		<set_value name="$faction" exact="faction.player" />
		<include_actions ref="md.MM_Corps__Data.MMCData_disable_jobs" />
		-->
		<library name="MMCData_disable_jobs">
			<actions>
				<set_value name="$temp_jobIDs" exact="[
					'albion_collector_ions_large',
					'albion_collector_plasma_large',
					'albion_miner_ice_large',
					'albion_miner_mineral_large_01',
					'albion_miner_mineral_large_02',
					'albion_miner_mineral_large_03',
					'albion_miner_mineral_large_04',
					'albion_trader_agricultural_large',
					'albion_trader_energy_large_01',
					'albion_trader_energy_large_02',
					'albion_trader_energy_large_03',
					'albion_trader_food_large',
					'albion_trader_hightech_large_01',
					'albion_trader_hightech_large_02',
					'albion_trader_water_large',
					'albion_trader_pharmaceutical_large',
					'albion_trader_refined_large_01',
					'albion_trader_refined_large_02',
					'albion_trader_shiptech_large_01',
					'albion_trader_shiptech_large_02',
					'albion_trader_weapontech_large_01',
					'albion_trader_weapontech_large_02',
					'led_special_construction_trader',
					'albion_trader_guest_arg_large',
					'albion_trader_guest_canteran_large_01',
					'albion_trader_guest_canteran_large_02',
					'hoa_fighter_recon_cluster',
					'hoa_fighter_patrol_sector04',
					'hoa_carrier_sector04',
					'hoa_frigate_sector04',
					'pmc_fighter_patrol_cluster',
					'pmc_carrier_cluster',
					'pmc_destroyer_cluster',
					'sov_xl_destroyer_hq',
					'sos_fighter_patrol_cluster',
					'sos_fighter_heavy_raid_leader',
					'sov_trade_l',
					'sov_plunder_large',
					'sov_plunder',
					'sos_bomber_patrol_cluster',
					'can_chapter2_light_patrol_sector18',
					'can_chapter2_light_frigate_sector18',
					'can_chapter2_light_destroyer_sector18',
					'can_chapter2_light_trader_energy_medium_sector18',
					'can_chapter2_light_trader_water_medium_sector18',
					'can_chapter2_medium_trader_agricultural_medium_sector18',
					'can_chapter2_medium_trader_energy_medium_sector18',
					'can_chapter2_medium_trader_water_medium_sector18',
					'can_chapter2_medium_trader_agricultural_large_sector18',
					'can_chapter2_medium_trader_energy_large_sector18',
					'can_chapter2_medium_trader_food_large_sector18',
					'can_chapter2_medium_trader_water_large_sector18',
					'devries_miner_ice_large',
					'hoa_chapter2_light_patrol_sector18',
					'hoa_chapter2_light_frigate_sector18',
					'hoa_chapter2_light_carrier_sector18',
					'hoa_chapter2_medium_patrol_sector18',
					'hoa_chapter2_medium_frigate_sector18',
					'hoa_chapter2_medium_carrier_sector18',
					'hoa_chapter2_medium_patrol_escort',
					'pmc_chapter2_medium_patrol_sector17',
					'pmc_chapter2_medium_carrier_sector17',
					'pmc_chapter2_medium_destroyer_sector17',
					'pmc_chapter2_heavy_patrol_sector17',
					'pmc_chapter2_heavy_carrier_sector17',
					'pmc_chapter2_heavy_destroyer_sector17',
					'pmc_chapter2_heavy_patrol_escort',
					'rei_chapter2_light_patrol_sector17',
					'rei_chapter2_light_patrol_sector18',
					'rei_chapter2_light_patrol_sector19',
					'rei_chapter2_light_patrol_sector20',
					'rei_chapter2_medium_patrol_sector19',
					'rei_trade_l',
					'rei_trade_m',
					'rei_patrol_sector19_baseship',
					'omicron_collector_hydrogen_large',
					'omicron_collector_ions_large',
					'omicron_collector_plasma_large',
					'omicron_miner_ice_large_01',
					'omicron_miner_ice_large_02',
					'omicron_miner_mineral_large_01',
					'omicron_miner_mineral_large_02',
					'omicron_miner_mineral_large_03',
					'omicron_trader_agricultural_large',
					'omicron_trader_energy_large_01',
					'omicron_trader_energy_large_02',
					'omicron_trader_food_large',
					'omicron_trader_hightech_large',
					'omicron_trader_water_large',
					'omicron_trader_pharmaceutical_large',
					'omicron_trader_refined_large',
					'omicron_trader_shiptech_large',
					'omicron_trader_weapontech_large',
					'jss_special_construction_trader',
					'omicron_trader_guest_pmc_large',
					'omicron_trader_guest_canteran_large_01',
					'omicron_trader_guest_canteran_large_02',
					'arg_destroyer_cluster',
					'hev_xl_destroyer_hq',
					'hev_trade_l',
					'hev_plunder_large',
					'hev_plunder',
					'hev_bomber_patrol_cluster',
					'rya_destroyer_sector02',
					'rya_destroyer_sector02_hq'
				]" chance="(not $faction?)*100" />

				<do_if value="$faction?">
					<create_list name="$temp_jobIDs" chance="( not $temp_jobIDs? )*100"/>
					<find_ship name="$tmpShips" multiple="true" class="[class.ship]" space="player.galaxy" owner="$faction"/>

					<do_all exact="$tmpShips.count" counter="$x" >
						<do_if value="$tmpShips.{$x}.ismasstraffic">
							<continue />
						</do_if>
						<do_elseif value="$tmpShips.{$x}.trueowner == $faction" negate="true">
							<continue />
						</do_elseif>
						<do_elseif value="$tmpShips.{$x}.ismission">
							<continue />
						</do_elseif>
						<do_elseif value="$tmpShips.{$x}.isclass.drone">
							<continue />
						</do_elseif>
						<do_elseif value="$tmpShips.{$x}.isjobship and $tmpShips.{$x}.job">
							<do_if value="$temp_jobIDs.indexof.{$tmpShips.{$x}.job} == 0">
								<append_to_list name="$temp_jobIDs" exact="$tmpShips.{$x}.job"/>
							</do_if>
						</do_elseif>
					</do_all>
				</do_if>
<set_value name="$text_t" exact="''"/>
<set_value name="$text_t" exact="'\nProcess JOBS: [%1]\n'.[$faction.id]" operation="add" chance="($faction?)*100"/>
				<do_if value="$temp_jobIDs.count">
					<set_value name="$testJobId" exact="null" />
					<do_all exact="$temp_jobIDs.count" counter="$x" >
							<!--replace string="'medium'" with="'match'" /-->
						<substitute_text text="$testJobId" source="$temp_jobIDs.{$x}" chance="($faction?)*100">
							<replace string="'escort'" with="'match'" />
						</substitute_text>
						<do_if value="$testJobId != $temp_jobIDs.{$x}" chance="(not $all? and $faction?)*100">
<set_value name="$text_t" exact="'*%1 excludet\n'.[$temp_jobIDs.{$x}]" operation="add"  chance="($faction?)*100"/>
						</do_if>
						<do_else>
<set_value name="$text_t" exact="'*%1 \n'.[$temp_jobIDs.{$x}]" operation="add"  chance="($faction?)*100"/>
							<set_job_active job="$temp_jobIDs.{$x}" activate="false" />
						</do_else>
					</do_all>
<set_value name="$text_t" exact="'%1 Jobs disabled'.[$temp_jobIDs.count]" operation="add"  chance="(not $faction?)*100"/>
				</do_if>
<debug_text text="$text_t" filter="error" chance="($text_t != '')*100" />
<remove_value name="$text_t"/>
				<remove_value name="$testJobId"/>
				<remove_value name="$temp_jobIDs"/>
				<remove_value name="$faction"/>
				<remove_value name="$all"/>
			</actions>
		</library>
				<!--
					'albion_collector_hydrogen_medium',
					'albion_collector_ions_medium',
					'albion_collector_plasma_medium',
					'albion_miner_ice_medium',
					'albion_miner_mineral_medium',
					'albion_trader_gas_medium',
					'albion_trader_mineral_medium',
					'albion_trader_agricultural_medium',
					'albion_trader_drones_medium_01',
					'albion_trader_drones_medium_02',
					'albion_trader_energy_medium_01',
					'albion_trader_energy_medium_02',
					'albion_trader_energy_medium_03',
					'albion_trader_food_medium',
					'albion_trader_hightech_medium_01',
					'albion_trader_hightech_medium_02',
					'albion_trader_water_medium',
					'albion_trader_missile_medium',
					'albion_trader_missile_medium_02',
					'albion_trader_turret_medium',
					'albion_trader_turret_medium_02',
					'albion_trader_pharmaceutical_medium',
					'albion_trader_refined_medium_01',
					'albion_trader_refined_medium_02',
					'albion_trader_shiptech_medium_01',
					'albion_trader_shiptech_medium_02',
					'albion_trader_shiptech_extended_medium_01',
					'albion_trader_shiptech_extended_medium_02',
					'albion_trader_weapontech_medium_01',
					'albion_trader_weapontech_medium_02',
					'sov_trade_m',
					'devries_miner_ice_medium',
					'omicron_collector_hydrogen_medium',
					'omicron_collector_ions_medium',
					'omicron_collector_plasma_medium',
					'omicron_miner_ice_medium_01',
					'omicron_miner_ice_medium_02',
					'omicron_miner_mineral_medium',
					'omicron_trader_minerals_medium',
					'omicron_trader_agricultural_medium',
					'omicron_trader_drones_medium_01',
					'omicron_trader_drones_medium_02',
					'omicron_trader_energy_medium_01',
					'omicron_trader_energy_medium_02',
					'omicron_trader_food_medium',
					'omicron_trader_hightech_medium',
					'omicron_trader_water_medium',
					'omicron_trader_missile_medium',
					'omicron_trader_missile_medium_02',
					'omicron_trader_turret_medium',
					'omicron_trader_turret_medium_02',
					'omicron_trader_pharmaceutical_medium',
					'omicron_trader_refined_medium',
					'omicron_trader_shiptech_medium',
					'omicron_trader_shiptech_extended_medium',
					'omicron_trader_weapontech_medium',
					'arg_fighter_patrol_cluster',
					'hev_fighter_patrol_cluster',
					'hev_fighter_heavy_raid_leader',
					'hev_trade_m',
					'rya_fighter_patrol_cluster',
					'rya_fighter_patrol_sector02',
				-->
				<!--
					'xen_fighter_patrol_cluster',
					'xen_fighter_patrol_sector03',
					'xen_destroyer_cluster',
					'xen_destroyer_sector03',
					'xen_destroyer_sector03_hq',
					'xen_destroyer_xl_sector03',
					'xen_destroyer_xl_sector03_hq',
					'xen_destroyer_albion',
					'xen_fighter_patrol_albion'

					'pmc_trader_medium_escort',
					'hoa_trader_medium_escort',
					'albion_trader_medium_escort',
					'hoa_fighter_recon_escort',
					'hoa_fighter_patrol_escort',
					'hoa_carrier_escort',
					'hoa_patrol_l_escort',
					'pmc_patrol_l_escort',
					'hoa_trader_l_escort',
					'pmc_trader_l_escort',
					'pmc_carrier_escort',
					'pmc_fighter_patrol_escort',
					'pmc_destroyer_escort',
					'sos_fighter_patrol_escort',
					'sov_fighter_patrol_escort_diff_01',
					'sov_fighter_patrol_escort_diff_02_in',
					'sos_fighter_heavy_raid_escort',
					'sos_fighter_heavy_raid_escort_reduced',
					'sos_fighter_plunder_escort',
					'sov_l_plunder_escort',
					'sos_bomber_patrol_escort',
					'sov_bomber_patrol_escort_diff_01',
					'sov_bomber_patrol_escort_diff_02_in',
					'can_patrol_l_escort',
					'can_trader_l_escort',
					'can_chapter2_medium_trader_escort',
					'hoa_chapter2_light_patrol_escort',
					'pmc_chapter2_medium_patrol_escort',
					'can_chapter2_light_patrol_escort',
					'rei_l_baseship_escort_diff_01',
					'rei_l_baseship_escort_escort_diff_02',
					'rei_chapter2_light_patrol_escort',
					'rei_chapter2_medium_patrol_escort',
					'rei_chapter2_light_patrol_escort_diff_01',
					'rei_chapter2_medium_patrol_escort_diff_01',

					'rei_chapter2_light_patrol_escort_diff_02',
					'rei_chapter2_medium_patrol_escort_diff_02',
					'arg_patrol_l_escort',
					'arg_trader_l_escort',
					'arg_trader_medium_escort',
					'arg_fighter_patrol_escort',
					'arg_destroyer_escort',
					'hev_fighter_patrol_escort',
					'hev_fighter_patrol_escort_diff_01',
					'hev_fighter_heavy_raid_escort',
					'hev_fighter_heavy_raid_escort_reduced',
					'hev_fighter_patrol_escort_diff_02_in',
					'hev_xl_plunder_escort',
					'hev_fighter_plunder_escort',
					'hev_bomber_patrol_escort',
					'hev_bomber_patrol_escort_diff_01',
					'hev_bomber_patrol_escort_diff_02_in',
					'rya_fighter_patrol_escort',
					'rya_fighter_patrol_escort_diff_01',
					'rya_fighter_patrol_escort_diff_02',
					'rya_fighter_patrol_escort_diff_02_in',
					'xen_fighter_patrol_escort',
					'xen_fighter_patrol_escort_diff_01',
					'xen_fighter_patrol_escort_diff_02',
					'xen_fighter_patrol_escort_diff_02_in',
					'xen_l_escort',
					'xen_destroyer_escort',
					'xen_fighter_patrol_cluster_diff_01',
					'xen_fighter_patrol_cluster_diff_02',
					'xen_destroyer_cluster_diff_01',
					'xen_destroyer_cluster_diff_02',
					'xen_destroyer_albion_diff_01',
					'xen_destroyer_albion_diff_02',
					'xen_fighter_patrol_albion_diff_01',
					'xen_fighter_patrol_albion_diff_02',
				-->
				<!--
					'masstraffic_albion_cluster_civilian',
					'masstraffic_albion_sector04_civilian',
					'masstraffic_albion_sector04_smuggler',
					'masstraffic_albion_sector04_criminal',
					'masstraffic_albion_sector04_police_pmc',
					'masstraffic_albion_sector04_police_hoa',
					'masstraffic_albion_sector05_civilian',
					'masstraffic_albion_sector05_smuggler',
					'masstraffic_albion_sector05_criminal',
					'masstraffic_albion_sector05_police_pmc',
					'masstraffic_albion_sector05_police_hoa',
					'masstraffic_albion_sector06_civilian',
					'masstraffic_albion_sector06_smuggler',
					'masstraffic_albion_sector06_criminal',
					'masstraffic_albion_sector06_police_pmc',
					'masstraffic_albion_sector06_police_hoa',
					'masstraffic_albion_sector07_civilian',
					'masstraffic_albion_sector07_smuggler',
					'masstraffic_albion_sector07_criminal',
					'masstraffic_albion_sector07_police_pmc',
					'masstraffic_albion_sector07_police_hoa',
					'masstraffic_albion_big_shipyard',
					'masstraffic_albion_cattle_ranch',
					'masstraffic_albion_cell_refinery',
					'masstraffic_albion_constructionmaterial_production',
					'masstraffic_albion_crystal_refinement',
					'masstraffic_albion_drone_complex',
					'masstraffic_albion_drone_factory',
					'masstraffic_albion_farm_complex',
					'masstraffic_albion_food_production_complex',
					'masstraffic_albion_food_production_plant',
					'masstraffic_albion_fuel_station',
					'masstraffic_albion_high_energy_construction',
					'masstraffic_albion_high_tech_construction',
					'masstraffic_albion_laboratory',
					'masstraffic_albion_medical_supplies',
					'masstraffic_albion_metal_works',
					'masstraffic_albion_small_ships_complex',
					'masstraffic_albion_small_ships_yard',
					'masstraffic_albion_solar_power_plant',
					'masstraffic_albion_spice_farm',
					'masstraffic_albion_tech_complex',
					'masstraffic_albion_water_distillery',
					'masstraffic_albion_weaponry_complex',
					'masstraffic_albion_weaponry_production',
					'masstraffic_albion_wheat_farm',
					'masstraffic_albion_pmc_north',
					'masstraffic_devries_cluster_civilian',
					'masstraffic_devries_sector18_civilian',
					'masstraffic_devries_sector18_smuggler',
					'masstraffic_devries_sector18_criminal',
					'masstraffic_devries_sector18_police',
					'masstraffic_devries_shipyard',
					'masstraffic_devries_solar_power_plant',
					'masstraffic_devries_water_distillery',
					'masstraffic_devries_wheat_farm',
					'masstraffic_devries_spp_xl',
					'masstraffic_omicron_cluster_civilian',
					'masstraffic_omicron_sector08_civilian',
					'masstraffic_omicron_sector08_smuggler',
					'masstraffic_omicron_sector08_criminal',
					'masstraffic_omicron_sector08_police',
					'masstraffic_omicron_sector09_civilian',
					'masstraffic_omicron_sector09_smuggler',
					'masstraffic_omicron_sector09_criminal',
					'masstraffic_omicron_sector09_police',
					'masstraffic_omicron_sector10_civilian',
					'masstraffic_omicron_sector10_smuggler',
					'masstraffic_omicron_sector10_criminal',
					'masstraffic_omicron_sector10_police',
					'masstraffic_omicron_sector11_civilian',
					'masstraffic_omicron_sector11_smuggler',
					'masstraffic_omicron_sector11_criminal',
					'masstraffic_omicron_sector11_police',
					'masstraffic_omicron_bofu_plant',
					'masstraffic_omicron_cell_refinery',
					'masstraffic_omicron_constructionmaterial_production',
					'masstraffic_omicron_crystal_refinement',
					'masstraffic_omicron_drone_complex',
					'masstraffic_omicron_drone_factory',
					'masstraffic_omicron_farm_complex',
					'masstraffic_omicron_high_energy_construction',
					'masstraffic_omicron_high_tech_construction',
					'masstraffic_omicron_laboratory',
					'masstraffic_omicron_medical_supplies',
					'masstraffic_omicron_metal_works',
					'masstraffic_omicron_plankton_tank',
					'masstraffic_omicron_shipyard',
					'masstraffic_omicron_small_ships_complex',
					'masstraffic_omicron_small_ships_yard',
					'masstraffic_omicron_solar_power_plant',
					'masstraffic_omicron_soy_farm',
					'masstraffic_omicron_spacefuel_production',
					'masstraffic_omicron_spice_farm',
					'masstraffic_omicron_tech_complex',
					'masstraffic_omicron_weaponry_complex',
					'masstraffic_omicron_weaponry_production',
					'masstraffic_omicron_water_distillery',
					'masstraffic_omicron_orbital_l',
					'masstraffic_maelstrom_cluster_civilian',
					'masstraffic_maelstrom_megafarmlands',
					'masstraffic_maelstrom_split_lostcolony_macro',
					'masstraffic_maelstrom_xenon_water_l',
					'masstraffic_maelstrom_xenon_water_m',
					'masstraffic_maelstrom_xenon_water_xl',
					'masstraffic_maelstrom_xenon_water'
				-->


		<!-- 
		<set_value name="$CEO" exact="global.$x_CEO" comment="optional"/>
		<set_value name="$BuildZone" exact="$zone" />
		<set_value name="$faction" exact="faction.player" />
		<set_value name="$position" exact="position.[0,0,0]" comment="optional"/>
		<set_value name="$BuildLocation" exact="$BuildZone.freebuildlocations.{1}" comment="optional, or 'random'"/>
		<set_value name="$Macro" exact="macro.props_gates_jumpbeacon_macro" />
		<set_value name="$noInit" comment="optional"/>
		<include_actions ref="md.MM_Corps__Data.MMCData_create_station" />
		-->
		<library name="MMCData_create_station">
			<actions>
				<do_if value="$faction and typeof $faction == datatype.faction">
					<do_if value="$BuildLocation" exact="'random'">
						<set_value name="$temp_zone" exact="$BuildZone"/>
						<include_actions ref="md.MM_Corps__Data.MMCData_do_validfreebuildspots" />
						<do_if value="$temp_buildspots.count">
							<set_value name="$BuildLocation" exact="$temp_buildspots.random"/>
						</do_if>
						<do_else>
							<remove_value name="$BuildLocation"/>
						</do_else>
						<remove_value name="$temp_buildspots"/>
					</do_if>
	
					<do_if value="not ($BuildLocation? and $BuildLocation) and (not $position? or  $position == 'auto')">
						<get_safe_pos result="$position" x="0" y="5km" z="0" radius="14km" zone="$BuildZone"/>
					</do_if>
	
					<do_if value="$BuildLocation? and $BuildLocation">
						<create_station name="$Object" macro="$Macro" owner="$faction" buildlocation="$BuildLocation" zone="$BuildLocation.component" >
							<!-- just use the max possible for any station: -->
							<position value="$BuildLocation.offset"/>
							<rotation value="$BuildLocation.rotation"/>
							<buildsequence sequence="'a'" stage="1"/>
							<buildsequence sequence="'a'" stage="2"/>
							<buildsequence sequence="'a'" stage="3"/>
							<buildsequence sequence="'a'" stage="4"/>
							<buildsequence sequence="'a'" stage="5"/>
							<buildsequence sequence="'a'" stage="6"/>
							<buildsequence sequence="'a'" stage="7"/>
							<buildsequence sequence="'a'" stage="8"/>
							<buildsequence sequence="'a'" stage="9"/>
							<buildsequence sequence="'b'" stage="1"/>
							<buildsequence sequence="'b'" stage="2"/>
							<buildsequence sequence="'b'" stage="3"/>
							<buildsequence sequence="'b'" stage="4"/>
							<buildsequence sequence="'b'" stage="5"/>
							<buildsequence sequence="'b'" stage="6"/>
							<buildsequence sequence="'b'" stage="7"/>
							<buildsequence sequence="'b'" stage="8"/>
							<buildsequence sequence="'b'" stage="9"/>
							<buildsequence sequence="'c'" stage="1"/>
							<buildsequence sequence="'c'" stage="2"/>
							<buildsequence sequence="'c'" stage="3"/>
							<buildsequence sequence="'c'" stage="4"/>
							<buildsequence sequence="'c'" stage="5"/>
							<buildsequence sequence="'c'" stage="6"/>
							<buildsequence sequence="'c'" stage="7"/>
							<buildsequence sequence="'c'" stage="8"/>
							<buildsequence sequence="'c'" stage="9"/>
							<buildsequence sequence="'d'" stage="1"/>
							<buildsequence sequence="'d'" stage="2"/>
							<buildsequence sequence="'d'" stage="3"/>
							<buildsequence sequence="'d'" stage="4"/>
							<buildsequence sequence="'d'" stage="5"/>
							<buildsequence sequence="'d'" stage="6"/>
							<buildsequence sequence="'d'" stage="7"/>
							<buildsequence sequence="'d'" stage="8"/>
							<buildsequence sequence="'d'" stage="9"/>
							<buildsequence sequence="'e'" stage="1"/>
							<buildsequence sequence="'e'" stage="2"/>
							<buildsequence sequence="'e'" stage="3"/>
							<buildsequence sequence="'e'" stage="4"/>
							<buildsequence sequence="'e'" stage="5"/>
							<buildsequence sequence="'e'" stage="6"/>
							<buildsequence sequence="'e'" stage="7"/>
							<buildsequence sequence="'e'" stage="8"/>
							<buildsequence sequence="'e'" stage="9"/>
							<buildsequence sequence="'f'" stage="1"/>
							<buildsequence sequence="'f'" stage="2"/>
							<buildsequence sequence="'f'" stage="3"/>
							<buildsequence sequence="'f'" stage="4"/>
							<buildsequence sequence="'f'" stage="5"/>
							<buildsequence sequence="'f'" stage="6"/>
							<buildsequence sequence="'f'" stage="7"/>
							<buildsequence sequence="'f'" stage="8"/>
							<buildsequence sequence="'f'" stage="9"/>
							<buildsequence sequence="'g'" stage="1"/>
							<buildsequence sequence="'g'" stage="2"/>
							<buildsequence sequence="'g'" stage="3"/>
							<buildsequence sequence="'g'" stage="4"/>
							<buildsequence sequence="'g'" stage="5"/>
							<buildsequence sequence="'g'" stage="6"/>
							<buildsequence sequence="'g'" stage="7"/>
							<buildsequence sequence="'g'" stage="8"/>
							<buildsequence sequence="'g'" stage="9"/>
							<buildsequence sequence="'h'" stage="1"/>
							<buildsequence sequence="'h'" stage="2"/>
							<buildsequence sequence="'h'" stage="3"/>
							<buildsequence sequence="'h'" stage="4"/>
							<buildsequence sequence="'h'" stage="5"/>
							<buildsequence sequence="'h'" stage="6"/>
							<buildsequence sequence="'h'" stage="7"/>
							<buildsequence sequence="'h'" stage="8"/>
							<buildsequence sequence="'h'" stage="9"/>
							<buildsequence sequence="'i'" stage="1"/>
							<buildsequence sequence="'i'" stage="2"/>
							<buildsequence sequence="'i'" stage="3"/>
							<buildsequence sequence="'i'" stage="4"/>
							<buildsequence sequence="'i'" stage="5"/>
							<buildsequence sequence="'i'" stage="6"/>
							<buildsequence sequence="'i'" stage="7"/>
							<buildsequence sequence="'i'" stage="8"/>
							<buildsequence sequence="'i'" stage="9"/>
							<buildsequence sequence="'j'" stage="1"/>
							<buildsequence sequence="'j'" stage="2"/>
							<buildsequence sequence="'j'" stage="3"/>
							<buildsequence sequence="'j'" stage="4"/>
							<buildsequence sequence="'j'" stage="5"/>
							<buildsequence sequence="'j'" stage="6"/>
							<buildsequence sequence="'j'" stage="7"/>
							<buildsequence sequence="'j'" stage="8"/>
							<buildsequence sequence="'j'" stage="9"/>
							<buildsequence sequence="'k'" stage="1"/>
							<buildsequence sequence="'k'" stage="2"/>
							<buildsequence sequence="'k'" stage="3"/>
							<buildsequence sequence="'k'" stage="4"/>
							<buildsequence sequence="'k'" stage="5"/>
							<buildsequence sequence="'k'" stage="6"/>
							<buildsequence sequence="'k'" stage="7"/>
							<buildsequence sequence="'k'" stage="8"/>
							<buildsequence sequence="'k'" stage="9"/>
						</create_station>
					</do_if>
					<do_elseif value="$selectedMacro == macro.props_gates_jumpbeacon_macro">
						<create_object name="$Object" macro="macro.props_gates_jumpbeacon_macro" zone="$BuildZone">
							<position value="$position" />
						</create_object>
						<set_object_min_hull object="$Object" exact="5"/>
					</do_elseif>
					<do_else>
						<create_station name="$Object" macro="$Macro" zone="$BuildZone" owner="$faction" >
	
							<position value="$position" />
							<!-- just use the max possible for any station: -->
							<buildsequence sequence="'a'" stage="1"/>
							<buildsequence sequence="'a'" stage="2"/>
							<buildsequence sequence="'a'" stage="3"/>
							<buildsequence sequence="'a'" stage="4"/>
							<buildsequence sequence="'a'" stage="5"/>
							<buildsequence sequence="'a'" stage="6"/>
							<buildsequence sequence="'a'" stage="7"/>
							<buildsequence sequence="'a'" stage="8"/>
							<buildsequence sequence="'a'" stage="9"/>
							<buildsequence sequence="'b'" stage="1"/>
							<buildsequence sequence="'b'" stage="2"/>
							<buildsequence sequence="'b'" stage="3"/>
							<buildsequence sequence="'b'" stage="4"/>
							<buildsequence sequence="'b'" stage="5"/>
							<buildsequence sequence="'b'" stage="6"/>
							<buildsequence sequence="'b'" stage="7"/>
							<buildsequence sequence="'b'" stage="8"/>
							<buildsequence sequence="'b'" stage="9"/>
							<buildsequence sequence="'c'" stage="1"/>
							<buildsequence sequence="'c'" stage="2"/>
							<buildsequence sequence="'c'" stage="3"/>
							<buildsequence sequence="'c'" stage="4"/>
							<buildsequence sequence="'c'" stage="5"/>
							<buildsequence sequence="'c'" stage="6"/>
							<buildsequence sequence="'c'" stage="7"/>
							<buildsequence sequence="'c'" stage="8"/>
							<buildsequence sequence="'c'" stage="9"/>
							<buildsequence sequence="'d'" stage="1"/>
							<buildsequence sequence="'d'" stage="2"/>
							<buildsequence sequence="'d'" stage="3"/>
							<buildsequence sequence="'d'" stage="4"/>
							<buildsequence sequence="'d'" stage="5"/>
							<buildsequence sequence="'d'" stage="6"/>
							<buildsequence sequence="'d'" stage="7"/>
							<buildsequence sequence="'d'" stage="8"/>
							<buildsequence sequence="'d'" stage="9"/>
							<buildsequence sequence="'e'" stage="1"/>
							<buildsequence sequence="'e'" stage="2"/>
							<buildsequence sequence="'e'" stage="3"/>
							<buildsequence sequence="'e'" stage="4"/>
							<buildsequence sequence="'e'" stage="5"/>
							<buildsequence sequence="'e'" stage="6"/>
							<buildsequence sequence="'e'" stage="7"/>
							<buildsequence sequence="'e'" stage="8"/>
							<buildsequence sequence="'e'" stage="9"/>
							<buildsequence sequence="'f'" stage="1"/>
							<buildsequence sequence="'f'" stage="2"/>
							<buildsequence sequence="'f'" stage="3"/>
							<buildsequence sequence="'f'" stage="4"/>
							<buildsequence sequence="'f'" stage="5"/>
							<buildsequence sequence="'f'" stage="6"/>
							<buildsequence sequence="'f'" stage="7"/>
							<buildsequence sequence="'f'" stage="8"/>
							<buildsequence sequence="'f'" stage="9"/>
							<buildsequence sequence="'g'" stage="1"/>
							<buildsequence sequence="'g'" stage="2"/>
							<buildsequence sequence="'g'" stage="3"/>
							<buildsequence sequence="'g'" stage="4"/>
							<buildsequence sequence="'g'" stage="5"/>
							<buildsequence sequence="'g'" stage="6"/>
							<buildsequence sequence="'g'" stage="7"/>
							<buildsequence sequence="'g'" stage="8"/>
							<buildsequence sequence="'g'" stage="9"/>
							<buildsequence sequence="'h'" stage="1"/>
							<buildsequence sequence="'h'" stage="2"/>
							<buildsequence sequence="'h'" stage="3"/>
							<buildsequence sequence="'h'" stage="4"/>
							<buildsequence sequence="'h'" stage="5"/>
							<buildsequence sequence="'h'" stage="6"/>
							<buildsequence sequence="'h'" stage="7"/>
							<buildsequence sequence="'h'" stage="8"/>
							<buildsequence sequence="'h'" stage="9"/>
							<buildsequence sequence="'i'" stage="1"/>
							<buildsequence sequence="'i'" stage="2"/>
							<buildsequence sequence="'i'" stage="3"/>
							<buildsequence sequence="'i'" stage="4"/>
							<buildsequence sequence="'i'" stage="5"/>
							<buildsequence sequence="'i'" stage="6"/>
							<buildsequence sequence="'i'" stage="7"/>
							<buildsequence sequence="'i'" stage="8"/>
							<buildsequence sequence="'i'" stage="9"/>
							<buildsequence sequence="'j'" stage="1"/>
							<buildsequence sequence="'j'" stage="2"/>
							<buildsequence sequence="'j'" stage="3"/>
							<buildsequence sequence="'j'" stage="4"/>
							<buildsequence sequence="'j'" stage="5"/>
							<buildsequence sequence="'j'" stage="6"/>
							<buildsequence sequence="'j'" stage="7"/>
							<buildsequence sequence="'j'" stage="8"/>
							<buildsequence sequence="'j'" stage="9"/>
							<buildsequence sequence="'k'" stage="1"/>
							<buildsequence sequence="'k'" stage="2"/>
							<buildsequence sequence="'k'" stage="3"/>
							<buildsequence sequence="'k'" stage="4"/>
							<buildsequence sequence="'k'" stage="5"/>
							<buildsequence sequence="'k'" stage="6"/>
							<buildsequence sequence="'k'" stage="7"/>
							<buildsequence sequence="'k'" stage="8"/>
							<buildsequence sequence="'k'" stage="9"/>
						</create_station>
					</do_else>
	
					<do_if value="$Object.exists" chance="(not $noInit?)*100">
						<do_if value="$position? and $Object.distanceto.[$Object.zone, $position] gt 100m" chance="0">
							<warp object="$Object" zone="$Object.zone">
								<position value="$position" />
							</warp>
						</do_if>
						<signal_objects object="player.galaxy" param="'reinit station'" param2="$Object"/> <!-- player + NPC init -->
						<do_if value="$Object.cargo.{ware.unknown}.count gt 0">
							<remove_cargo object="$Object" ware="ware.unknown" exact="$Object.cargo.{ware.unknown}.count" />
						</do_if>
						<do_if value="$faction != faction.player and $Object.tradenpc and $CEO? and $CEO">
							<share_actor_account actor="$Object.tradenpc" otherobject="$CEO"/>
						</do_if>
						<do_elseif value="$faction != faction.player and $Object.tradenpc and not $CEO? and global.$factionCEOs? and global.$factionCEOs.{'$' + $faction.id}?">
							<share_actor_account actor="$Object.tradenpc" otherobject="global.$factionCEOs.{'$' + $faction.id}"/>
						</do_elseif>
					</do_if>
	
					<do_if value="$Object.exists and stat.nf_stations_spawned?">
						<set_value name="stat.nf_stations_spawned" operation="add" />
					</do_if>
				</do_if>
				<do_else>
					<debug_text text="'ERROR MMCData_create_station: f:%1  Z:%2  M:%3'.[@$faction.id, @$BuildZone.macro.id, @$Macro.id]" filter="error" chance="100" />
				</do_else>

				<remove_value name="$Object"/>
				<remove_value name="$CEO"/>
				<remove_value name="$position"/>
				<remove_value name="$faction"/>
				<remove_value name="$BuildZone"/>
				<remove_value name="$Macro"/>
				<remove_value name="$BuildLocation"/>
				<remove_value name="$noInit"/>
			</actions>
		</library>

		<!-- 
		<set_value name="$CEO" exact="global.$x_CEO" />
		<set_value name="$Object" exact="$targets.{$i}" />
		<include_actions ref="md.MM_Corps__Data.MMCData_setaccount_station" />
		-->
		<library name="MMCData_setaccount_station">
			<actions>
				<do_if value="$Object.tradenpc">
					<share_actor_account actor="$Object.tradenpc" otherobject="$CEO"/>
				</do_if>

				<find_dock_location container="$Object" name="$ShiptraderDocks" dockpopulationtype="dockpopulationtype.ships" multiple="true" />
				<do_if value="$ShiptraderDocks.count">
					<do_all exact="$ShiptraderDocks.count" counter="$y" >
						<set_value name="$DockHasShipTrader" exact="false" />
						<do_all exact="$ShiptraderDocks.{$y}.actors.count" counter="$z" >
							<do_if value="$ShiptraderDocks.{$y}.actors.{$z}.type == entitytype.shiptrader or $ShiptraderDocks.{$y}.actors.{$z}.type == entitytype.smallshiptrader">
								<set_remote_commable actor="$ShiptraderDocks.{$y}.actors.{$z}" remote="true" />
								<set_value name="$DockHasShipTrader" exact="true" />
								<share_actor_account actor="$ShiptraderDocks.{$y}.actors.{$z}" otherobject="$CEO"/>
							</do_if>
						</do_all>
						<do_if value="$DockHasShipTrader" negate="true">
							<!-- shiptrader / smallshiptrader -->
							<find_object_component name="$buildmodule" object="$Object" class="class.buildmodule" checkoperational="false">
								<match_buildsource sequence="$ShiptraderDocks.{$y}.component.sequence" stage="$ShiptraderDocks.{$y}.component.stage" />
							</find_object_component>
							<do_if value="$buildmodule">
								<create_platform_actor name="$Shiptrader" dockingbay="$ShiptraderDocks.{$y}.component" type="entitytype.shiptrader">
									<select race="race.argon" tags="tag.shiptrader"/>
									<owner exact="$faction"/>
								</create_platform_actor>
							</do_if>
							<do_else>
								<create_platform_actor name="$Shiptrader" dockingbay="$ShiptraderDocks.{$y}.component" type="entitytype.smallshiptrader">
									<select race="race.argon" tags="tag.smallshiptrader"/>
									<owner exact="$faction"/>
								</create_platform_actor>
							</do_else>
							<set_remote_commable actor="$Shiptrader" remote="true" />
							<share_actor_account actor="$Shiptrader" otherobject="$CEO"/>
							<set_comm_handler actor="$Shiptrader" customhandler="true" />
							<remove_value name="$Shiptrader"/>
						</do_if>
						<remove_value name="$buildmodule"/>
						<remove_value name="$DockHasShipTrader"/>
					</do_all>
				</do_if>
				<remove_value name="$ShiptraderDocks"/>
			</actions>
		</library>

		<!-- 
		<set_value name="$plunder" exact="true" comment="optional"/>
		<set_value name="$faction" exact="faction.player" comment="optional"/>
		<set_value name="$mining_basketoverride" exact="[]" comment="optional"/>
		<set_value name="$trade_warebasket" exact="[]" comment="optional"/>
		<set_value name="$Object" exact="event.param2.{1}" />
		<set_value name="$ShipYard" exact="event.param2.{2}" comment="optional"/>
		<set_value name="$overrideStation" exact="$newCommander" comment="optional"/>
		<set_value name="$destination" exact="$zone" comment="optional"/>
		<set_value name="$crewOnly" comment="optional"/>
		<include_actions ref="md.MM_Corps__Data.MMCData_activate_ship" />
		<remove_value name="$Object"/>
		-->
		<library name="MMCData_activate_ship">
			<actions>
				<!-- give the ship some fuel so it can jump -->
				<do_if value="$faction?">
					<set_owner object="$Object" faction="$faction" />
				</do_if>
		
				<do_if value="not $crewOnly? and $Object.isclass.[class.ship_l, class.ship_xl]">
					<add_cargo ware="ware.fuelcells" object="$Object" exact="500" result="$fuel" />
					<do_if value="$fuel gt 0" chance="($ShipYard?)*100">
						<remove_cargo ware="ware.fuelcells" object="$ShipYard" exact="$fuel" />
						<set_value name="$price" exact="ware.fuelcells.maxprice * $fuel" operation="add"/>
					</do_if>
					<remove_value name="$fuel"/>
				</do_if>
				<!-- drain some drone units from shipyard -->
				<set_value name="$maxunits" exact="[$Object.units.maxcount, 1000].min" />
				<do_if value="$maxunits gt 0" chance="(not $crewOnly?)*100">
					<create_list name="$dronewares" />
					<do_if value="$ShipYard?">
						<set_value name="$stationcargo" exact="$ShipYard.cargo.list" />
						<do_all exact="$stationcargo.count" counter="$c">
							<set_value name="$ware" exact="$stationcargo.{$c}" />
							<set_value name="$waremacro" exact="$ware.objectmacro" />
							<do_if value="$waremacro">
								<do_if value="$waremacro.isclass.ship_xs">
									<do_if value="$ShipYard.cargo.{$ware}.target gt 0">
										<do_if value="true" chance="(100 * $ShipYard.cargo.{$ware}.count) / $ShipYard.cargo.{$ware}.target">
											<append_to_list name="$dronewares" exact="$ware" />
										</do_if>
									</do_if>
								</do_if>
							</do_if>
						</do_all>
					</do_if>

					<do_if value="$dronewares.count gt 0">
						<!-- we have decided which drone wares we want to drain, now go do it -->
						<set_value name="$limit" exact="(($dronewares.count)f / 2.0f + 0.5f)i" />
						<do_all exact="$limit">
							<set_value name="$amount_limit" exact="$maxunits / $limit" />
							<set_value name="$ware_index" min="1" max="$dronewares.count" />
							<do_if value="$ware_index gt 0">
								<set_value name="$ware" exact="$dronewares.{$ware_index}" />
								<remove_value name="$dronewares.{$ware_index}"/>
								<set_value name="$amount" min="$ShipYard.cargo.{$ware}.count / 3"  max="$ShipYard.cargo.{$ware}.count / 2" />
								<do_if value="$amount gt $amount_limit">
									<set_value name="$amount" exact="$amount_limit" />
								</do_if>
								<do_if value="$amount gt 0">
									<debug_text text="'drain %1 %2 from %3 [%4] in %5 [%6]'.[$amount, $ware, $ShipYard.knownname, $ShipYard, $ShipYard.zone.knownname, $ShipYard.zone]" chance="0" />
									<remove_cargo object="$ShipYard" ware="$ware" exact="$amount" />
									<add_units object="$Object" macro="$ware.objectmacro" exact="$amount" chance="0"/>
									<set_value name="$price" exact="$ware.maxprice * $amount" operation="add"/>
								</do_if>
							</do_if>
						</do_all>
					</do_if>
					<do_if value="$Object.units.maxcount">
						<set_value name="$Unitcapacity" exact="[$Object.units.maxcount, 1000].min" />
						<do_if value="$Object.macro.ismacro.{global.$boardingvessel_cap} or $Object.macro.ismacro.{md.$boardingvessel_small}" chance="if (global.$boardingvessel_cap? and md.$boardingvessel_small?) then 100 else 0">
							<do_if  value="$Unitcapacity ge 3">
								<do_if value="$Object.isclass.[class.ship_xl, class.ship_l]">
									<add_units object="$Object" macro="macro.units_size_xs_transp_empty_macro" exact="1"/>
									<add_units object="$Object" macro="macro.units_size_xs_welder_drone_macro" min="1" max="[$Unitcapacity/6, 10].min"/>
									<set_value name="$Unitcapacity" exact="$Object.units.maxcount - $Object.units.count" />
								</do_if>
		
								<do_if value="$Unitcapacity">
									<do_any>
										<add_units object="$Object" category="unitcategory.marine" mk="3" min="1" max="$Unitcapacity/2" weight="40"/>
										<add_units object="$Object" category="unitcategory.marine" mk="2" min="1" max="$Unitcapacity/2" weight="60"/>
									</do_any>
									<set_value name="$Unitcapacity" exact="$Object.units.maxcount - $Object.units.count" />
								</do_if>
		
								<do_if value="$Unitcapacity">
									<add_units object="$Object" category="unitcategory.marine" mk="1" min="$Unitcapacity/2" max="$Unitcapacity"/>
								</do_if>
							</do_if>
						</do_if>	
						<do_elseif value="$Object.cargo.{ware.ore}.max and $Object.cargo.{ware.plasma}.max and $Object.primarypurpose == objectpurpose.mine">
							<add_units object="$Object" macro="macro.units_size_drone_attackdrone_plasma_mk2_macro" min="$Unitcapacity/6/2" max="$Unitcapacity/6"/>
							<add_units object="$Object" macro="macro.units_size_drone_rubble_collector_mk2_macro" min="3" max="$Unitcapacity/6" chance="if macro.units_size_drone_rubble_collector_mk2_macro.ware? and (not $ShipYard? or $ShipYard? and $ShipYard.cargo.{macro.units_size_drone_rubble_collector_mk2_macro.ware}.count) then 100 else 0"/>
							<add_units object="$Object" macro="macro.units_size_drone_rubble_collector_mk1_macro" min="3" max="$Unitcapacity/6"/>
							<add_units object="$Object" macro="macro.units_size_drone_liquid_collector_mk2_macro" min="3" max="$Unitcapacity/6" chance="if macro.units_size_drone_liquid_collector_mk2_macro.ware? and  (not $ShipYard? or $ShipYard? and $ShipYard.cargo.{macro.units_size_drone_liquid_collector_mk2_macro.ware}.count) then 100 else 0"/>
							<add_units object="$Object" macro="macro.units_size_drone_liquid_collector_mk1_macro" min="3" max="$Unitcapacity/6"/>
							<add_units object="$Object" macro="macro.units_size_xs_transp_empty_macro" min="1" max="$Unitcapacity/6/2"/>
							<add_units object="$Object" macro="macro.units_size_xs_welder_drone_macro" min="1" max="$Unitcapacity/6/2"/>
						</do_elseif>
						<do_elseif value="$Object.cargo.{ware.ore}.max and $Object.primarypurpose == objectpurpose.mine">
							<add_units object="$Object" macro="macro.units_size_drone_attackdrone_plasma_mk2_macro" min="$Unitcapacity/4/2" max="$Unitcapacity/4"/>
							<add_units object="$Object" macro="macro.units_size_drone_rubble_collector_mk2_macro" min="3" max="$Unitcapacity/4" chance="if macro.units_size_drone_rubble_collector_mk2_macro.ware? and  (not $ShipYard? or $ShipYard? and $ShipYard.cargo.{macro.units_size_drone_rubble_collector_mk2_macro.ware}.count) then 100 else 0"/>
							<add_units object="$Object" macro="macro.units_size_drone_rubble_collector_mk1_macro" min="3" max="$Unitcapacity/4"/>
							<add_units object="$Object" macro="macro.units_size_xs_transp_empty_macro" min="1" max="$Unitcapacity/4/2"/>
							<add_units object="$Object" macro="macro.units_size_xs_welder_drone_macro" min="1" max="$Unitcapacity/4/2"/>
						</do_elseif>
						<do_elseif value="$Object.cargo.{ware.plasma}.max and $Object.primarypurpose == objectpurpose.mine">
							<add_units object="$Object" macro="macro.units_size_drone_attackdrone_plasma_mk2_macro" min="$Unitcapacity/4/2" max="$Unitcapacity/4"/>
							<add_units object="$Object" macro="macro.units_size_drone_liquid_collector_mk2_macro" min="3" max="$Unitcapacity/4" chance="if macro.units_size_drone_liquid_collector_mk2_macro.ware? and  (not $ShipYard? or $ShipYard? and $ShipYard.cargo.{macro.units_size_drone_liquid_collector_mk2_macro.ware}.count) then 100 else 0"/>
							<add_units object="$Object" macro="macro.units_size_drone_liquid_collector_mk1_macro" min="3" max="$Unitcapacity/4"/>
							<add_units object="$Object" macro="macro.units_size_xs_transp_empty_macro" min="1" max="$Unitcapacity/4/2"/>
							<add_units object="$Object" macro="macro.units_size_xs_welder_drone_macro" min="1" max="$Unitcapacity/4/2"/>
						</do_elseif>
						<do_elseif value="$Object.primarypurpose == objectpurpose.build">
							<add_units object="$Object" macro="macro.units_size_drone_attackdrone_plasma_mk2_macro" min="$Unitcapacity/4/2" max="$Unitcapacity/4"/>
							<add_units object="$Object" macro="macro.units_size_xs_welder_drone_macro" min="$Unitcapacity/4" max="$Unitcapacity/4"/>
							<add_units object="$Object" macro="macro.units_size_xs_transp_empty_macro" min="$Unitcapacity/4/3" max="$Unitcapacity/4/2"/>
							<add_units object="$Object" macro="macro.units_size_drone_missiledrone_dumbfire_mk2_macro" min="$Unitcapacity/4/3" max="$Unitcapacity/4/2"/>
						</do_elseif>
						<do_elseif value="$Object.cargo.{ware.fusionreactor}.max or $Object.cargo.{ware.water}.max or $Object.cargo.{ware.energycells}.max or $Object.cargo.{ware.ore}.max">								

							<add_units object="$Object" macro="macro.units_size_drone_attackdrone_plasma_mk1_macro" min="5" max="$Unitcapacity/2/3"/>
							<add_units object="$Object" macro="macro.units_size_drone_attackdrone_impulse_mk1_macro" min="5" max="$Unitcapacity/2/3"/>
							<add_units object="$Object" macro="macro.units_size_drone_missiledrone_dumbfire_mk2_macro" min="5" max="$Unitcapacity/2/3"/>
							<add_units object="$Object" macro="macro.units_size_xs_welder_drone_macro" min="3" max="$Unitcapacity/2/2"/>
							<add_units object="$Object" macro="macro.units_size_xs_transp_empty_macro" min="5" max="$Unitcapacity/2/2"/>
						</do_elseif>
						<do_elseif value="$Object.primarypurpose == objectpurpose.fight or (not $Object.cargo.{ware.water}.max and not $Object.cargo.{ware.energycells}.max and not $Object.cargo.{ware.fusionreactor}.max and not $Object.cargo.{ware.ore}.max)">
							<add_units object="$Object" macro="macro.units_size_drone_attackdrone_plasma_mk2_macro" min="$Unitcapacity/7/2" max="$Unitcapacity/7" chance="if macro.units_size_drone_attackdrone_plasma_mk2_macro.ware? and  (not $ShipYard? or $ShipYard? and $ShipYard.cargo.{macro.units_size_drone_attackdrone_plasma_mk2_macro.ware}.count) then 100 else 0"/>
							<add_units object="$Object" macro="macro.units_size_drone_attackdrone_plasma_mk1_macro" min="$Unitcapacity/7/2" max="$Unitcapacity/7"/>
							<add_units object="$Object" macro="macro.units_size_drone_attackdrone_impulse_mk2_macro" min="$Unitcapacity/7/2" max="$Unitcapacity/7" chance="if macro.units_size_drone_attackdrone_impulse_mk2_macro.ware? and  (not $ShipYard? or $ShipYard? and $ShipYard.cargo.{macro.units_size_drone_attackdrone_impulse_mk2_macro.ware}.count) then 100 else 0"/>
							<add_units object="$Object" macro="macro.units_size_drone_attackdrone_impulse_mk1_macro" min="$Unitcapacity/7/2" max="$Unitcapacity/7"/>
							<add_units object="$Object" macro="macro.units_size_drone_missiledrone_dumbfire_mk2_macro" min="$Unitcapacity/7/2" max="$Unitcapacity/7" chance="if macro.units_size_drone_missiledrone_dumbfire_mk2_macro.ware? and  (not $ShipYard? or $ShipYard? and $ShipYard.cargo.{macro.units_size_drone_missiledrone_dumbfire_mk2_macro.ware}.count) then 100 else 0"/>
							<add_units object="$Object" macro="macro.units_size_drone_missiledrone_dumbfire_mk1_macro" min="$Unitcapacity/7/2" max="$Unitcapacity/7"/>		

							<add_units object="$Object" macro="macro.units_size_xs_welder_drone_macro" min="$Unitcapacity/7/2" max="$Unitcapacity/7"/>
							<add_units object="$Object" macro="macro.units_size_xs_transp_empty_macro" min="1" max="1"/>
						</do_elseif>
						<remove_value name="$Unitcapacity" />
					</do_if>

				</do_if>

				<!-- drain some missiles from shipyard -->
				<set_value name="$maxammo" exact="$Object.ammostorage.missile.capacity" />
				<do_if value="$maxammo gt 0" chance="(not $crewOnly?)*100">
					<create_list name="$missilewares" />
					<do_if value="$ShipYard?">
						<set_value name="$stationcargo" exact="$ShipYard.cargo.list" />
						<do_all exact="$stationcargo.count" counter="$c">
							<set_value name="$ware" exact="$stationcargo.{$c}" />
							<set_value name="$waremacro" exact="$ware.objectmacro" />
							<do_if value="$waremacro">
								<do_if value="$waremacro.isclass.missile">
									<do_if value="$ShipYard.cargo.{$ware}.target gt 0">
										<do_if value="true" chance="(100 * $ShipYard.cargo.{$ware}.count) / $ShipYard.cargo.{$ware}.target">
											<append_to_list name="$missilewares" exact="$ware" />
										</do_if>
									</do_if>
								</do_if>
							</do_if>
						</do_all>
					</do_if>

					<do_if value="$missilewares.count gt 0">
						<!-- we have decided which missile wares we want to drain, now go do it -->
						<set_value name="$limit" exact="(($missilewares.count)f / 2.0f + 0.5f)i" />
						<do_all exact="$limit">
							<set_value name="$amount_limit" exact="$maxammo / $limit" />
							<set_value name="$ware_index" min="1" max="$missilewares.count" />
							<do_if value="$ware_index gt 0">
								<set_value name="$ware" exact="$missilewares.{$ware_index}" />
								<remove_value name="$missilewares.{$ware_index}"/>
								<set_value name="$amount" min="$ShipYard.cargo.{$ware}.count / 3"  max="$ShipYard.cargo.{$ware}.count / 2" />
								<do_if value="$amount gt $amount_limit">
									<set_value name="$amount" exact="$amount_limit" />
								</do_if>
								<do_if value="$amount gt 0">
									<debug_text text="'drain %1 %2 from %3 [%4] in %5 [%6]'.[$amount, $ware, $ShipYard.knownname, $ShipYard, $ShipYard.zone.knownname, $ShipYard.zone]" chance="0" />
									<remove_cargo object="$ShipYard" ware="$ware" exact="$amount" />
									<add_ammo object="$Object" macro="$ware.objectmacro" amount="$amount" />
									<set_value name="$price" exact="$ware.maxprice * $amount" operation="add"/>
								</do_if>
							</do_if>
						</do_all>
					</do_if>
				</do_if>

				<!-- create pilot, assign to ship, set script to 'move and die' -->
				<create_ai_unit object="$Object" />
				<set_value name="$race" exact="if $faction? and ['xenon','khaak'].indexof.{$faction.id} then race.{$faction.id} else if ['xenon','khaak'].indexof.{$Object.owner.id} then race.{$Object.owner.id} else [race.argon, race.split, race.terran, race.teladi].random" />
				<do_if value="$Object.isclass.[class.ship_l, class.ship_xl]">
					<find_dock_location name="$tempDock"  container="$Object" size="tag.dock_p" />
					<do_if value="$tempDock">
						<set_value name="$temp_dock" exact="$tempDock" />
						<set_value name="$temp_select" exact="[null, $race, tag.commander, null, null]" />
						<set_value name="$temp_object" exact="$Object" />
						<set_value name="$temp_entitytype" exact="entitytype.commander" />
						<set_value name="$temp_Skill" exact="true" chance="if $Object.primarypurpose == objectpurpose.fight then 75 else 33"/>
						<set_value name="$temp_Skill" exact="false" chance="if not $temp_Skill? then 66 else 0"/>
						<set_value name="$temp_assign" exact="'pilot'"/>
						<include_actions ref="md.NF_BASE.NF_create_actor" />
						<set_value name="$pilot" exact="$newActor" />
						<remove_value name="$newActor"/>
					</do_if>
					<do_else>
						<create_pilot name="$pilot" ship="$Object">
							<select race="$race" tags="tag.commander"/>
							<owner exact="if $faction? then $faction else $Object.owner"/>
						</create_pilot>
					</do_else>
				</do_if>
				<do_else>
					<create_pilot name="$pilot" ship="$Object">
						<select race="$race" tags="tag.pilot"/>
						<owner exact="if $faction? then $faction else $Object.owner"/>
					</create_pilot>
				</do_else>
				<do_if value="$pilot.exists and $ShipYard?">
					<find_sector name="$sectors" space="$ShipYard.cluster" multiple="true" />
					<set_value name="$Station" exact="if $overrideStation? then $overrideStation else $ShipYard" />
					<do_if value="$_CEO.$isService?">
						<set_value name="$param" exact="[]"/>
						<set_value name="$destination" exact="$sectors.random" chance="if $destination? and $destination.exists then 0 else 100"/>
						<set_value name="$script" exact="'move.idle'"/>
						<include_actions ref="md.MM_Corps__Data.MMCData_ship_job_tmp" />
						<include_actions ref="md.MM_Corps__Data.MMCData_ship_job_runscript" />
					</do_if>
					<do_else>
						<include_actions ref="md.MM_Corps__Data.MMCData_ship_job" />
					</do_else>
				</do_if>
				<do_elseif value="not $ShipYard?">
					<!-- no job -->
				</do_elseif>
				<do_else>
					<debug_text text="'creating pilot for newly built ship %1(%2) at %3(%4) failed!'.[$Object.macro.id, $Object, $ShipYard.knownname, $ShipYard.zone.knownname]" filter="error" />
				</do_else>

				<do_if value="$Object.isclass.[class.ship_l, class.ship_xl]">
					<find_dock_location name="$tempDock"  container="$Object" size="tag.dock_p" chance="if not $tempDock? then 100 else 0" />
					<set_value name="$race" exact="if $faction? and ['xenon','khaak'].indexof.{$faction.id} then race.{$faction.id} else if ['xenon','khaak'].indexof.{$Object.owner.id} then race.{$Object.owner.id} else [race.argon, race.split, race.terran, race.teladi].random" />
					<do_if value="$tempDock">
						<set_value name="$temp_dock" exact="$tempDock" />
						<set_value name="$temp_select" exact="[null, $race, tag.engineer, null, null]" />
						<set_value name="$temp_object" exact="$Object" />
						<set_value name="$temp_entitytype" exact="entitytype.engineer" />
						<set_value name="$temp_Skill" exact="true" chance="if $Object.primarypurpose == objectpurpose.fight then 90 else 50" />
						<set_value name="$temp_Skill" exact="false" chance="if not $temp_Skill? then 66 else 0"/>
						<set_value name="$temp_assign" exact="'engineer'"/>
						<include_actions ref="md.NF_BASE.NF_create_actor" />
						<remove_value name="$newActor"/>
					</do_if>
					<do_else>
						<create_engineer name="$engineer" ship="$Object">
							<select race="$race" tags="tag.engineer"/>
							<owner exact="if $faction? then $faction else $Object.owner"/>
						</create_engineer>
						<do_if value="$engineer.exists">
							<start_script object="$engineer" name="if global.$nfconfig.$Check? then 'engineer.ai.plus2' else 'engineer.ai'"/>
						</do_if>
					</do_else>

					<set_value name="$race" exact="if $faction? and ['xenon','khaak'].indexof.{$faction.id} then race.{$faction.id} else if ['xenon','khaak'].indexof.{$Object.owner.id} then race.{$Object.owner.id} else [race.argon, race.split, race.terran, race.teladi].random" />
					<do_if value="$tempDock">
						<set_value name="$temp_dock" exact="$tempDock" />
						<set_value name="$temp_select" exact="[null, $race, tag.defencecontrol, null, null]" />
						<set_value name="$temp_object" exact="$Object" />
						<set_value name="$temp_entitytype" exact="entitytype.defencecontrol" />
						<set_value name="$temp_Skill" exact="if $Object.primarypurpose == objectpurpose.fight then true else false" />
						<set_value name="$temp_assign" exact="'defence'"/>
						<include_actions ref="md.NF_BASE.NF_create_actor" />
						<remove_value name="$newActor"/>
					</do_if>
					<do_else>
						<create_defence_officer name="$defencenpc" ship="$Object">
							<select race="$race" tags="tag.defencecontrol"/>
							<owner exact="if $faction? then $faction else $Object.owner"/>
						</create_defence_officer>
						<do_if value="$defencenpc.exists">
							<start_script object="$defencenpc" name="'fight.defend.capital'"/>
						</do_if>
					</do_else>

					<check_object result="$isbuildership" object="$Object">
						<match_content class="class.buildmodule" min="1"/>
					</check_object>
					<do_if value="$isbuildership">
						<find_dock_location name="$tempDock"  container="$Object" size="tag.dock_p" chance="if not $tempDock? then 100 else 0"/>

						<set_value name="$temp_dock" exact="$tempDock" />
						<set_value name="$temp_select" exact="[null, race.argon, tag.architect, null, null]" />
						<set_value name="$temp_object" exact="$Object" />
						<set_value name="$temp_entitytype" exact="entitytype.architect" />
						<set_value name="$temp_Skill" exact="'max'" />
						<set_value name="$temp_assign" exact="'architect'"/>
						<include_actions ref="md.NF_BASE.NF_create_actor" />
						<remove_value name="$newActor"/>

						<!--signal_cue_instantly cue="md.NPC_Architect.Base" param="[$shiparch, false, true]"/-->
						<set_value name="$Object.pilot.$free4newjob" exact="player.age"/>
					</do_if>
					<remove_value name="$isbuildership"/>
				</do_if>

				<remove_value name="$tempDock"/>
				<remove_value name="$temp_dock"/>
				<remove_value name="$race"/>
				<remove_value name="$amount"/>
				<remove_value name="$missilewares"/>
				<remove_value name="$maxammo"/>
				<remove_value name="$dronewares"/>
				<remove_value name="$maxunits"/>
				<remove_value name="$ware_index"/>
				<remove_value name="$amount_limit"/>
				<remove_value name="$limit"/>
				<remove_value name="$ware"/>
				<remove_value name="$waremacro"/>
				<remove_value name="$stationcargo"/>
				<remove_value name="$pilot"/>
				<remove_value name="$engineer"/>
				<remove_value name="$defencenpc"/>
				<remove_value name="$shiparch"/>
				<remove_value name="$faction"/>
				<remove_value name="$tmpConfig"/>
				<remove_value name="$overrideStation"/>
				<remove_value name="$crewOnly"/>
			</actions>
		</library>

		<!-- 
		<set_value name="$tmp_jobs" exact="[]" comment="optional"/>
		<set_value name="$plunder" exact="true" comment="optional"/>
		<set_value name="$mining_basketoverride" exact="[]" comment="optional"/>
		<set_value name="$trade_warebasket" exact="[]" comment="optional"/>
		<set_value name="$Object" exact="event.param2.{1}" />
		<set_value name="$Station" exact="$ShipYard" comment="optional"/>
		<set_value name="$sectors" exact="[]" />
		<set_value name="$destination" exact="$zone" comment="optional"/>
		<include_actions ref="md.MM_Corps__Data.MMCData_ship_job" />
		-->
		<library name="MMCData_ship_job">
			<actions>
				<set_value name="$pirat" exact="if $plunder? and $plunder then true else false" />
				<do_if value="not ($Station? and $Station.exists) and $Object.commander.exists and ($Object.commander.resources.list.count or $Object.commander.tradewares.list.count)">
					<set_value name="$Station" exact="if $plunder? and $plunder then true else false" />
				</do_if>
				<do_elseif value="$Object.commander.exists and $Object.commander.isclass.ship and @$Station != $Object.commander">
					<remove_object_commander object="$Object" />
				</do_elseif>
				<do_if value="$sectors? and $sectors.count" negate="true">
					<set_value name="$sectors" exact="[$Station.sector]" />
				</do_if>
<set_value name="$text" exact="'Destination ' + @$destination.knownname + ' Jobs:' + $tmp_jobs.count"/>

				<do_if value="$Object.primarypurpose == objectpurpose.build and not $Object.pilot.$traderNow?">
					<do_if value="not $Object.buildmodule.buildanchor.exists">
						<set_value name="$param" exact="[]"/>
						<set_value name="$destination" exact="$sectors.random" chance="if $destination? and $destination.exists then 0 else 100"/>
						<set_value name="$script" exact="'move.idle'"/>
						<include_actions ref="md.MM_Corps__Data.MMCData_ship_job_tmp" />
						<include_actions ref="md.MM_Corps__Data.MMCData_ship_job_runscript" />
					</do_if>
				</do_if>
				<do_elseif value="$Object.dps.all gt 200000 and ($Object.cargo.{ware.fusionreactor}.max or $Object.cargo.{ware.water}.max or $Object.cargo.{ware.energycells}.max or $Object.cargo.{ware.ore}.max)" chance="if not $pirat then 0 else if $Object.primarypurpose == objectpurpose.fight then 30 else 15">
					<create_list name="$warebasket" />
					<do_if value="$trade_warebasket? and $trade_warebasket.count">
						<do_all exact="$trade_warebasket.count" counter="$xj">
							<do_if value="$Object.cargo.{$trade_warebasket.{$xj}}.max gt 0">
								<do_if value="$warebasket.indexof.{$trade_warebasket.{$xj}}" exact="0">
									<append_to_list name="$warebasket" exact="$trade_warebasket.{$xj}" />
								</do_if>
							</do_if>
						</do_all>
					</do_if>
					<do_elseif value="$Station? and $Station.exists">
						<set_value name="$warebasket" exact="$Station.resources.list" />
						<do_all exact="$warebasket.count" counter="$xj" reverse="true">
							<do_if value="$Object.cargo.{$warebasket.{$xj}}.max gt 0" negate="true">
								<remove_value name="$warebasket.{$xj}"/>
							</do_if>
						</do_all>
						<set_value name="$tradewares" exact="$Station.tradewares.list" />
						<do_all exact="$tradewares.count" counter="$xj">
							<do_if value="$Object.cargo.{$tradewares.{$xj}}.max gt 0">
								<do_if value="$warebasket.indexof.{$tradewares.{$xj}}" exact="0">
									<append_to_list name="$warebasket" exact="$tradewares.{$xj}" />
								</do_if>
							</do_if>
						</do_all>
						<remove_value name="$tradewares"/> 
					</do_elseif>
					<do_else>
						<set_value name="$faction" exact="$Object.owner" />
						<include_actions ref="md.MM_Corps__Data.MMCData_tradeware" />
						<do_all exact="$warebasket.count" counter="$xj" reverse="true">
							<do_if value="$Object.cargo.{$warebasket.{$xj}}.max gt 0" negate="true">
								<remove_value name="$warebasket.{$xj}"/>
							</do_if>
						</do_all>
					</do_else>

					<set_value name="$param" exact="[['returntobase', true], ['basebasket', $warebasket]]"/>
					<set_value name="$destination" exact="$sectors.random" chance="if $destination? and $destination.exists then 0 else 100"/>
					<set_value name="$script" exact="'move.plunder'"/>
					<include_actions ref="md.MM_Corps__Data.MMCData_ship_job_tmp" />

					<include_actions ref="md.MM_Corps__Data.MMCData_ship_job_runscript" />
					<remove_value name="$warebasket"/>
				</do_elseif>
				<do_elseif value="($Object.cargo.{ware.ore}.max or $Object.cargo.{ware.plasma}.max) and $Object.primarypurpose == objectpurpose.mine" chance="if $pirat then 50 else 100">
					<create_list name="$basketoverride" />
					<do_if value="$Object.cargo.{ware.ore}.max">
						<append_to_list name="$basketoverride" exact="ware.ice"/>
						<append_to_list name="$basketoverride" exact="ware.ore"/>
						<append_to_list name="$basketoverride" exact="ware.silicon"/>
						<append_to_list name="$basketoverride" exact="ware.nividium" chance="50"/>
						<append_to_list name="$basketoverride" exact="ware.crystals" chance="50"/>
						<!-- fallback new unexpected minerals -->
						<set_value name="$tmp_warebasket" exact="warebasket.minerals.list"/>
						<do_all exact="$tmp_warebasket.count" counter="$xj">
							<do_if value="[ware.ice, ware.ore, ware.silicon, ware.nividium, ware.crystals].indexof.{$tmp_warebasket.{$xj}} == 0">
								<do_if value="$Object.cargo.{$tmp_warebasket.{$xj}}.max gt 0">
									<do_if value="$basketoverride.indexof.{$tmp_warebasket.{$xj}}" exact="0">
										<append_to_list name="$basketoverride" exact="$tmp_warebasket.{$xj}" />
									</do_if>
								</do_if>
							</do_if>
						</do_all>
						<remove_value name="$tmp_warebasket"/>
						<set_value name="$tmp_warebasket" exact="warebasket.xenon_minerals.list"/>
						<do_all exact="$tmp_warebasket.count" counter="$xj">
							<do_if value="[ware.ice, ware.ore, ware.silicon, ware.nividium, ware.crystals].indexof.{$tmp_warebasket.{$xj}} == 0">
								<do_if value="$Object.cargo.{$tmp_warebasket.{$xj}}.max gt 0">
									<do_if value="$basketoverride.indexof.{$tmp_warebasket.{$xj}}" exact="0">
										<append_to_list name="$basketoverride" exact="$tmp_warebasket.{$xj}" />
									</do_if>
								</do_if>
							</do_if>
						</do_all>
						<remove_value name="$tmp_warebasket"/>
					</do_if>
					<do_if value="$Object.cargo.{ware.plasma}.max">
						<append_to_list name="$basketoverride" exact="ware.plasma" chance="50"/>
						<append_to_list name="$basketoverride" exact="ware.ions"/>
						<append_to_list name="$basketoverride" exact="ware.hydrogen" chance="50"/>
						<!-- fallback new unexpected gases -->
						<set_value name="$tmp_warebasket" exact="warebasket.gases.list"/>
						<do_all exact="$tmp_warebasket.count" counter="$xj">
							<do_if value="[ware.plasma, ware.ions, ware.hydrogen].indexof.{$tmp_warebasket.{$xj}} == 0">
								<do_if value="$Object.cargo.{$tmp_warebasket.{$xj}}.max gt 0">
									<do_if value="$basketoverride.indexof.{$tmp_warebasket.{$xj}}" exact="0">
										<append_to_list name="$basketoverride" exact="$tmp_warebasket.{$xj}" />
									</do_if>
								</do_if>
							</do_if>
						</do_all>
						<remove_value name="$tmp_warebasket"/>
					</do_if>
					<do_if value="$mining_basketoverride? and $mining_basketoverride.count">
						<clear_list list="$basketoverride" />
						<do_all exact="$mining_basketoverride.count" counter="$xj">
							<do_if value="$Object.cargo.{$mining_basketoverride.{$xj}}.max gt 0">
								<do_if value="$basketoverride.indexof.{$mining_basketoverride.{$xj}}" exact="0">
									<append_to_list name="$basketoverride" exact="$mining_basketoverride.{$xj}" />
								</do_if>
							</do_if>
						</do_all>
					</do_if>

					<set_value name="$param" exact="[['basketoverride', $basketoverride]]"/>
					<set_value name="$destination" exact="$sectors.random" chance="if $destination? and $destination.exists then 0 else 100"/>
					<set_value name="$script" exact="if $Object.commander and $Object.commander.isclass.station and $Object.commander.resources.list.count then 'mining.ship.station' else 'mining.ship.free'"/>
					<include_actions ref="md.MM_Corps__Data.MMCData_ship_job_tmp" />

					<include_actions ref="md.MM_Corps__Data.MMCData_ship_job_runscript" />
					<remove_value name="$basketoverride"/>
				</do_elseif>
				<do_elseif value="$Object.cargo.{ware.fusionreactor}.max or $Object.cargo.{ware.water}.max or $Object.cargo.{ware.energycells}.max or $Object.cargo.{ware.ore}.max"  chance="if $pirat and $Object.primarypurpose == objectpurpose.fight then 0 else if $Object.primarypurpose != objectpurpose.fight then 100 else 70">
					<create_list name="$warebasket" />
					<do_if value="$trade_warebasket? and $trade_warebasket.count">
						<do_all exact="$trade_warebasket.count" counter="$xj">
							<do_if value="$Object.cargo.{$trade_warebasket.{$xj}}.max gt 0">
								<do_if value="$warebasket.indexof.{$trade_warebasket.{$xj}}" exact="0">
									<append_to_list name="$warebasket" exact="$trade_warebasket.{$xj}" />
								</do_if>
							</do_if>
						</do_all>
					</do_if>
					<do_elseif value="$Station? and $Station.exists">
						<set_value name="$warebasket" exact="$Station.resources.list" />
						<do_all exact="$warebasket.count" counter="$xj" reverse="true">
							<do_if value="$Object.cargo.{$warebasket.{$xj}}.max gt 0" negate="true">
								<remove_value name="$warebasket.{$xj}"/>
							</do_if>
						</do_all>
						<set_value name="$tradewares" exact="$Station.tradewares.list" />
						<do_all exact="$tradewares.count" counter="$xj">
							<do_if value="$Object.cargo.{$tradewares.{$xj}}.max gt 0">
								<do_if value="$warebasket.indexof.{$tradewares.{$xj}}" exact="0">
									<append_to_list name="$warebasket" exact="$tradewares.{$xj}" />
								</do_if>
							</do_if>
						</do_all>
						<remove_value name="$tradewares"/> 
					</do_elseif>
					<do_else>
						<set_value name="$faction" exact="$Object.owner" />
						<include_actions ref="md.MM_Corps__Data.MMCData_tradeware" />
						<do_all exact="$warebasket.count" counter="$xj" reverse="true">
							<do_if value="$Object.cargo.{$warebasket.{$xj}}.max gt 0" negate="true">
								<remove_value name="$warebasket.{$xj}"/>
							</do_if>
						</do_all>
					</do_else>

					<do_if value="$Object.cargo.{ware.fuelcells}.max" chance="if not global.$nfconfig.$plotSafe? then 25 else 0">
						<set_value name="$param" exact="[['warelist', $warebasket], ['minbuy', 0], ['maxbuy', 2], ['minsell', 0], ['maxsell', 2]]"/>
						<set_value name="$destination" exact="$sectors.random" chance="if $destination? and $destination.exists then 0 else 100"/>
						<set_value name="$script" exact="'trade.ship.ranged'"/>
						<include_actions ref="md.MM_Corps__Data.MMCData_ship_job_tmp" />

						<include_actions ref="md.MM_Corps__Data.MMCData_ship_job_runscript" />
					</do_if>
					<do_elseif value="$Object.cargo.{ware.fuelcells}.max">
						<do_if value="$_CEO.$style? and $_CEO.$style == 'cooperative'">
							<set_value name="$param" exact="[['warelist', $warebasket], ['range', 'cluster']]"/>
						</do_if>
						<do_else>
							<set_value name="$param" exact="[['warelist', $warebasket], ['range', 'cluster'], ['simple', true]]"/>
						</do_else>
						<set_value name="$destination" exact="$sectors.random" chance="if $destination? and $destination.exists then 0 else 100"/>
						<set_value name="$script" exact="'trade.ship'"/>
						<include_actions ref="md.MM_Corps__Data.MMCData_ship_job_tmp" />

						<include_actions ref="md.MM_Corps__Data.MMCData_ship_job_runscript" />
					</do_elseif>
					<do_else>
						<set_value name="$param" exact="[['warelist', $warebasket], ['range', 'sector'], ['simple', true]]"/>
						<set_value name="$destination" exact="$sectors.random" chance="if $destination? and $destination.exists then 0 else 100"/>
						<set_value name="$script" exact="'trade.ship'"/>
						<include_actions ref="md.MM_Corps__Data.MMCData_ship_job_tmp" />

						<include_actions ref="md.MM_Corps__Data.MMCData_ship_job_runscript" />
					</do_else>
					<remove_value name="$warebasket"/>
				</do_elseif>
				<do_elseif value="$Object.cargo.{ware.fuelcells}.max" >
					<set_value name="$temp" exact="if $tmp_jobs? then $tmp_jobs.count else false"/>
					<set_value name="$temp_next" exact="true"/>
					<!-- scout -->
					<do_if value="$temp and $temp_next"><!--  chance="if global.$nfconfig.$Check? then 100 else 0"-->
						<set_value name="$temp" exact="$tmp_jobs.count"/>
						<set_value name="$param" exact="[]"/>
						<set_value name="$destination" exact="$sectors.random" chance="if $destination? and $destination.exists then 0 else 100"/>
						<set_value name="$script" exact="'move.voyager'"/>
						<include_actions ref="md.MM_Corps__Data.MMCData_ship_job_tmp" />
						<do_if value="$temp != $tmp_jobs.count">
							<set_value name="$temp_next" exact="false"/>
						</do_if>
					</do_if>
					<!-- patrol -->
					<do_if value="$temp_next">
						<do_if value="$_CEO.$jobFactCluster or $_CEO.$jobFactSector or $_CEO.$jobFactZone" chance="($_CEO.$jobFactCluster?) *100">
							<do_any>
								<set_value name="$param" exact="[['range', 'cluster'], ['allowstations', true]]" weight="$_CEO.$jobFactCluster"/>
								<set_value name="$param" exact="[['range', 'sector'], ['allowstations', true]]" weight="$_CEO.$jobFactSector"/>
								<set_value name="$param" exact="[['range', 'zone'], ['allowstations', true]]" weight="$_CEO.$jobFactZone"/>
							</do_any>
						</do_if>
						<do_elseif value="$pirat">
							<do_any>
								<set_value name="$param" exact="[['range', 'cluster'], ['allowstations', true]]" weight="0"/>
								<set_value name="$param" exact="[['range', 'sector'], ['allowstations', true]]" weight="20"/>
								<set_value name="$param" exact="[['range', 'zone'], ['allowstations', true]]" weight="80"/>
							</do_any>
						</do_elseif>
						<do_else>
							<do_any>
								<set_value name="$param" exact="[['range', 'cluster'], ['allowstations', true]]" weight="15"/>
								<set_value name="$param" exact="[['range', 'sector'], ['allowstations', true]]" weight="35"/>
								<set_value name="$param" exact="[['range', 'zone'], ['allowstations', true]]" weight="50"/>
							</do_any>
						</do_else>
						<!--set_value name="$destination" exact="if $sectors.indexof.{$Object.sector} then $Object.sector else $sectors.random" chance="if $destination? and $destination.exists then 0 else 100"/-->
						<create_list name="$closerSector" />
						<do_if value="$validZonesHotZone? and $validZonesHotZone.count">
							<create_list name="$closerSectorHZ" />
							<do_all exact="$validZonesHotZone.count" counter="$xj" >
								<append_to_list name="$closerSectorHZ" exact="$validZonesHotZone.{$xj}.sector" chance="if $closerSectorHZ.indexof.{$validZonesHotZone.{$xj}.sector} then 100 else 0"/>
							</do_all>
							<do_all exact="$closerSectorHZ.count" counter="$xj" >
								<do_if value="$sectors.indexof.{$closerSectorHZ.{$xj}}">
									<append_to_list name="$closerSector" exact="$closerSectorHZ.{$xj}" />
								</do_if>
							</do_all>
							<remove_value name="$closerSectorHZ"/>
						</do_if>
						<do_all exact="$sectors.count" counter="$xj" reverse="true" chance="if $closerSector.count then 0 else 100">
							<do_if value="$Object.cluster == $sectors.{$xj}.cluster">
								<append_to_list name="$closerSector" exact="$sectors.{$xj}" />
							</do_if>
						</do_all>
						<do_if value="$closerSector.count">
							<set_value name="$destination" exact="if $closerSector.indexof.{$Object.sector} then $Object.sector else $closerSector.random" chance="if $destination? and $destination.exists then 0 else 100"/>
						</do_if>
						<do_else>
							<set_value name="$destination" exact="if $sectors.indexof.{$Object.sector} then $Object.sector else $sectors.random" chance="if $destination? and $destination.exists then 0 else 100"/>
						</do_else>
						<!-- $destination -->
						<set_value name="$script" exact="if global.$nfconfig.$Check? then 'BR.move.patrol' else 'move.patrol'"/>
						<set_value name="$test" exact="false"/>
						<include_actions ref="md.MM_Corps__Data.MMCData_ship_job_tmp" />
						<do_if value="$test" negate="true">
							<remove_value name="$test"/>
							<!-- patrol.route -->
							<set_value name="$temp" exact="$tmp_jobs.count"/>
							<set_value name="$param" exact="[]"/>
							<set_value name="$destination" exact="null"/>
							<set_value name="$script" exact="'move.patrol.route'"/>
							<include_actions ref="md.MM_Corps__Data.MMCData_ship_job_tmp" />
							<do_if value="$temp == $tmp_jobs.count or $param.count == 0 or (@$param.{1}.{1} == 'route' and @$param.{1}.{2}.count == 0)">
								<do_if value="$_CEO.$jobFactCluster or $_CEO.$jobFactSector or $_CEO.$jobFactZone" chance="($_CEO.$jobFactCluster?) *100">
									<do_any>
										<set_value name="$param" exact="[['range', 'cluster'], ['allowstations', true]]" weight="$_CEO.$jobFactCluster"/>
										<set_value name="$param" exact="[['range', 'sector'], ['allowstations', true]]" weight="$_CEO.$jobFactSector"/>
										<set_value name="$param" exact="[['range', 'zone'], ['allowstations', true]]" weight="$_CEO.$jobFactZone"/>
									</do_any>
								</do_if>
								<do_elseif value="$pirat">
									<do_any>
										<set_value name="$param" exact="[['range', 'cluster'], ['allowstations', true]]" weight="0"/>
										<set_value name="$param" exact="[['range', 'sector'], ['allowstations', true]]" weight="20"/>
										<set_value name="$param" exact="[['range', 'zone'], ['allowstations', true]]" weight="80"/>
									</do_any>
								</do_elseif>
								<do_else>
									<do_any>
										<set_value name="$param" exact="[['range', 'cluster'], ['allowstations', true]]" weight="15"/>
										<set_value name="$param" exact="[['range', 'sector'], ['allowstations', true]]" weight="35"/>
										<set_value name="$param" exact="[['range', 'zone'], ['allowstations', true]]" weight="50"/>
									</do_any>
								</do_else>
								<!--set_value name="$destination" exact="$sectors.random" chance="if $destination? and $destination.exists then 0 else 100"/-->
								<do_if value="$closerSector.count">
									<set_value name="$destination" exact="$closerSector.random" chance="if $destination? and $destination.exists then 0 else 100"/>
								</do_if>
								<do_else>
									<set_value name="$destination" exact="$sectors.random" chance="if $destination? and $destination.exists then 0 else 100"/>
								</do_else>
								<!-- $destination -->
								<set_value name="$script" exact="if global.$nfconfig.$Check? then 'BR.move.patrol' else 'move.patrol'"/>
							</do_if>
						</do_if>
						<do_else>
							<remove_value name="$test"/>
							<include_actions ref="md.MM_Corps__Data.MMCData_ship_job_tmp" />
						</do_else>
						<remove_value name="$closerSector"/>
					</do_if>

					<include_actions ref="md.MM_Corps__Data.MMCData_ship_job_runscript" />
			
					<remove_value name="$temp"/>
					<remove_value name="$temp_next"/>
				</do_elseif>
				<do_elseif value="$Object.cargo.{ware.fuelcells}.max == 0" >
					<set_value name="$newcommander" exact="null"/>
					<set_value name="$subs" exact="if $tmpConfig.$patrolEscorts? then $tmpConfig.$patrolEscorts else 2"/>
					<find_ship name="$tmpShips" space="$Object.cluster" owner="$Object.owner" primarypurpose="objectpurpose.fight" multiple="true">
						<match_any> 
							<match class="class.ship_xl"/>
							<match class="class.ship_l"/>			
						</match_any>
					</find_ship>
					<do_all exact="$tmpShips.count" counter="$x">
						<do_if value="$tmpShips.{$x}.isoperational
								and not $tmpShips.{$x}.isjobship
								and not $tmpShips.{$x}.ismission
								and $tmpShips.{$x}.pilot.$whatido? and ['BR.move.patrol', 'move.patrol', 'move.patrol.route'].indexof.{$tmpShips.{$x}.pilot.$whatido}
								and $Object != $tmpShips.{$x}
								and $Object != $tmpShips.{$x}.commander
								and not $tmpShips.{$x}.commander.exists
								and $tmpShips.{$x}.subordinates.count lt $subs
							">
							<set_value name="$newcommander" exact="$tmpShips.{$x}"/>
							<break />
						</do_if>
					</do_all>
					<remove_value name="$subs"/>
					<remove_value name="$tmpShips"/>
					<do_if value="$newcommander.exists and $newcommander.isclass.[class.ship_l, class.ship_xl]">
						<set_value name="$param" exact="[['target', $newcommander]]"/>
						<set_value name="$script" exact="if global.$nfconfig.$Check? then 'BR.move.escort' else 'move.escort'"/>
						<include_actions ref="md.MM_Corps__Data.MMCData_ship_job_runscript" />
						<!--set_object_commander object="$Object" commander="$newcommander" />
						<start_script object="$Object.pilot" name="'move.shipjobs'">
							<param name="run_script_name" value="if global.$nfconfig.$Check? then 'BR.move.escort' else 'move.escort'"/>
							<param name="run_script_param" value="[['target', $newcommander]]"/>
						</start_script-->
					</do_if>
					<do_else>
						<do_if value="$_CEO.$jobFactCluster or $_CEO.$jobFactSector or $_CEO.$jobFactZone" chance="($_CEO.$jobFactCluster?) *100">
							<do_any>
								<set_value name="$param" exact="[['range', 'cluster'], ['allowstations', false]]" weight="0"/>
								<set_value name="$param" exact="[['range', 'sector'], ['allowstations', false]]" weight="$_CEO.$jobFactSector"/>
								<set_value name="$param" exact="[['range', 'zone'], ['allowstations', false]]" weight="$_CEO.$jobFactZone + $_CEO.$jobFactCluster"/>
							</do_any>
						</do_if>
						<do_elseif value="$pirat">
							<do_any>
								<set_value name="$param" exact="[['range', 'cluster'], ['allowstations', false]]" weight="0"/>
								<set_value name="$param" exact="[['range', 'sector'], ['allowstations', false]]" weight="20"/>
								<set_value name="$param" exact="[['range', 'zone'], ['allowstations', false]]" weight="80"/>
							</do_any>
						</do_elseif>
						<do_else>
							<do_any>
								<set_value name="$param" exact="[['range', 'cluster'], ['allowstations', false]]" weight="0"/>
								<set_value name="$param" exact="[['range', 'sector'], ['allowstations', false]]" weight="30"/>
								<set_value name="$param" exact="[['range', 'zone'], ['allowstations', false]]" weight="70"/>
							</do_any>
						</do_else>
						<set_value name="$script" exact="if global.$nfconfig.$Check? then 'BR.move.patrol' else 'move.patrol'"/>
						<include_actions ref="md.MM_Corps__Data.MMCData_ship_job_tmp" chance="0"/>
						<include_actions ref="md.MM_Corps__Data.MMCData_ship_job_runscript" />

						<!--start_script object="$Object.pilot" name="'move.shipjobs'">
							<param name="run_script_name" value="if global.$nfconfig.$Check? then 'BR.move.patrol' else 'move.patrol'"/>
							<param name="run_script_param" value="[['range', 'sector'], ['allowstations', false]]"/>
							<param name="destination" value="$sectors.random"/>
						</start_script-->
					</do_else>
					<remove_value name="$newcommander"/>
				</do_elseif>
				<do_else>
					<start_script object="$Object.pilot" name="'move.die'">
						<param name="byjump" value="true" />
					</start_script>
				</do_else>
<debug_text chance="0" text="$text" filter="error" />
<remove_value name="$text"/>

				<remove_value name="$pirat"/>
				<remove_value name="$sectors"/>
				<remove_value name="$mining_basketoverride"/>
				<remove_value name="$trade_warebasket"/>
				<remove_value name="$Station"/>
			</actions>
		</library>

		<!--
		<set_value name="$_faction" exact="faction.player" />
		<include_actions ref="md.MM_Corps__Data.MMCData_CEO_PROPERTY_INIT" />
		-->
		<library name="MMCData_CEO_PROPERTY_INIT">
			<actions>
				<do_if value="$startzone? and $startzone.exists" negate="true">
					<find_station name="$ExistingSY" space="player.galaxy" functional="true" multiple="false">
						<match_content class="class.buildmodule" />
						<match owner="$_faction"/>
					</find_station>
					<do_if value="$ExistingSY">
						<set_value name="$startzone" exact="$ExistingSY.zone" />
					</do_if>
					<remove_value name="$ExistingSY"/>
					<do_if value="$startzone? and $startzone.exists" negate="true">
						<find_zone name="$startzone" space="player.galaxy" tempzone="false" mapzone="true" owner="$_faction" multiple="false" />
						<do_if value="$startzone and $startzone.exists" negate="true">
							<find_station name="$ExistingS" space="player.galaxy" functional="true" multiple="false">
								<match owner="$_faction"/>
							</find_station>
							<do_if value="$ExistingS">
								<set_value name="$startzone" exact="$ExistingS.zone" />
							</do_if>
							<remove_value name="$ExistingS"/>
							<do_if value="$startzone and $startzone.exists" negate="true">
								<find_zone name="$startzone" space="player.galaxy" tempzone="false" mapzone="true" multiple="false">
									<match_relation faction="$_faction" relation="neutral" comparison="ge"/>
								</find_zone>
							</do_if>
						</do_if>
					</do_if>
				</do_if>
		
				<do_if value="$_faction" exact="faction.player" negate="true">
					<set_value name="$PROPERTY_INIT" />
					<create_list name="$todo" />
			
					<include_actions ref="md.MM_Corps__Data.MMCData_CEO_PROPERTY" />
			
					<remove_value name="$PROPERTY_INIT"/>
				</do_if>

				<!-- create start stations -->
				<do_if value="$todo_stations? and $todo_stations.count">
					<set_value name="$todo" exact="$todo_stations.clone" />
				</do_if>
				<do_else>
					<create_list name="$todo" />
				</do_else>

				<do_all exact="$todo.count" counter="$r">
					<find_zone name="$zone" macro="$todo.{$r}.{1}"/>
					<do_if value="$zone" negate="true">
						<continue />
					</do_if>

					<do_all exact="$todo.{$r}.{3}.count" counter="$s">

						<set_value name="$CEO" exact="$_CEO" />
						<set_value name="$faction" exact="$_faction" />
						<set_value name="$Macro" exact="$todo.{$r}.{3}.{$s}.{1}" />

						<do_if value="$todo.{$r}.{3}.{$s}.{2}" exact="'spawn'">
							<set_value name="$BuildZone" exact="$zone" />
							<set_value name="$position" exact="if $todo.{$r}.{3}.{$s}.{3}? then $todo.{$r}.{3}.{$s}.{3} else 'auto'"/>
							<set_value name="$BuildLocation" exact="'random'"/>
							<include_actions ref="md.MM_Corps__Data.MMCData_create_station" />
						</do_if>
						<do_elseif value="$todo.{$r}.{3}.{$s}.{2}" exact="'buildfree'">
							<signal_cue_instantly cue="md.MM_Corps__Station_Const.MMCStationConst_contract" param="[$zone, $Macro, $faction, 100, 100, true, null, $CEO, true]"/>
						</do_elseif>
						<do_else comment="'build'">
							<signal_cue_instantly cue="md.MM_Corps__Station_Const.MMCStationConst_contract" param="[$zone, $Macro, $faction, 100, 0, true, null, $CEO, true]"/>
						</do_else>
						
						<!-- TODO following rows with ships as subordinate of station -->
					</do_all>
				</do_all>
				<remove_value name="$todo"/>

				<!-- create start (capital) ships -->
				<create_list name="$todo" />
				<do_if value="$todo_ships? and $todo_ships.count">
					<set_value name="$todo" exact="$todo_ships.clone" />
				</do_if>
				<do_else>
					<create_list name="$todo" />
				</do_else>

				<do_all exact="$todo.count" counter="$r">
					<find_zone name="$zone" macro="$todo.{$r}.{1}"/>
					<do_if value="$zone" negate="true">
						<continue />
					</do_if>

					<create_list name="$targets" />
					<do_all exact="$todo.{$r}.{3}.count" counter="$s">
						<do_all exact="$todo.{$r}.{3}.{$s}.{3} * [$targets.count, 1].max">
							<do_if value="$todo.{$r}.{3}.{$s}.{2}.isclass.[class.ship_s,class.ship_m]">
								<create_ship name="$Object"  zone="$zone" macro="$todo.{$r}.{3}.{$s}.{2}">
									<pilot actor="null"/>
									<owner exact="$_faction" overridenpc="true"/>
									<safepos y="5km"/>
								</create_ship>
							</do_if>
							<do_else>
								<create_ship name="$Object"  zone="$zone" macro="$todo.{$r}.{3}.{$s}.{2}">
									<pilot actor="null"/>
									<defence actor="null"/>
									<engineer actor="null"/>
									<owner exact="$_faction" overridenpc="true"/>
									<safepos y="5km"/>
								</create_ship>
							</do_else>

							<do_if value="$Object? and $Object.exists and stat.nf_ships_spawned?">
								<set_value name="stat.nf_ships_spawned" operation="add" />
							</do_if>

							<include_actions ref="md.MM_Corps__Data.MMCData_activate_ship" chance="($Object? and $Object.exists) *100"/>
					
							<do_if value="$s" exact="1">
								<append_to_list name="$targets" exact="$Object" />

								<do_if value="$_faction" exact="faction.player" negate="true">
									<start_script object="$Object.pilot" name="'move.shipjobs'" chance="($Object? and $Object.exists) *100">
										<param name="run_script_name" value="'move.idle'"/>
										<param name="run_script_param" value="[['TimeOut', 5min]]"/>
									</start_script>
								</do_if>
								<do_else>
									<start_script object="$Object.pilot" name="'player.default'"/>
								</do_else>
							</do_if>
							<do_else>
								<do_if value="not $tcount? or $tcount == $targets.count">
									<set_value name="$tcount" exact="1"/>
								</do_if>
								<do_else>
									<set_value name="$tcount" operation="add"/>
								</do_else>
								<set_value name="$target" exact="$targets.{$tcount}"/>

								<set_value name="$param" exact="[['target', $target]]"/>
								<set_value name="$script" exact="if global.$nfconfig.$Check? then 'BR.move.escort' else 'move.escort'"/>
								<include_actions ref="md.MM_Corps__Data.MMCData_ship_job_runscript" />
							</do_else>
							<remove_value name="$Object"/>
						</do_all>
						<remove_value name="$tcount"/>
					</do_all>
					<remove_value name="$targets"/>
				</do_all>
				<remove_value name="$todo"/>
				<remove_value name="$todo_stations"/>
				<remove_value name="$todo_ships"/>
				<remove_value name="$startmoney"/>
				<remove_value name="$zone"/>
				<remove_value name="$Macro"/>
			</actions>
		</library>

		<!-- 
		<set_value name="$tmp_jobs" exact="[]"/>
		<set_value name="$param" exact="[]"/>
		<set_value name="$test" exact="false" comment="optional"/>
		<set_value name="$destination" exact="null"/>
		<set_value name="$script" exact="'move.idle'"/>
		<include_actions ref="md.MM_Corps__Data.MMCData_ship_job_tmp" />
		<remove_value name="$test"/>
		-->
		<library name="MMCData_ship_job_tmp">
			<actions>
<set_value name="$text" exact="'\n* job:['+$script+'] ' + ' jobs:' + $tmp_jobs.count +' '" operation="add"/>
				<do_all exact="$tmp_jobs.count" counter="$xj" chance="if $tmp_jobs? then 100 else 0">
					<do_if value="$tmp_jobs.{$xj}.{1}" exact="$script">
						<do_if value="$tmp_jobs.{$xj}.{2}? and $tmp_jobs.{$xj}.{2}.exists">
							<set_value name="$destination" exact="$tmp_jobs.{$xj}.{2}" chance="if $test? and $test == false then 0 else 100"/>
						</do_if>
						<do_if value="$tmp_jobs.{$xj}.{3}? and typeof $tmp_jobs.{$xj}.{3} == datatype.list">
							<set_value name="$param" exact="$tmp_jobs.{$xj}.{3}" chance="if $test? and $test == false then 0 else 100"/>
						</do_if>
						<remove_value name="$tmp_jobs.{$xj}" chance="if $test? and $test == false then 0 else 100"/>
						<set_value name="$test" exact="true" chance="if $test? and $test == false then 100 else 0"/>
<set_value name="$text" exact="' MATCH:'+$param +' dest:' + @$destination.knownname+' test:' + @$test" operation="add"/>
						<break />
					</do_if>
				</do_all>
			</actions>
		</library>

		<!-- 
		<set_value name="$noCommander" comment="optional"/>
		<set_value name="$Object" exact="null"/>
		<set_value name="$param" exact="[]"/>
		<set_value name="$destination" exact="null"/>
		<set_value name="$script" exact="'move.idle'"/>
		<include_actions ref="md.MM_Corps__Data.MMCData_ship_job_runscript" />
		-->
		<library name="MMCData_ship_job_runscript">
			<actions>
				<do_if value="['move.escort', 'BR.move.escort'].indexof.{$script} and $param.{1}.{1}? and $param.{1}.{1} == 'target'" chance="if not $noCommander? then 100 else 0">
					<set_object_commander object="$Object" commander="$param.{1}.{2}" />
				</do_if>
				<do_elseif value="$Object.subordinates.count == 0 and ['move.patrol', 'BR.move.patrol', 'BR.move.plunder', 'move.patrol.route'].indexof.{$script}" chance="($_CEO.$cheatEscorts? and $_CEO.money gt $_CEO.$cheatEscorts)*100">
					<signal_objects object="$_CEO" param="'GIVE.ESCORTS'" param2="$Object" delay="60s"/>
				</do_elseif>

				<start_script object="$Object.pilot" name="'move.shipjobs'">
					<param name="run_script_name" value="$script"/>
					<param name="run_script_param" value="$param"/>
					<param name="destination" value="if $destination? then $destination else null"/>
				</start_script>
				<remove_value name="$noCommander"/>
				<remove_value name="$param"/>
				<remove_value name="$destination"/>
				<remove_value name="$script"/>
			</actions>
		</library>

		<!-- 
		<set_value name="$faction" exact="faction.player" />
		<include_actions ref="md.MM_Corps__Data.MMCData_tradeware" />
		<remove_value name="$warebasket"/>
		-->
		<library name="MMCData_tradeware">
			<actions>
				<do_if value="$tmpConfig.$tradeware?" negate="true">
					<create_list name="$temp_warelist" />

					<find_station name="$temp_stations" space="player.galaxy" functional="true" multiple="true">
						<match owner="$faction"/>
					</find_station>
					<do_if value="$temp_stations.count == 0 and @$tmpConfig.$build.count">
						<do_all exact="$tmpConfig.$build.count" counter="$yj" reverse="true">
							<find_station name="$temp_station" macro="$tmpConfig.$build.{$yj}" space="player.galaxy" functional="true" multiple="false" />
							<do_if value="$temp_station">
								<set_value name="$tmp" exact="$temp_station.resources.list" />
								<do_all exact="$tmp.count" counter="$zj">
									<do_if value="$temp_warelist.indexof.{$tmp.{$zj}}" exact="0">
										<append_to_list name="$temp_warelist" exact="$tmp.{$zj}" />
									</do_if>
								</do_all>
								<remove_value name="$tmp"/> 
								<set_value name="$tmp" exact="$Station.tradewares.list" />
								<do_all exact="$tmp.count" counter="$zj">
									<do_if value="$temp_warelist.indexof.{$tmp.{$zj}}" exact="0">
										<append_to_list name="$temp_warelist" exact="$tmp.{$zj}" />
									</do_if>
								</do_all>
								<remove_value name="$tmp"/> 
							</do_if>
						</do_all>
					</do_if>
					<do_elseif value="$temp_stations.count" >
						<do_all exact="$temp_stations.count" counter="$yj" reverse="true">
							<do_if value="$temp_stations.{$yj}.exists">
								<set_value name="$tmp" exact="$temp_stations.{$yj}.resources.list" />
								<do_all exact="$tmp.count" counter="$zj">
									<do_if value="$temp_warelist.indexof.{$tmp.{$zj}}" exact="0">
										<append_to_list name="$temp_warelist" exact="$tmp.{$zj}" />
									</do_if>
								</do_all>
								<remove_value name="$tmp"/> 
								<set_value name="$tmp" exact="$temp_stations.{$yj}.tradewares.list" />
								<do_all exact="$tmp.count" counter="$zj">
									<do_if value="$temp_warelist.indexof.{$tmp.{$zj}}" exact="0">
										<append_to_list name="$temp_warelist" exact="$tmp.{$zj}" />
									</do_if>
								</do_all>
								<remove_value name="$tmp"/> 
								<set_value name="$tmp" exact="$temp_stations.{$yj}.products.list" />
								<do_all exact="$tmp.count" counter="$zj">
									<do_if value="$temp_warelist.indexof.{$tmp.{$zj}}" exact="0">
										<append_to_list name="$temp_warelist" exact="$tmp.{$zj}" />
									</do_if>
								</do_all>
								<remove_value name="$tmp"/> 
							</do_if>
						</do_all>
					</do_elseif>
					<remove_value name="$temp_stations"/>
					<!-- fallback -->
					<do_if value="$temp_warelist.count == 0 or ($temp_warelist.count == 1 and $temp_warelist.indexof.{ware.fuelcells})">
						<set_value name="$temp_warelist" exact="warebasket.all.list" />
					</do_if>
	
					<do_if value="$tmpConfig? and typeof $tmpConfig == datatype.table" negate="true">
						<set_value name="$tmpConfig" exact="table[]" />
					</do_if>
					<set_value name="$tmpConfig.$tradeware" exact="$temp_warelist.clone" />
					<remove_value name="$temp_warelist"/>
				</do_if>
				<set_value name="$warebasket" exact="$tmpConfig.$tradeware.clone" />
			</actions>
		</library>

		<!-- 
		<set_value name="$_CEO" exact="null"/>
		<include_actions ref="md.MM_Corps__Data.MMCData_doHandler_include" />
		-->
		<library name="MMCData_doHandler_include">
			<actions>
				<debug_text chance="0" text="'Start'" />
				<set_value name="$faction" exact="$_CEO.trueowner" />
				<set_value name="$_faction" exact="$faction" />

				<do_if value="event.param" exact="'INIT SHIP'">
					<create_list name="$tmp_jobs"/>
					<do_if value="$_CEO.$JOBS? and $_CEO.$JOBS.count">
						<set_value name="$tmp_jobs" exact="$_CEO.$JOBS.clone"/>
					</do_if>
<!--
					<do_elseif value="global.$OMNI_JOBS? and global.$OMNI_JOBS.count">
						<set_value name="$tmp_jobs" exact="global.$OMNI_JOBS.clone"/>
						<set_value name="$_CEO.$JOBS" exact="global.$OMNI_JOBS.clone"/>
						<remove_value name="global.$OMNI_JOBS"/>
					</do_elseif>
					<do_elseif value="global.$OMNI_JOBS?">
						<remove_value name="global.$OMNI_JOBS"/>
					</do_elseif>
-->
					<set_value name="$Object" exact="event.param2.{1}" />
					<set_value name="$ShipYard" exact="event.param2.{2}" />
					<set_value name="$price" exact="event.param2.{3}" />

					<do_if value="$ShipYard.owner != $faction">
						<set_value name="$_faction" exact="$faction"/>
						<do_if value="$_CEO.$JOB_SPACES? and $_CEO.$JOB_SPACES.count">
							<set_value name="$validZones" exact="$_CEO.$JOB_SPACES.clone"/>
						</do_if>
						<do_else>
							<set_value name="$fallback" exact="true"/>
							<include_actions ref="md.MM_Corps__Data.MMCData_find_space" />
							<set_value name="$faction" exact="$_faction"/>
						</do_else>

						<set_value name="$destination" exact="$validZones.random"/>

						<remove_value name="$validCluster"/>
						<remove_value name="$validSectors"/>
						<remove_value name="$validZones"/>
						<remove_value name="$validZonesCore"/>
						<remove_value name="$validZonesHotZone"/>
					</do_if>

					<set_value name="$overrideStation" exact="null" comment="prevent use of SY warelist"/>

					<do_if value="$Object.isclass.[class.ship_m, class.ship_s]">
						<get_control_entities object="$Object" groupname="$ControlEntities"/>
						<do_all exact="$ControlEntities.count" counter="$Counter" reverse="true">
							<remove_actor_account actor="$ControlEntities.{$Counter}" transfer="true" chance="if $ControlEntities.{$Counter}.hasownaccount then 100 else 0"/>
							<abort_scripts entity="$ControlEntities.{$Counter}"/>
							<destroy_object object="$ControlEntities.{$Counter}"/>
						</do_all>
						<remove_value name="$ControlEntities" />
					</do_if>

					<include_actions ref="md.MM_Corps__Data.MMCData_activate_ship" />

					<share_actor_account actor="$Object.pilot" otherobject="$_CEO"/>
					<do_if value="$Object.architect">
						<share_actor_account actor="$Object.architect" otherobject="$_CEO"/>
					</do_if>

					<transfer_money from="$Object.pilot" to="$ShipYard.tradenpc" amount="$price" />
			
					<write_to_logbook category="upkeep" text="{2802,2220}.[$ShipYard.knownname, $ShipYard.zone.knownname, $ShipYard.sector.knownname, $ShipYard.cluster.knownname, $Object.knownname, $Object.pilot.knownname, $price.formatted.default]" chance="if $ShipYard.isplayerowned then 100 else 0"/>

					<do_if value="$tmp_jobs? and $_CEO.$JOBS? and $tmp_jobs.count != $_CEO.$JOBS.count">
						<do_if value="$tmp_jobs.count">
							<set_value name="$_CEO.$JOBS" exact="$tmp_jobs.clone"/>
						</do_if>
						<do_else>
							<remove_value name="$_CEO.$JOBS"/>
						</do_else>
					</do_if>
				</do_if>
				<do_elseif value="event.param" exact="'GIVE.ESCORTS'" comment="create escorts for higher difficult setting">

					<include_actions ref="md.MM_Corps__Data.MMCData_dohandler_include_escorts" />

				</do_elseif>
				<do_elseif value="event.param" exact="'ORDER.SHIP'" comment="rent a ship from this CEO">

					<include_actions ref="md.MM_Corps__Data.MMCData_dohandler_include_rentaship" />

				</do_elseif>
				<do_elseif value="event.param" exact="'REPLACE CV'" chance="0" comment="restart builds doesnt work yet">
					<do_if value="$_CEO.$openBuilds?" negate="true">
						<create_list name="$_CEO.$openBuilds" />
					</do_if>
					<append_to_list name="$_CEO.$openBuilds" exact="event.param2"/>
				</do_elseif>

				<remove_value name="$tmp_jobs"/>
				<remove_value name="$Object"/>
				<remove_value name="$ShipYard"/>
				<remove_value name="$price"/>
				<remove_value name="$faction"/>
				<remove_value name="$_faction"/>
				<debug_text chance="0" text="'end'" />
			</actions>
		</library>

		<!-- 
		<set_value name="$_CEO" exact="null"/>
		<set_value name="$build" exact="['al','massenergy','energy','food','drug','tech','ship']" comment="['massenergy','energy','food','drug','tech','ship','shipparts','al','ol','xen','tel','spl','pir','warehouse','outpost']"/>
		<set_value name="$build2" exact="['al','massenergy','energy','food','drug','tech','ship']" comment="['massenergy','energy','food','drug','tech','ship','shipparts','al','ol','xen','tel','spl','pir','warehouse','outpost']"/>
		<set_value name="$style" exact="['domination','cooperative','pirate']"/>
		<include_actions ref="md.MM_Corps__Data.MMCData_doworker_include" />
		-->
		<library name="MMCData_doworker_include">
			<actions>
				<debug_text chance="0" text="'Start'" />
				<set_value name="$_CEO.$style" exact="if $noBelongings? and ['domination','cooperative','pirate','outofbusiness','mercenary'].indexof.{$noBelongings} then $noBelongings else $style.{1}" comment="'domination','cooperative','pirate'"/>
				<set_value name="$_faction" exact="$_CEO.trueowner" />
				<set_value name="$stationToBuild" exact="null"/>
				<set_value name="$special_musthave_sy" exact="null"/>
				<set_value name="$buildZone" exact="null"/>
				<create_list name="$tmp_stations"/>
				<create_list name="$tmp_jobs"/>

				<do_if value="global.$factionCEOs.{'$' + $_faction.id}?" negate="true">
					<do_if value="global.$factionCEOs? and typeof global.$factionCEOs == datatype.table" negate="true">
						<set_value name="global.$factionCEOs" exact="table[]" />
					</do_if>
					<set_value name="global.$factionCEOs.{'$' + $_faction.id}" exact="$_CEO" />
				</do_if>
<set_value name="$text2" exact="''" />
<set_value name="$text2" exact="'* Process: [%1] \n'.[$_faction.id]" operation="add" />
<set_value name="$text3" exact="'** Adv Info \n'" />


				<include_actions ref="md.MM_Corps__Data.MMCData_config" />

				<!-- build station -->
				<do_if value="not $nextBuildcheck? or ($nextBuildcheck? and $nextBuildcheck lt player.age)" chance="if global.$nfconfig.$doBuildSt and $_CEO.money gt $tmpConfig.$minBuild then 100 else 0">

					<include_actions ref="md.MM_Corps__Data.MMCData_doworker_include_build" />

<set_value name="$text2" exact="'\n# Build_Station [%1] #'.[if $stationToBuild? and $stationToBuild then $stationToBuild.id else 'none']" operation="add" />
					<set_value name="$nextBuildcheck" exact="if $next_Check? and $next_Check.{1} then player.age + $next_Check.{1} else player.age + 120min"/>
				</do_if>

				<!-- buy ships -->
				<do_if value="not $nextShoppingTrip? or ($nextShoppingTrip? and $nextShoppingTrip lt player.age)" chance="if $_CEO.money gt $tmpConfig.$minBuyShip then 100 else 0">

					<do_if value="$_CEO.money gt $tmpConfig.$minBuyShipTop*10">
						<find_station name="$ShipYardOfTrust_Multi" space="player.galaxy" functional="true" multiple="true">
							<match_content class="class.buildmodule" />
							<match owner="$_faction"/>
						</find_station>
						<do_all exact="$ShipYardOfTrust_Multi.count" counter="$y" reverse="true">
							<do_if value="$ShipYardOfTrust_Multi.{$y} and $ShipYardOfTrust_Multi.{$y}.tradenpc.exists and not $ShipYardOfTrust_Multi.{$y}.tradenpc.$denyBuildRandomNPC? and $ShipYardOfTrust_Multi.{$y}.tradenpc.$orders? and $ShipYardOfTrust_Multi.{$y}.tradenpc.$orders.count lt 5 and $ShipYardOfTrust_Multi.{$y}.units.{unitcategory.welder}.count gt 10" negate="true">
								<remove_value name="$ShipYardOfTrust_Multi.{$y}"/>
							</do_if>
						</do_all>
					</do_if>
					<do_else>
						<create_list name="$ShipYardOfTrust_Multi"/>
					</do_else>
					<do_if value="$ShipYardOfTrust_Multi.count">
						<include_actions ref="md.MM_Corps__Data.MMCData_doworker_include_buyships" />
						<set_value name="$requiredUnits_count" exact="$requiredUnits.count"/>

						<do_all exact="$ShipYardOfTrust_Multi.count" counter="$sy">
<set_value name="$text2" exact="' \n# Buy Ship %1 #\n'.[$requiredUnits_count]" operation="add" />
							<do_if value="$requiredUnits_count and $requiredUnits.count lt 1">
								<remove_value name="$requiredUnits"/>
								<include_actions ref="md.MM_Corps__Data.MMCData_doworker_include_buyships" />
							</do_if>

							<do_if value="$requiredUnits_count">
								<set_value name="$ShipYardOfTrust" exact="$ShipYardOfTrust_Multi.{$sy}"/>
								<include_actions ref="md.MM_Corps__Data.MMCData_do_orderships" />
								<set_value name="$requiredUnits_count" operation="subtract"/>
							</do_if>
							<do_elseif value="not $_CEO.$jobsdisabled? and $requiredUnits_count == 0" chance="(not global.$nfconfig.$plotSafe?) *100">
								<set_value name="$faction" exact="$_faction" />
								<include_actions ref="md.MM_Corps__Data.MMCData_disable_jobs" />
								<set_value name="$_CEO.$jobsdisabled" />
								<break/>
							</do_elseif>
							<do_elseif value="$requiredUnits_count == 0" >
								<break/>
							</do_elseif>
						</do_all>

						<set_value name="$nextShoppingTrip" exact="if $requiredUnits_count gt 3 then player.age + 10min else if $next_Check? and $next_Check.{2} then player.age + $next_Check.{2} else player.age + 45min"/>
						<remove_value name="$requiredUnits_count"/>
					</do_if>
					<do_else>
						<include_actions ref="md.MM_Corps__Data.MMCData_doworker_include_buyships" />
	
<set_value name="$text2" exact="' \n# Buy Ship %1 #\n'.[$requiredUnits.count]" operation="add" />

						<do_if value="$requiredUnits.count">
							<include_actions ref="md.MM_Corps__Data.MMCData_do_orderships" />
						</do_if>
						<do_elseif value="not $_CEO.$jobsdisabled? and $requiredUnits.count == 0" chance="(not global.$nfconfig.$plotSafe?) *100">
							<set_value name="$faction" exact="$_faction" />
							<include_actions ref="md.MM_Corps__Data.MMCData_disable_jobs" />
							<set_value name="$_CEO.$jobsdisabled" />
						</do_elseif>

						<set_value name="$nextShoppingTrip" exact="if $requiredUnits.count gt 3 then player.age + 10min else if $next_Check? and $next_Check.{2} then player.age + $next_Check.{2} else player.age + 45min"/>
					</do_else>
					<remove_value name="$ShipYardOfTrust_Multi"/>
					<remove_value name="$requiredUnits"/>
				</do_if>

				<!-- command -->
				<do_if value="$shipDoBuild?" negate="true">
					<set_value name="$faction" exact="$_faction" />
					<include_actions ref="md.MM_Corps__Data.MMCData_find_ships" />
				</do_if>
<set_value name="$text2" exact="'* Ships: n:%1 u:%2 b:%3 t:%4 m:%5 p:%6 pl:%7 e:%8 StS:%9 - '.[$shipNothingTodo.count, $shipDoUnknown.count, $shipDoBuild.count, $shipDoTrade.count, $shipDoMine.count, $shipDoPatrol.count, $shipDoPlunder.count, $shipDoEscort.count, $shipDoStationSupport.count]" operation="add" />

				<!-- send scouts -->
				<do_if value="$_CEO.$style == 'domination' and $tmpConfig.$scouts">
				
					<include_actions ref="md.MM_Corps__Data.MMCData_doworker_include_scouts" />

				</do_if>

				<do_if value="$shipNothingTodo.count and not $validSectors?">
					<set_value name="$faction" exact="$_faction"/>
					<set_value name="$fallback" exact="true"/>
					<include_actions ref="md.MM_Corps__Data.MMCData_find_space" />
				</do_if>
<set_value name="$text2" exact="' AP n:%1 u:%2 spaces vz:%3 [cz:%6 h:%7] . vS:%4 . vC:%5 \n'.[$shipNothingTodo.count, $shipDoUnknown.count, @$validZones.count, @$validSectors.count, @$validCluster.count, @$validZonesCore.count, @$validZonesHotZone.count]" operation="add" />

				<!-- TODO assign (worker) to stations? [intelligent] -->
				<do_if value="not $nextJobCheck? or ($nextJobCheck? and $nextJobCheck lt player.age)">
					<do_if value="not $validSectors?">
						<set_value name="$faction" exact="$_faction"/>
						<set_value name="$fallback" exact="true"/>
						<include_actions ref="md.MM_Corps__Data.MMCData_find_space" />
					</do_if>
					<set_value name="$tmp" exact="0" />
					<set_value name="$tmp" exact="$tmpConfig.$clusterPatrol * $validCluster.count" operation="add"/>
					<set_value name="$tmp" exact="$tmpConfig.$sectorPatrol * $validSectors.count" operation="add"/>
					<set_value name="$tmp" exact="$tmpConfig.$zonePatrol * $validZonesCore.count" operation="add"/>
					<set_value name="$temp_base" exact="if $tmp then (100f / $tmp)f else 0" />
					<remove_value name="$tmp"/>
					<do_if value="$temp_base">
						<set_value name="$_CEO.$jobFactZone" exact="(($tmpConfig.$zonePatrol * $validZonesCore.count) * $temp_base)i" />
						<set_value name="$_CEO.$jobFactSector" exact="(($tmpConfig.$sectorPatrol * $validSectors.count) * $temp_base)i" />
						<set_value name="$_CEO.$jobFactCluster" exact="(($tmpConfig.$clusterPatrol * $validCluster.count) * $temp_base)i" />
					</do_if>
					<do_else>
						<remove_value name="$_CEO.$jobFactZone"/>
						<remove_value name="$_CEO.$jobFactSector"/>
						<remove_value name="$_CEO.$jobFactCluster"/>
					</do_else>
					<remove_value name="$temp_base"/>
					<!-- patrol -->
					<include_actions ref="md.MM_Corps__Data.MMCData_doworker_include_patrol" />
					<!-- escort optimize -->
					<include_actions ref="md.MM_Corps__Data.MMCData_doworker_include_escorts" />
					<!-- TODO Traders -->
					<!-- next check -->
					<set_value name="$nextJobCheck" exact="if $next_Check? and $next_Check.{3} then player.age + $next_Check.{3} else player.age + 2h" />
<set_value name="$text2" exact="'* JobCheck reqE:%1 toCk:%2 spaces vz:%3 [cz:%6] . vS:%4 . vC:%5\n'.[@$shipDoEscort.count.count, @$checkForNewJob.count, @$validZones.count, @$validSectors.count, @$validCluster.count, @$validZonesCore.count]" operation="add" chance="0"/>
<set_value name="$text2" exact="'* Job Factors: z:%1 s:%2 c:%3 \n'.[@$_CEO.$jobFactZone, @$_CEO.$jobFactSector, @$_CEO.$jobFactCluster]" operation="add" />
				</do_if>
				<!-- TODO use scout-data to attack enemies / control CoreZones -->
				<do_if value="$tmpConfig.$invasionPatrol and not $nextInvasion? or ($nextInvasion? and $nextInvasion lt player.age)" chance="if global.$nfconfig.$doInv and $_CEO.$style == 'domination' then 100 else 0">

					<include_actions ref="md.MM_Corps__Data.MMCData_doworker_include_invasion" />

				</do_if>
				<!-- against lazy ships -->
				<do_if value="$shipNothingTodo.count and $validSectors.count">
					<do_all exact="$shipNothingTodo.count" counter="$r" reverse="true">
						<do_if value="$shipNothingTodo.{$r}.primarypurpose == objectpurpose.build and not $shipNothingTodo.{$r}.pilot.$traderNow?">
							<continue />
						</do_if>
						<set_value name="$plunder" exact="if $_CEO.$style == 'pirate' then true else false"/>
						<set_value name="$Object" exact="$shipNothingTodo.{$r}" />
						<set_value name="$sectors" exact="$validSectors.clone" />
						<include_actions ref="md.MM_Corps__Data.MMCData_ship_job" />
						<remove_value name="$shipNothingTodo.{$r}"/>
					</do_all>
				</do_if>

				<do_if value="$shipNothingTodo.count" chance="if $_CEO.money lt $tmpConfig.$minBuyShip then 100 else 0">
<set_value name="$text2" exact="'* Sell %1 ships [%2] -- '.[$shipNothingTodo.count, $_CEO.money.formatted.default]" operation="add" />
					<include_actions ref="md.MM_Corps__Data.MMCData_ship_sell" />
<set_value name="$text2" exact="'%1 sold? [%2]\n'.[$shipNothingTodo.count, $_CEO.money.formatted.default]" operation="add" />
				</do_if>
				<do_elseif value="$shipNothingTodo.count" chance="if $_CEO.money lt ($tmpConfig.$minBuyShipTop * 0.66f) then 100 else 0">
<set_value name="$text2" exact="'* Sell %1 ships [%2] -- '.[$shipNothingTodo.count, $_CEO.money.formatted.default]" operation="add" />
					<do_all exact="$shipNothingTodo.count" counter="$r" reverse="true">
						<do_if value="$shipNothingTodo.{$r}.primarypurpose == objectpurpose.build" negate="true">
							<remove_value name="$shipNothingTodo.{$r}"/>
						</do_if>
					</do_all>
					<include_actions ref="md.MM_Corps__Data.MMCData_ship_sell" />
<set_value name="$text2" exact="'%1 sold? [%2]\n'.[$shipNothingTodo.count, $_CEO.money.formatted.default]" operation="add" />
				</do_elseif>
				<do_elseif value="$shipNothingTodo.count gt 3 and $tmpConfig.$max_builders?">
					<set_value name="$buildersCount" exact="if $_CEO.money gt $tmpConfig.$minBuild then [$tmpConfig.$max_builders-$shipDoBuild.count, 0].max else [2, $tmpConfig.$max_builders].min" />
<set_value name="$text2" exact="'* lazyBuilders n:%1 ships targetBuilders:%2 -- '.[$shipNothingTodo.count, $buildersCount]" operation="add" />
					<do_all exact="$shipNothingTodo.count" counter="$r" reverse="true">
						<do_if value="$shipNothingTodo.{$r}.primarypurpose == objectpurpose.build and not ($shipNothingTodo.{$r}.pilot.$whatido? or $shipNothingTodo.{$r}.pilot.$traderNow? or $shipNothingTodo.{$r}.buildmodule.buildanchor.exists)">
							<do_if value="$buildersCount">
								<set_value name="$buildersCount" operation="subtract"/>
							</do_if>
							<do_elseif value="true" chance="if $buildersCount le 0 then 100 else 0">
								<destroy_object object="$shipNothingTodo.{$r}.architect" explosion="false" chance="($shipNothingTodo.{$r}.architect.exists)*100" />
								<set_value name="$shipNothingTodo.{$r}.pilot.$traderNow" />
	
								<set_value name="$plunder" exact="false" />
								<set_value name="$Object" exact="$shipNothingTodo.{$r}" />
								<set_value name="$sectors" exact="$validSectors.clone" />
								<include_actions ref="md.MM_Corps__Data.MMCData_ship_job" />
								<remove_value name="$shipNothingTodo.{$r}"/>
							</do_elseif>
						</do_if>
					</do_all>
<set_value name="$text2" exact="'new n:%1 \n'.[$shipNothingTodo.count]" operation="add" />
					<remove_value name="$buildersCount"/>
				</do_elseif>

				<!-- TODO tactical stuff -->
				<do_if value="$_CEO.$style == 'pirate' and $tmpConfig.$plunderPatrol and $validCluster? and $shipDoPlunder? and $validCluster.count and $shipDoPlunder.count lt ($tmpConfig.$plunderPatrol * $validCluster.count) and (not $nextShoppingTrip2? or ($nextShoppingTrip2? and $nextShoppingTrip2 lt player.age))" chance="if $_CEO.money gt $tmpConfig.$minBuildSpecial then 100 else 0">
					<find_station name="$tmp_stations" space="player.galaxy" functional="true" multiple="true" recursive="true" chance="if not ($tmp_stations? and $tmp_stations.count) then 100 else 0">
						<match owner="$_faction"/>
					</find_station>
					<set_value name="$homebase" exact="null"/>
					<do_all exact="$tmp_stations.count" counter="$r" reverse="true">
						<do_if value="$tmp_stations.{$r}.tradewares.list.count + $tmp_stations.{$r}.resources.list.count" negate="true">
							<continue />
						</do_if>

						<set_value name="$homebase" exact="$tmp_stations.{$r}"/>
						<do_if value="$homebase.exists">
							<break />
						</do_if>
					</do_all>

					<do_if value="global.$factionCEOs.{'$' + faction.deepwater.id}? and global.$factionCEOs.{'$' + faction.deepwater.id}.$freeShips? and global.$factionCEOs.{'$' + faction.deepwater.id}.$freeShips.count" chance="if $homebase.exists then 100 else 0">
						<signal_objects object="global.$factionCEOs.{'$' + faction.deepwater.id}" param="'ORDER.SHIP'" param2="[$_faction, $_CEO, $homebase]"/>
					</do_if>
					<remove_value name="$homebase"/>
					<set_value name="$nextShoppingTrip2" exact="if $next_Check? and $next_Check.{2} then player.age + $next_Check.{2} else player.age + 180min"/>
				</do_if>
				

				<!-- TODO diplomatic stuff -->
				<do_if value="not $nextDonationCheck? or ($nextDonationCheck? and $nextDonationCheck lt player.age)" chance="if $_CEO.$style != 'cooperative' then 100 else 0">
					<include_actions ref="md.MM_Corps__Data.MMCData_doworker_include_donation" />
					<set_value name="$nextDonationCheck" exact="if $next_Check? and $next_Check.{5} then player.age + $next_Check.{5} else player.age + 12h" />
				</do_if>

				<!-- Smallships for Stations -->
				<do_if value="not $ships4StationsCheck? or ($ships4StationsCheck? and $ships4StationsCheck lt player.age)" chance="if $_CEO.money gt $tmpConfig.$minBuyShip then 100 else 0">
					<set_value name="$faction" exact="$_faction"/>
					<include_actions ref="md.MM_Corps__Data.MMCData_do_station_ships" />
					<set_value name="$ships4StationsCheck" exact="if $next_Check? and $next_Check.{5} then player.age + $next_Check.{5} else player.age + 12h" />
				</do_if>

				<do_if value="not $nextRelationCheck? or ($nextRelationCheck? and $nextRelationCheck lt player.age)" chance="0">
					<!-- TODO print relations -->
					<set_value name="$nextRelationCheck" exact="if $next_Check? and $next_Check.{5} then player.age + $next_Check.{5} else player.age + 12h" />
				</do_if>

				<!-- ECONOMY SUPPORT: order ware to build ships if required -->
				<do_if value="not $nextSYcheck? or ($nextSYcheck? and $nextSYcheck lt player.age)" chance="if $tmpConfig? and not $tmpConfig.$cheat? and not $tmpConfig.$cheatNPC? then 100 else 0">
					<find_station name="$temp_Objects" space="player.galaxy" functional="true" multiple="true">
						<match_content class="class.buildmodule" />
						<match owner="$_faction"/>
					</find_station>
					<do_if value="$_CEO.$isInvader?">
						<set_value name="$tmpMax"/>
					</do_if>
					<include_actions ref="md.MM_Corps__Data.MMCData_do_cheatressources" />
					<set_value name="$nextSYcheck" exact="if $next_Check? and @$next_Check.{6} then player.age + $next_Check.{6} else player.age + 3h" />
				</do_if>

				<!-- nothing left? -->
				<do_if value="$_CEO.money lt 20000000Cr">
					<!-- not even friends? -->
					<do_if value="$_CEO.money le 10Cr">
						<set_value name="$noBelongings" exact="'outofbusiness'"/>
						<set_value name="$faction" exact="$_faction" />
						<set_value name="$all" />
						<include_actions ref="md.MM_Corps__Data.MMCData_disable_jobs" />
					</do_if>
					<do_elseif value="not $noBelongings?">
						<!-- get fresh money -->
						<include_actions ref="md.MM_Corps__Data.MMCData_doworker_include_corp_future" />
					</do_elseif>
					<do_else>
						<set_value name="$noBelongings" exact="$style.{2}"/>
					</do_else>
				</do_if>
				<do_elseif value="$_CEO.money gt 10000000000Cr and ($_CEO.$style != 'domination' or @$noBelongings == 'domination')">
					<set_value name="$noBelongings" exact="'domination'"/>
				</do_elseif>
				<do_else>
					<remove_value name="$noBelongings"/>
				</do_else>

<set_value name="$text2" exact="if $text3 then $text3 else ''" operation="add" />
<debug_text text="'\n#############\n# CEO: %1 Cr [%2] \n'.[$_CEO.money.formatted.default, $_CEO.$style] + $text2 + '\n#\n#############'" filter="scripts_verbose" chance="0" />
<remove_value name="$text2"/>
<remove_value name="$text3"/>
				<!-- predefine special jobs -->
				<do_if value="$tmp_jobs.count">
					<set_value name="$_CEO.$JOBS" exact="$tmp_jobs.clone"/>
				</do_if>
				<do_if value="$validZones? and $validZones.count">
					<set_value name="$_CEO.$JOB_SPACES" exact="$validZones.clone"/>
				</do_if>
				<!-- Statusupdates -->
				<do_if value="player.age ge 2h and (not $nextCEOupdate? or ($nextCEOupdate? and $nextCEOupdate lt player.age))">
					<include_actions ref="md.MM_Corps__Data.MMCData_CEO_status" />
					<set_value name="$nextCEOupdate" exact="player.age + 6h" />
				</do_if>
				<!-- clear -->
				<remove_value name="$CEO"/>
				<remove_value name="$_CEO"/>
				<remove_value name="$build"/>
				<remove_value name="$build2"/>
				<remove_value name="$Builders"/>
				<remove_value name="$BuildLocation"/>
				<remove_value name="$CVShip"/>
				<remove_value name="$faction"/>
				<remove_value name="$_faction"/>
				<remove_value name="$Object"/>
				<remove_value name="$plunder"/>
				<remove_value name="$stationwiki"/>
				<remove_value name="$stationToBuild"/>
				<remove_value name="$Ships"/>
				<remove_value name="$special_musthave"/>
				<remove_value name="$shipNothingTodo"/>
				<remove_value name="$shipDoUnknown"/>
				<remove_value name="$shipDoBuild"/>
				<remove_value name="$shipDoTrade"/>
				<remove_value name="$shipDoMine"/>
				<remove_value name="$shipDoPatrol"/>
				<remove_value name="$shipDoPlunder"/>
				<remove_value name="$shipDoEscort"/>
				<remove_value name="$shipDoStationSupport"/>
				<remove_value name="$tmpConfig"/>
				<remove_value name="$tmp_stations"/>
				<remove_value name="$tmp_jobs"/>
				<remove_value name="$validCluster"/>
				<remove_value name="$validSectors"/>
				<remove_value name="$validZones"/>
				<remove_value name="$validZonesCore"/>
				<remove_value name="$validZonesHotZone"/>
				<remove_value name="$zone"/>
				<debug_text chance="0" text="'end'" />
			</actions>
		</library>

		<!-- 
		<set_value name="$_CEO" exact="null"/>
		<set_value name="$shipNothingTodo" exact="[]"/>
		<include_actions ref="md.MM_Corps__Data.MMCData_ship_sell" />
		-->
		<library name="MMCData_ship_sell">
			<actions>
				<create_list name="$noBuyer" />
				<do_all exact="$shipNothingTodo.count" counter="$r" reverse="true">
					<do_if value="$noBuyer.indexof.{$shipNothingTodo.{$r}.cluster} or $shipNothingTodo.{$r}.value lt 500000Cr or ($shipNothingTodo.{$r}.primarypurpose == objectpurpose.build and not ($shipNothingTodo.{$r}.pilot.$whatido? or $shipNothingTodo.{$r}.buildmodule.buildanchor.exists))">
						<continue />
					</do_if>

					<find_station name="$temp_stations" space="$shipNothingTodo.{$r}.cluster" functional="true" multiple="true">
						<match owner="$_faction" negate="true"/>
						<match owner="faction.enemy" negate="true"/>
						<match owner="faction.criminal" negate="true"/>
						<match owner="faction.smuggler" negate="true"/>
						<match owner="faction.neutral" negate="true"/>
						<match owner="faction.ownerless" negate="true"/>
						<match owner="faction.player" negate="true"/>
						<match owner="faction.friend" negate="true"/>
						<match_relation faction="$_faction"  relation="neutral" comparison="ge"/>
					</find_station>
					<do_all exact="$temp_stations.count" counter="$s" reverse="true">
						<do_if value="not global.$factionCEOs.{'$' + $temp_stations.{$s}.owner.id}? or global.$factionCEOs.{'$' + $temp_stations.{$s}.owner.id}? and $temp_stations.{$s}.tradenpc.money gt $tmpConfig.$minBuild" negate="true">
							<remove_value name="$temp_stations.{$s}"/>
						</do_if>
					</do_all>
					<do_if value="$temp_stations.count" negate="true">
						<append_to_list name="$noBuyer" exact="$shipNothingTodo.{$r}.cluster" />
						<continue />
					</do_if>

					<set_value name="$temp_station" exact="$temp_stations.random"/>
					<do_if value="$temp_station.exists and $temp_station.tradenpc.exists and $temp_station.tradenpc.money gt $tmpConfig.$minBuild and $temp_station.tradenpc.money gt $shipNothingTodo.{$r}.value">
						<remove_actor_account actor="$shipNothingTodo.{$r}.architect" transfer="true" chance="if $shipNothingTodo.{$r}.architect then 100 else 0"/>
						<remove_actor_account actor="$shipNothingTodo.{$r}.pilot" transfer="true" chance="if $shipNothingTodo.{$r}.pilot then 100 else 0"/>

						<set_value name="$actor" exact="$temp_station.tradenpc"/>
						<set_value name="$soldship2" exact="$shipNothingTodo.{$r}"/>
						<set_value name="$price" exact="$shipNothingTodo.{$r}.value"/>

						<include_actions ref="md.NPC_Shiptrader.SellShipActions" />
				
						<transfer_money from="$actor" to="$_CEO" amount="$price" />
				
						<remove_value name="$price"/>
						<remove_value name="$actor"/>
						<remove_value name="$soldship2"/>
						<remove_value name="$shipNothingTodo.{$r}"/>
					</do_if>
					<remove_value name="$temp_station"/>
				</do_all>
				<remove_value name="$temp_stations"/>
				<remove_value name="$noBuyer"/>
			</actions>
		</library>
		<!-- 
		* $tmpConfig
		* $_CEO
		<set_value name="$build" exact="['al' ]" comment="optional // ['al','ol','xen','tel','spl','pir']"/>
		<include_actions ref="md.MM_Corps__Data.MMCData_doworker_include_buyships" />
		-->
		<library name="MMCData_doworker_include_buyships">
			<actions>
				<create_list name="$requiredUnits"/>
				<do_if value="$validCluster?" negate="true">
					<set_value name="$faction" exact="$_faction" />
					<include_actions ref="md.MM_Corps__Data.MMCData_find_space" />
				</do_if>
				<do_if value="$shipDoBuild?" negate="true">
					<set_value name="$faction" exact="$_faction" />
					<include_actions ref="md.MM_Corps__Data.MMCData_find_ships" />
				</do_if>

				<do_if value="$shipDoBuild.count lt $tmpConfig.$max_builders">
					<do_all exact="$shipNothingTodo.count" counter="$r" chance="($shipNothingTodo?)*100">
						<do_if value="$shipNothingTodo.{$r}.primarypurpose == objectpurpose.build">
							<set_value name="$skipbuild" />
							<break />
						</do_if>
					</do_all>

					<do_all exact="$tmpConfig.$max_builders - $shipDoBuild.count" chance="if not $skipbuild? and global.$nfconfig.$doBuildSt and $_CEO.money gt $tmpConfig.$minBuild then 100 else 0">
						<append_to_list name="$requiredUnits" exact="'build'"/>
					</do_all>
					<remove_value name="$skipbuild"/>
				</do_if>
				<do_if value="$shipDoTrade.count lt ($tmpConfig.$traderCluster * $validCluster.count)" chance="if $_CEO.$style != 'pirate' or $_CEO.money gt $tmpConfig.$minBuyShipTop then 100 else 0">
					<do_all exact="($tmpConfig.$traderCluster * $validCluster.count) - $shipDoTrade.count">
						<append_to_list name="$requiredUnits" exact="'trade'"/>
					</do_all>
				</do_if>
				<do_if value="$shipDoMine.count lt ($tmpConfig.$minerCluster * $validCluster.count)" chance="if $_CEO.$style != 'pirate' or $_CEO.money gt $tmpConfig.$minBuyShipTop then 100 else 0">
					<do_all exact="($tmpConfig.$minerCluster * $validCluster.count) - $shipDoMine.count">
						<append_to_list name="$requiredUnits" exact="'mine'"/>
					</do_all>
				</do_if>
				<do_if value="$shipDoPlunder.count lt ($tmpConfig.$plunderPatrol * $validCluster.count)" chance="if $_CEO.$style == 'pirate' or $_CEO.money gt $tmpConfig.$minBuyShipTop then 100 else 0">
					<do_all exact="($tmpConfig.$plunderPatrol * $validCluster.count) - $shipDoPlunder.count">
						<append_to_list name="$requiredUnits" exact="'trade'"/>
					</do_all>
				</do_if>
				<set_value name="$tmp" exact="0"/>

				<set_value name="$tmp" exact="$tmpConfig.$clusterPatrol * $validCluster.count" operation="add"/>
				<set_value name="$tmp" exact="$tmpConfig.$plunderPatrol * $validCluster.count" operation="add"/>
				<set_value name="$tmp" exact="$tmpConfig.$sectorPatrol * $validSectors.count" operation="add"/>
				<set_value name="$tmp" exact="$tmpConfig.$zonePatrol * $validZonesCore.count" operation="add"/>
				<set_value name="$tmp" exact="$tmpConfig.$stationPatrol * $tmp_stations.count" operation="add" chance="0"/>
				<set_value name="$tmp" exact="$tmpConfig.$stationPatrol * $validZonesCore.count" operation="add" comment="route patrol"/>
				<set_value name="$tmp" exact="$tmp * $tmpConfig.$patrolEscorts" operation="add"/>
				<set_value name="$tmp" exact="$tmpConfig.$fleets + ($tmpConfig.$fleets * $tmpConfig.$patrolEscorts)" operation="add" comment="TODO improve fleet"/>
				<set_value name="$tmp" exact="$tmpConfig.$scouts" operation="add"/>

				<set_value name="$tmpSum" exact="$shipDoPatrol.count + $shipDoPlunder.count + $shipDoEscort.count"/>

				<do_if value="$_CEO.$style == 'domination'" chance="0" comment="$tmpConfig.$cheat">
					<do_all exact="$tmp - $tmpSum">
						<set_value name="$faction" exact="$_faction" />
						<set_value name="$ref" exact="if $tmpConfig.$ships.$fight.count then $tmpConfig.$ships.$fight.random else [macro.units_size_xl_capital_destroyer_2_macro, macro.units_size_xl_capital_destroyer_1_macro].random"/>
						<set_value name="$spawnZone" exact="$validZonesCore.random" />
						<set_value name="$clearAll" />
						<include_actions ref="md.MM_Corps__Data.MMCData_ship_spawner" />

						<start_script object="$createdShip.pilot" name="'move.shipjobs'">
							<param name="run_script_name" value="'move.idle'"/>
							<param name="run_script_param" value="[['TimeOut', 5min]]"/>
						</start_script>
						<remove_value name="$createdShip"/>
					</do_all>
				</do_if>
				<do_else>
					<do_if value="$tmpSum lt $tmp" chance="if $_CEO.money gt $tmpConfig.$minBuyShipTop then 100 else 0">
						<set_value name="$chance" exact="
														if $_CEO.$style == 'cooperative' and $requiredUnits.count then 30 else
														if $_CEO.$style == 'pirate' and $requiredUnits.count then 40 else 
														100"/>
						<do_all exact="$tmp - $tmpSum">
							<append_to_list name="$requiredUnits" exact="'fight'" chance="$chance"/>
						</do_all>
					</do_if>
				</do_else>
				<remove_value name="$tmp"/>
				<remove_value name="$tmpSum"/>
				<remove_value name="$chance"/>

				<do_if value="$shipNothingTodo.count or $shipDoUnknown.count">
					<do_all exact="$shipNothingTodo.count" counter="$r">
						<do_if value="$shipNothingTodo.{$r}.primarypurpose" negate="true">
							<continue />
						</do_if>
						<do_all exact="$requiredUnits.count" counter="$s" reverse="true">
							<do_if value="objectpurpose.{$requiredUnits.{$s}} == $shipNothingTodo.{$r}.primarypurpose">
								<remove_value name="$requiredUnits.{$s}"/>
								<break />
							</do_if>
						</do_all>
					</do_all>
				</do_if>
			</actions>
		</library>

		<!-- 
		* $tmpConfig
		* $_CEO
		<set_value name="$build" exact="['al','massenergy','energy','food','drug','tech','ship']" comment="['massenergy','energy','food','drug','tech','ship','shipparts','al','ol','xen','tel','spl','pir','warehouse','outpost']"/>
		<set_value name="$build2" exact="['al','massenergy','energy','food','drug','tech','ship']" comment="['massenergy','energy','food','drug','tech','ship','shipparts','al','ol','xen','tel','spl','pir','warehouse','outpost']"/>
		<set_value name="$special_musthave" exact="[macro. , macro.]" comment="optional"/>
		<include_actions ref="md.MM_Corps__Data.MMCData_doworker_include_build" />
		-->
		<library name="MMCData_doworker_include_build">
			<actions>
				<set_value name="$buildOutpost" exact="false"/>
				<do_if value="$build2?" negate="true">
					<create_list name="$build2" />
				</do_if>
				<find_station name="$tmp_stations" space="player.galaxy" functional="true" multiple="true" recursive="true">
					<match owner="$_faction"/>
				</find_station>
				<set_value name="$tempC" exact="if $special_musthave? then 100 else 0"/>

				<do_all exact="$tmp_stations.count" counter="$r">
					<do_if value="$tmpConfig.$build.indexof.{macro.{$tmp_stations.{$r}.macro.id}}">
						<remove_value name="$tmpConfig.$build.{$tmpConfig.$build.indexof.{macro.{$tmp_stations.{$r}.macro.id}}}"/>
					</do_if>
					<do_if value="$special_musthave.indexof.{macro.{$tmp_stations.{$r}.macro.id}}" chance="$tempC">
						<do_if value="not $special_musthave_sy and ($tmp_stations.{$r}.canbuildships or $tmp_stations.{$r}.canproduceships)">
							<set_value name="$special_musthave_sy" exact="$tmp_stations.{$r}.macro"/>
						</do_if>
						<remove_value name="$special_musthave.{$special_musthave.indexof.{macro.{$tmp_stations.{$r}.macro.id}}}"/>
					</do_if>
				</do_all>

				<remove_value name="$tempC"/>
				<do_if value="$special_musthave? and $special_musthave.count" chance="if $_CEO.money gt $tmpConfig.$minBuildSpecial then 100 else 0">
					<find_ship name="$Builders" primarypurpose="objectpurpose.build" owner="$_faction" space="player.galaxy" multiple="true" chance="if $Builders? then 0 else 100"/>
					<do_all exact="$Builders.count" counter="$x"> 
						<do_if value="$Builders.{$x}.pilot.$param? and $Builders.{$x}.pilot.$params.$macro? and $Builders.{$x}.pilot.$params.$macro"> 
							<do_if value="$special_musthave.indexof.{macro.{$Builders.{$x}.pilot.$params.$macro.id}}">
								<remove_value name="$special_musthave.{$special_musthave.indexof.{macro.{$Builders.{$x}.pilot.$params.$macro.id}}}"/>
							</do_if>
							<do_if value="$tmpConfig.$build.indexof.{macro.{$Builders.{$x}.pilot.$params.$macro.id}}">
								<remove_value name="$tmpConfig.$build.{$tmpConfig.$build.indexof.{macro.{$Builders.{$x}.pilot.$params.$macro.id}}}"/>
							</do_if>
						</do_if> 
					</do_all>
				</do_if>

				<do_if value="$_CEO.$isInvader? and $special_musthave_sy and $special_musthave.count == 0 and typeof $special_musthave_sy == datatype.macro" chance="if $_CEO.money gt 1000000000Cr then 100 else 0">
					<do_if value="$validCluster?" negate="true">
						<set_value name="$faction" exact="$_faction" />
						<include_actions ref="md.MM_Corps__Data.MMCData_find_space" />
					</do_if>
					<do_all exact="$validCluster.count" counter="$x" chance="($validCluster.count gt 1)*100"> 
						<find_station name="$tmp_stations" space="$validCluster.{$x}" functional="true" multiple="true" recursive="true">
							<match owner="$_faction"/>
							<match_content class="class.buildmodule" />
						</find_station>
						<do_if value="$tmp_stations and $tmp_stations.count">
							<continue />
						</do_if>
						<find_sector name="$tmp_sectors" space="$validCluster.{$x}" multiple="true" />
						<do_all exact="$tmp_sectors.count" counter="$y"> 
							<find_zone name="$tmp_zones" space="$tmp_sectors.{$y}" tempzone="false" mapzone="true" multiple="true" min="4">
								<match class="class.highway" negate="true"/>
								<match owner="$_faction"/>
							</find_zone>
							<do_if value="$tmp_zones and $tmp_zones.count ge 4">
								<set_value name="$zone_m1" exact="$tmp_zones.random"/>
								<set_value name="$zone_m2" exact="null"/>
								<do_all exact="$tmp_zones.count" counter="$z"> 
									<do_if value="$zone_m1 != $tmp_zones.{$z} and $tmp_zones.{$z}.adjacentzones.indexof.{$zone_m1}">
										<set_value name="$buildZone" exact="$zone_m1"/>
									</do_if>
									<do_elseif value="not $zone_m2 and $zone_m1 != $tmp_zones.{$z}">
										<set_value name="$zone_m2" exact="$tmp_zones.{$z}"/>
									</do_elseif>
									<do_elseif value="$zone_m2 != $tmp_zones.{$z} and $tmp_zones.{$z}.adjacentzones.indexof.{$zone_m2}">
										<set_value name="$buildZone" exact="$zone_m2"/>
									</do_elseif>
									<do_if value="$buildZone? and $buildZone">
										<set_value name="$stationToBuild" exact="$special_musthave_sy"/>
										<break />
									</do_if>
								</do_all>
								<do_if value="$buildZone? and $buildZone and $stationToBuild">
									<break />
								</do_if>
								<do_elseif value="$zone_m1? and $zone_m1 and $special_musthave_sy" chance="33">
									<set_value name="$stationToBuild" exact="$special_musthave_sy"/>
									<set_value name="$buildZone" exact="if $zone_m2 then $zone_m2 else $zone_m1"/>
									<break />
								</do_elseif>
							</do_if>
						</do_all>
						<do_if value="$buildZone? and $buildZone and $stationToBuild">
							<break />
						</do_if>
					</do_all>
					<remove_value name="$tmp_stations"/>
					<remove_value name="$tmp_sectors"/>
					<remove_value name="$tmp_zones"/>
					<remove_value name="$zone_m2"/>
					<remove_value name="$zone_m1"/>
				</do_if>
				<remove_value name="$special_musthave_sy"/>

				<do_if value="$tmpConfig.$build.count">
					<!--set_value name="$stationToBuild" exact="$tmpConfig.$build.random"/-->
				</do_if>
				<do_elseif value="$tmpConfig.$build.count == 0" chance="if $_CEO.$style == 'domination' then 100 else 0">
					<do_if value="$build2? and typeof $build2 == datatype.list" negate="true">
						<create_list name="$build2" />
					</do_if>

					<do_if value="$build2.count" exact="0">
						<set_value name="$buildOutpost" exact="true"/>
					</do_if>
					
					<do_if value="$build.indexof.{'ol'}">
						<append_to_list name="$build2" exact="'ol'"/>
					</do_if>
					<do_if value="$build.indexof.{'al'}">
						<append_to_list name="$build2" exact="'al'"/>
					</do_if>
					<do_if value="$build.indexof.{'xen'}">
						<append_to_list name="$build2" exact="'xen'"/>
					</do_if>
					<do_if value="$build.indexof.{'tel'}">
						<append_to_list name="$build2" exact="'tel'"/>
					</do_if>
					<do_if value="$build.indexof.{'spl'}">
						<append_to_list name="$build2" exact="'spl'"/>
					</do_if>

					<do_if value="$build2.count == 0">
						<append_to_list name="$build2" exact="'al'"/>
					</do_if>

					<append_to_list name="$build2" exact="'outpost'"/>
					<set_value name="$build" exact="$build2"/>

					<include_actions ref="md.MM_Corps__Data.MMCData_config" />

				</do_elseif>
				<do_elseif value="$build2? and $build2.count" chance="if $_CEO.$style != 'domination' then 100 else 0">
					<set_value name="$build" exact="$build2"/>

					<include_actions ref="md.MM_Corps__Data.MMCData_config" />

				</do_elseif>
				<do_elseif value="$_CEO.$style == 'cooperative'">
					<create_list name="$build2" />
					<do_if value="$build.indexof.{'ol'}">
						<append_to_list name="$build2" exact="'ol'"/>
					</do_if>
					<do_if value="$build.indexof.{'al'}">
						<append_to_list name="$build2" exact="'al'"/>
					</do_if>
					<do_if value="$build.indexof.{'xen'}">
						<append_to_list name="$build2" exact="'xen'"/>
					</do_if>
					<do_if value="$build.indexof.{'tel'}">
						<append_to_list name="$build2" exact="'tel'"/>
					</do_if>
					<do_if value="$build.indexof.{'spl'}">
						<append_to_list name="$build2" exact="'spl'"/>
					</do_if>

					<do_if value="$build2.count == 0">
						<append_to_list name="$build2" exact="'al'"/>
					</do_if>

					<do_if value="$build.indexof.{'tech'} or $build.indexof.{'ship'} or $build.indexof.{'shippart'}" chance="75">
						<set_value name="$build2" exact="$build"/>
					</do_if>
					<do_else>
						<do_any>
							<append_to_list name="$build2" exact="'massenergy'" weight="20"/>
							<append_to_list name="$build2" exact="'energy'" weight="20"/>
							<append_to_list name="$build2" exact="'food'" weight="30"/>
							<append_to_list name="$build2" exact="'drug'" weight="30"/>
						</do_any>
					</do_else>
			
					<set_value name="$build" exact="$build2"/>

					<include_actions ref="md.MM_Corps__Data.MMCData_config" />

				</do_elseif>
<set_value name="$text3" exact="'\n** Build: Stations reg:%1 sp:%2 - '.[$tmpConfig.$build.count, @$special_musthave.count]" operation="add" />

				<do_if value="$stationToBuild and $buildZone? and $buildZone" chance="if $_CEO.money gt 1000000000Cr then 100 else 0">
					<do_if value="$special_musthave.indexof.{macro.{$stationToBuild.id}}" negate="true">
						<append_to_list name="$special_musthave" exact="$stationToBuild"/>
					</do_if>
					<include_actions ref="md.MM_Corps__Data.MMCData_do_buildstations" />
				</do_if>
				<do_elseif value="$special_musthave? and $special_musthave.count" chance="if $_CEO.money gt $tmpConfig.$minBuildSpecial then 100 else 0">
					<include_actions ref="md.MM_Corps__Data.MMCData_do_buildstations" />
				</do_elseif>
				<do_elseif value="$tmpConfig.$build.count">
					<remove_value name="$special_musthave"/>
					<set_value name="$regular" />
					<include_actions ref="md.MM_Corps__Data.MMCData_do_buildstations" />
				</do_elseif>

				<do_if value="$regular? and not @$stationToBuild" chance="($_CEO.$isInvader? and $_CEO.money gt 1000000000Cr) *100">
					<remove_value name="$regular"/>
					<remove_value name="$build2"/>
					<create_list name="$build2"/>
					<do_if value="$build.indexof.{'ol'}">
						<append_to_list name="$build2" exact="'ol'"/>
					</do_if>
					<do_if value="$build.indexof.{'al'}">
						<append_to_list name="$build2" exact="'al'"/>
					</do_if>
					<do_if value="$build.indexof.{'xen'}">
						<append_to_list name="$build2" exact="'xen'"/>
					</do_if>
					<do_if value="$build.indexof.{'tel'}">
						<append_to_list name="$build2" exact="'tel'"/>
					</do_if>
					<do_if value="$build.indexof.{'spl'}">
						<append_to_list name="$build2" exact="'spl'"/>
					</do_if>

					<do_if value="$build2.count == 0">
						<append_to_list name="$build2" exact="'al'"/>
					</do_if>

					<append_to_list name="$build2" exact="'outpost'"/>
					<set_value name="$build" exact="$build2"/>

					<include_actions ref="md.MM_Corps__Data.MMCData_config" />

					<do_if value="$tmpConfig.$build.count">
						<set_value name="$buildOutpost" exact="true"/>
						<include_actions ref="md.MM_Corps__Data.MMCData_do_buildstations" />
					</do_if>
				</do_if>
				<remove_value name="$buildZone"/>
			</actions>
		</library>
		<!-- 
		* $tmpConfig
		* $_CEO.$style
		<set_value name="$_CEO" exact="global.$corp_CEO" />
		<set_value name="$stationToBuild" exact="$stationmacro"/>
		<set_value name="$_faction" exact="faction.player" />
		<include_actions ref="md.MM_Corps__Data.MMCData_do_buildstations" />
		-->
		<library name="MMCData_do_buildstations">
			<actions>
				<do_if value="$buildZone? and $buildZone">
					<find_ship name="$Builders" primarypurpose="objectpurpose.build" owner="$_faction" space="$buildZone.cluster" multiple="true"/>
				</do_if>
				<find_ship name="$Builders" primarypurpose="objectpurpose.build" owner="$_faction" space="player.galaxy" multiple="true" chance="if $Builders? then 0 else 100"/>

				<set_value name="$CVShip" exact="null"/>
				<set_value name="$zone" exact="null"/>
				<do_all exact="$Builders.count" counter="$x"> 
					<do_if value="$Builders.{$x}.pilot.$traderNow? and not $Builders.{$x}.architect"> 
						<continue />
					</do_if> 
					<do_elseif value="
						$Builders.{$x}.pilot.command.value == null and 
						$Builders.{$x}.pilot.$free4newjob? and $Builders.{$x}.pilot.$free4newjob lt player.age and 
						not (@$Builders.{$x}.buildmodule.buildanchor.exists) and 
						not (@$Builders.{$x}.container.exists) and 
						$Builders.{$x}.architect.exists
						and not $Builders.{$x}.architect.$atWork?
						"> 
						<set_value name="$CVShip" exact="$Builders.{$x}"/>
						<break />
					</do_elseif> 
					<do_elseif value="
						$Builders.{$x}.pilot.command.value == null and 
						not $Builders.{$x}.pilot.$free4newjob? and 
						not (@$Builders.{$x}.buildmodule.buildanchor.exists) and 
						not (@$Builders.{$x}.container.exists) and 
						$Builders.{$x}.architect.exists
						and not $Builders.{$x}.architect.$atWork?
						"> 
						<set_value name="$CVShip" exact="$Builders.{$x}"/>
					</do_elseif> 
					<do_elseif value="$Builders.{$x}.architect and $Builders.{$x}.architect.exists" negate="true" chance="if $Builders.{$x}.isclass.[class.ship_l, class.ship_xl] then 100 else 0"> 
						<find_dock_location name="$temp_dock" container="$Builders.{$x}" size="tag.dock_p"/>
						<set_value name="$temp_select" exact="[null, race.argon, tag.architect, null, null]" />
						<set_value name="$temp_object" exact="$Builders.{$x}" />
						<set_value name="$temp_entitytype" exact="entitytype.architect" />
						<set_value name="$temp_Skill" exact="true" />
						<set_value name="$temp_assign" exact="'architect'"/>
						<include_actions ref="md.NF_BASE.NF_create_actor" />
						<remove_value name="$newActor"/>
					</do_elseif> 
				</do_all>
		
				<do_if value="$CVShip.exists">
					<set_value name="$object" exact="$CVShip"/>
				</do_if>

				<do_if value="$buildZone? and $buildZone">
					<set_value name="$temp_zone" exact="$buildZone"/>
					<include_actions ref="md.MM_Corps__Data.MMCData_do_validfreebuildspots" />
					<set_value name="$BuildLocation" exact="$temp_buildspots.random"/>
					<remove_value name="$temp_buildspots"/>
					<do_if value="$BuildLocation">
						<set_value name="$zone" exact="$buildZone"/>
					</do_if>
					<do_else>
						<find_zone name="$temp_validZones" space="$buildZone.sector" tempzone="false" mapzone="true" multiple="true">
							<match class="class.highway" negate="true"/>
							<match owner="$_faction"/>
						</find_zone>
						<include_actions ref="md.MM_Corps__Data.MMCData_do_findbuildzone" />
					</do_else>
				</do_if>
				<do_else>
					<set_value name="$faction" exact="$_faction"/>
					<set_value name="$fallback" exact="if $Builders.count == 0 then true else false"/>
					<include_actions ref="md.MM_Corps__Data.MMCData_find_space" />
					<set_value name="$temp_validZones" exact="$validZones.clone"/>
					<include_actions ref="md.MM_Corps__Data.MMCData_do_findbuildzone" />
				</do_else>
		
				<do_if value="$zone and not @$stationToBuild">
					<do_if value="$buildOutpost" negate="true">
						<set_value name="$doNotSimple"/>
						<set_value name="$searchReq" chance="if $_CEO.$style == 'cooperative' then 100 else 0"/>
					</do_if>
					<include_actions ref="md.MM_Corps__Data.MMCData_do_selectstation" />
				</do_if>

				<do_if value="$zone and not @$buildZone">
					<set_value name="$buildZone" exact="$zone"/>
				</do_if>

				<do_if value="$stationToBuild? and $stationToBuild and ((not $buildZone and $zone) or (@$buildZone and $buildZone.cluster == $zone.cluster))">
					<set_value name="$cheatquote" exact="if $tmpConfig.$cheat? or $tmpConfig.$cheatNPC? or $buildOutpost then 100 else 50"/>
					<set_value name="$cheatall" exact="if $tmpConfig.$cheat? or $buildOutpost then 100 else 0"/>
					<set_value name="$cheatquote" exact="if $special_musthave? and $special_musthave.indexof.{$stationToBuild} then 100 else $cheatquote"/>
					<set_value name="$cheatall" exact="if $special_musthave? and $special_musthave.indexof.{$stationToBuild} then 100 else $cheatall"/>
					<do_if value="$zone and $CVShip.exists">
						<signal_cue_instantly cue="md.MM_Corps__Station_Const.MMCStationConst_MoveBuild_bridge" param="[$CVShip, $CVShip.buildmodule, $CVShip.architect, $BuildLocation, $stationToBuild, $zone, $cheatquote, $cheatall, false, false, $_CEO]"/>
					</do_if>
					<do_elseif value="$zone and $Builders.count lt $tmpConfig.$max_builders">
						<set_value name="$cvtype" exact="if $tmpConfig.$ships? and $tmpConfig.$ships.$build.count then $tmpConfig.$ships.$build.random else null"/>
						<signal_cue_instantly cue="md.MM_Corps__Station_Const.MMCStationConst" param="[$zone, $stationToBuild, $_faction, $cheatquote, $cheatall, $cvtype, null, true, $_CEO]"/>
						<remove_value name="$cheatall"/>
					</do_elseif>
					<do_else>
						<remove_value name="$stationToBuild"/>
					</do_else>
					<remove_value name="$cheatquote"/>
					<remove_value name="$cheatall"/>
				</do_if>
				<do_else>
					<remove_value name="$stationToBuild"/>
				</do_else>

				<remove_value name="$buildOutpost"/>
			</actions>
		</library>
		<!-- 
		* $_CEO.$style
		<set_value name="$temp_validZones" exact="$validZones.clone" comment="optional"/>
		<set_value name="$validZones" exact="[]"  comment="optional"/>
		<set_value name="$validSectors" exact="[]"  comment="optional"/>
		<set_value name="$object" exact="$CVShip"  comment="optional"/>
		<set_value name="$_faction" exact="faction.player" />
		<set_value name="$zone" exact="null" />
		<include_actions ref="md.MM_Corps__Data.MMCData_do_findbuildzone" />
		<remove_value name="$BuildLocation"/>
		-->
		<library name="MMCData_do_findbuildzone">
			<actions>
				<set_value name="$BuildLocation" exact="null"/>
				<do_if value="$object? and $object.exists and not ($temp_validZones? and $temp_validZones.count)">
					<set_value name="$temp_validZones" exact="$object.adjacentzones.clone"/>
					<append_to_list name="$temp_validZones" exact="$object.zone"/>
					<do_all exact="$temp_validZones.count" counter="$x" reverse="true"> 
						<do_if value="not $temp_validZones.{$x}.owner or $temp_validZones.{$x}.owner and $temp_validZones.{$x}.owner.relationto.{$_faction} gt $_faction.relation.enemy.min">
							<find_object name="$temp_object" space="$temp_validZones.{$x}" class="[class.gate, class.highwayentrygate]" multiple="true"/>
							<do_all exact="$temp_object.count" counter="$y">
								<do_if value="$temp_object.{$y}.exists and $temp_object.{$y}.destination" negate="true">
									<continue />
								</do_if>
								<do_if value="$temp_validZones.indexof.{$temp_object.{$y}.destination} == 0">
									<append_to_list name="$temp_validZones" exact="$temp_object.{$y}.destination"/>
								</do_if>
							</do_all>
							<remove_value name="$temp_object"/>
						</do_if>
					</do_all>
				</do_if>
				<do_elseif value="not ($temp_validZones? and $temp_validZones.count) and $validZones? and $validZones.count">
					<set_value name="$temp_validZones" exact="$validZones.clone"/>
				</do_elseif>
				<do_elseif value="not ($temp_validZones? and $temp_validZones.count)">
					<create_list name="$temp_validZones" />
				</do_elseif>
		
				<do_all exact="$temp_validZones.count" counter="$x" reverse="true"> 
					<do_if value="$temp_validZones.{$x}.owner and $temp_validZones.{$x}.owner.relationto.{$_faction} lt $_faction.relation.enemy.min" chance="if $_CEO.$style == 'domination' then 100 else 0">
						<find_station name="$temp_station" space="$temp_validZones.{$x}" multiple="false">
							<match_relation faction="$_faction"  relation="enemy" comparison="le"/>
						</find_station>
						<do_if value="$temp_station">
							<remove_value name="$temp_validZones.{$x}"/>
						</do_if>
						<do_else> 
							<find_ship name="$ZoneEnemyShips" class="[class.ship_xl, class.ship_l]" space="$temp_validZones.{$x}"  multiple="false">
								<match_relation faction="$_faction" relation="enemy" comparison="le"/>
								<match primarypurpose="objectpurpose.trade" negate="true"/>
								<match primarypurpose="objectpurpose.build" negate="true"/>
							</find_ship>
							<do_if value="$ZoneEnemyShips" negate="true">
								<find_ship name="$ZoneMyShips" class="[class.ship_xl, class.ship_l]" space="$temp_validZones.{$x}"  multiple="false">
									<match owner="$_faction"/>
									<match primarypurpose="objectpurpose.trade" negate="true"/>
									<match primarypurpose="objectpurpose.build" negate="true"/>
								</find_ship>
								<do_if value="$ZoneMyShips" negate="true">
									<remove_value name="$temp_validZones.{$x}"/>
								</do_if>
							</do_if>
							<do_else>
								<remove_value name="$temp_validZones.{$x}"/>
							</do_else>
						</do_else>
						<remove_value name="$temp_station"/>
						<remove_value name="$ZoneEnemyShips"/>
						<remove_value name="$ZoneMyShips"/>
					</do_if>

					<do_if value="not $temp_validZones.{$x}.owner or $temp_validZones.{$x}.owner and $temp_validZones.{$x}.owner.relationto.{$_faction} gt $_faction.relation.enemy.min" negate="true" chance="if $_CEO.$style == 'cooperative' then 100 else 0">
						<remove_value name="$temp_validZones.{$x}"/>
					</do_if>
					<do_else>
						<set_value name="$temp_zone" exact="$temp_validZones.{$x}"/>
						<include_actions ref="md.MM_Corps__Data.MMCData_do_validfreebuildspots" />
						<do_if value="$temp_buildspots.count" negate="true">
							<remove_value name="$temp_validZones.{$x}"/>
						</do_if>
						<remove_value name="$temp_buildspots"/>
					</do_else>
				</do_all>

				<do_if value="$temp_validZones.count == 0 and $validSectors? and $validSectors.count">
					<do_all exact="$validSectors.count" counter="$y" reverse="true"> 
						<find_zone name="$temp_validZones" space="$validSectors.{$y}" tempzone="false" mapzone="true" multiple="true">
							<match_relation faction="$_faction" relation="neutral" comparison="ge"/>
						</find_zone>
						<do_all exact="$temp_validZones.count" counter="$x" reverse="true"> 
							<set_value name="$temp_zone" exact="$temp_validZones.{$x}"/>
							<include_actions ref="md.MM_Corps__Data.MMCData_do_validfreebuildspots" />
							<do_if value="$temp_buildspots.count" negate="true">
								<remove_value name="$temp_validZones.{$x}"/>
							</do_if>
							<remove_value name="$temp_buildspots"/>
						</do_all> 
						<do_if value="$temp_validZones.count"> 
							<break />
						</do_if> 
					</do_all> 
				</do_if>

				<do_if value="$buildOutpost? and $buildOutpost and $tmpConfig.$build.count == 1">
					<do_all exact="$temp_validZones.count" counter="$x" reverse="true"> 
						<find_station name="$temp_station" space="$temp_validZones.{$x}" multiple="false">
							<match macro="$tmpConfig.$build.{1}"/>
						</find_station>
						<do_if value="$temp_station">
							<remove_value name="$temp_validZones.{$x}"/>
						</do_if>
						<remove_value name="$temp_station"/>
					</do_all> 
				</do_if>

				<set_value name="$temp_zone" exact="null"/>
				<set_value name="$temp_run" exact="0"/>
				<set_value name="$temp_run" operation="add" chance="if $temp_validZones.count then 100 else 0"/>
				<set_value name="$temp_run" operation="add" chance="if $object? and $object.exists then 100 else 0"/>
				<set_value name="$temp_run" operation="add" chance="if $_CEO.$style != 'cooperative' then 100 else 0"/>
				<set_value name="$doRun" exact="1"/>
				<do_all exact="$temp_run"> 
					<do_if value="$doRun == 1 and not ($object? and $object.exists)"> 
						<set_value name="$doRun" operation="add"/>
					</do_if> 
					<do_all exact="$temp_validZones.count" counter="$x"> 
						<do_if value="not $temp_validZones.{$x}.owner"> 
							<set_value name="$temp_zone" exact="$temp_validZones.{$x}"/>
						</do_if> 
						<do_elseif value="$temp_validZones.{$x}.owner.relationto.{$_faction} lt $_faction.relation.enemy.min" chance="if $doRun == 3 and $_CEO.$style == 'domination' then 100 else 0"> 
							<set_value name="$temp_zone" exact="$temp_validZones.{$x}"/>
						</do_elseif> 
						<do_elseif value="$temp_validZones.{$x}.owner.relationto.{$_faction} gt $_faction.relation.enemy.min" chance="if $_CEO.$style != 'domination' then 100 else 0"> 
							<set_value name="$temp_zone" exact="$temp_validZones.{$x}"/>
						</do_elseif> 
						<do_elseif value="$temp_validZones.{$x}.owner != $_faction and $temp_validZones.{$x}.owner.relationto.{$_faction} gt $_faction.relation.enemy.min" chance="if $doRun == 2 and $_CEO.$style == 'domination' then 100 else 0"> 
							<set_value name="$temp_zone" exact="$temp_validZones.{$x}"/>
						</do_elseif> 
						<do_elseif value="$temp_validZones.{$x}.owner == $_faction" chance="if $doRun == 3 and $_CEO.$style != 'domination' then 100 else 0"> 
							<set_value name="$temp_zone" exact="$temp_validZones.{$x}"/>
						</do_elseif> 
				
						<do_if value="$doRun == 1 and $temp_zone"> 
							<do_if value="$object.zone == $temp_zone or $object.zone.adjacentzones.indexof.{$temp_zone}" chance="if $_CEO.$style != 'domination' then 100 else 0"> 
								<set_value name="$zone" exact="$temp_zone"/>
								<break chance="if $object.zone == $temp_zone then 100 else 0"/>
							</do_if> 
							<do_elseif value="$object.zone != $temp_zone and $object.zone.adjacentzones.indexof.{$temp_zone}" chance="if $_CEO.$style == 'domination' then 100 else 0"> 
								<set_value name="$zone" exact="$temp_zone"/>
								<break />
							</do_elseif> 
							<do_elseif value="not $zone or ($zone and $object.distanceto.{$temp_zone} lt $object.distanceto.{$zone})"> 
								<set_value name="$zone" exact="$temp_zone" chance="if not $zone or $object.zone.adjacentzones.indexof.{$zone} == 0 then 100 else 0"/>
							</do_elseif> 
						</do_if> 
						<do_elseif value="$doRun gt 1 and $temp_zone"> 
							<!--
							<do_if value="$validZones? and $validZones.indexof.{$temp_zone}">
							</do_if>
							<do_else>
							</do_else>
							-->
							<set_value name="$zone" exact="$temp_zone"/>
							<break />
						</do_elseif> 
					</do_all>
					<do_if value="$zone"> 
						<set_value name="$temp_zone" exact="$zone"/>
						<include_actions ref="md.MM_Corps__Data.MMCData_do_validfreebuildspots" />
						<set_value name="$BuildLocation" exact="$temp_buildspots.random"/>
						<remove_value name="$temp_buildspots"/>
						<do_if value="$BuildLocation">
							<break />
						</do_if>
						<do_else>
							<set_value name="$zone" exact="null"/>
						</do_else>
					</do_if>
					<set_value name="$doRun" operation="add"/>
				</do_all>
<set_value name="$text3" exact="' -%1 \n'.[if $zone then $zone.macro.id else $zone]" operation="add" />
				<remove_value name="$object"/>
				<remove_value name="$temp_zone"/>
				<remove_value name="$temp_run"/>
				<remove_value name="$doRun"/>
				<remove_value name="$temp_validZones"/>
			</actions>
		</library>
		<!-- 
		<set_value name="$temp_zone" exact="player.zone"/>
		<set_value name="$noNPC" comment="optional"/>
		<set_value name="$noPlayer" comment="optional"/>
		<include_actions ref="md.MM_Corps__Data.MMCData_do_validfreebuildspots" />
		<remove_value name="$temp_buildspots"/>
		-->
		<library name="MMCData_do_validfreebuildspots">
			<actions>
				<create_list name="$temp_buildspots"/>
				<do_all exact="$temp_zone.npcbuildlocations.count" counter="$bs" chance="if $noNPC? then 0 else 100"> 
					<do_if value="$temp_zone.npcbuildlocations.{$bs}.child" negate="true">
						<append_to_list name="$temp_buildspots" exact="$temp_zone.npcbuildlocations.{$bs}"/>
					</do_if>
				</do_all>
				<do_all exact="$temp_zone.buildlocations.count" counter="$bs" chance="if $noPlayer? then 0 else 100"> 
					<do_if value="$temp_zone.buildlocations.{$bs}.child" negate="true">
						<append_to_list name="$temp_buildspots" exact="$temp_zone.buildlocations.{$bs}"/>
					</do_if>
				</do_all>
				<remove_value name="$noNPC"/>
				<remove_value name="$noPlayer"/>
				<remove_value name="$temp_zone"/>
			</actions>
		</library>
		<!-- 
		<set_value name="$tmpConfig.$build" exact="[]"/>
		<set_value name="$doNotSimple" comment="optional"/>
		<set_value name="$searchReq" comment="optional"/>
		<include_actions ref="md.MM_Corps__Data.MMCData_do_selectstation" />
		-->
		<library name="MMCData_do_selectstation">
			<actions>
				<set_value name="$stationToBuild" exact="null"/>

				<do_if value="not $stationToBuild and $special_musthave? and $special_musthave.count">
					<set_value name="$stationToBuild" exact="$special_musthave.random"/>
				</do_if>
				<!-- select by economy requirements -->
				<do_if value="not $stationToBuild and $tmpConfig.$build.count" chance="($CVShip? and $CVShip.exists and $searchReq?) * 100">
<set_value name="$text2" exact="'\n* [%1] build_iSelect INIT: %2 _%3_'.[$CVShip.owner.id, $tmpConfig.$build.count, md.$stationwiki.keys.list.count]" operation="add"/>
					<create_list name="$goodChoice"/>
					<create_list name="$possibleChoice"/>
					<create_list name="$badChoice"/>
					<create_list name="$skipped"/>
					<create_list name="$overallWarelist"/>
					<create_list name="$fuelstations"/>
<set_value name="$text_t" exact="''" />

					<do_all exact="3" counter="$w">

						<do_if value="$w == 1 and $tmpConfig.$build.count and md.$stationwiki.keys.list.count">
							<set_value name="$temp_todo" exact="$tmpConfig.$build.clone"/>
							<do_all exact="$temp_todo.count" counter="$x">
								<do_if value="md.$stationwiki.{'$%1'.[$temp_todo.{$x}.id]}? and md.$stationwiki.{'$%1'.[$temp_todo.{$x}.id]}.$products.count">
									<do_all exact="md.$stationwiki.{'$%1'.[$temp_todo.{$x}.id]}.$products.count" counter="$y">
										<do_if value="$overallWarelist.indexof.{md.$stationwiki.{'$%1'.[$temp_todo.{$x}.id]}.$products.{$y}} == 0">
											<do_if value="md.$stationwiki.{'$%1'.[$temp_todo.{$x}.id]}.$products.{$y} == ware.fuelcells">
												<append_to_list name="$fuelstations" exact="$temp_todo.{$x}"/>
											</do_if>
											<do_else>
												<append_to_list name="$overallWarelist" exact="md.$stationwiki.{'$%1'.[$temp_todo.{$x}.id]}.$products.{$y}"/>
											</do_else>
										</do_if>
									</do_all><!-- y -->
								</do_if>
								<do_elseif value="not md.$stationwiki.{'$%1'.[$temp_todo.{$x}.id]}?">
									<append_to_list name="$skipped" exact="$temp_todo.{$x}" chance="($w == 1) * 100"/>
								</do_elseif>
							</do_all><!-- x -->
							<remove_value name="$temp_todo"/>

							<find_buy_offer tradepartner="$CVShip" space="$zone.cluster" multiple="true" result="$tradeoffers" wares="$overallWarelist">
								<amount min="1" />
							</find_buy_offer>
							<do_all exact="$tradeoffers.count" counter="$y">
								<do_if value="$overallWarelist.indexof.{$tradeoffers.{$y}.ware} == 0">
									<continue />
								</do_if>
								<do_if value="$tradeoffers.{$y}.unitprice ge $tradeoffers.{$y}.ware.averageprice">
									<find_sell_offer tradepartner="$CVShip" space="$zone.cluster" multiple="false" result="$backcheck" wares="[$tradeoffers.{$y}.ware]">
										<price max="$tradeoffers.{$y}.unitprice"/>
										<amount min="1" />
									</find_sell_offer>
									<do_if value="$backcheck">
										<remove_value name="$overallWarelist.{$overallWarelist.indexof.{$tradeoffers.{$y}.ware}}"/>
									</do_if>
									<remove_value name="$backcheck"/>
								</do_if>
							</do_all><!-- y -->
							<remove_value name="$tradeoffers"/>
						</do_if>
<set_value name="$text2" exact="' --overallWarelist: [%1]'.[$overallWarelist.count]" operation="add"/>

						<do_if value="$fuelstations.count and $Builders.count">
							<do_all exact="$Builders.count" counter="$r"> 
								<do_if value="$Builders.{$r}.pilot.$param? and $Builders.{$r}.pilot.$params.$macro? and $Builders.{$r}.pilot.$params.$macro"> 
									<do_if value="$fuelstations.indexof.{macro.{$Builders.{$r}.pilot.$params.$macro.id}} and $Builders.{$r}.pilot.$params.$destination and $Builders.{$r}.pilot.$params.$destination.component.sector == $zone.sector">
										<remove_value name="$fuelstations.{$fuelstations.indexof.{macro.{$Builders.{$r}.pilot.$params.$macro.id}}}"/>
									</do_if>
								</do_if> 
							</do_all>
						</do_if>
						<do_if value="$fuelstations.count">
							<find_buy_offer tradepartner="$CVShip" space="$zone.sector" multiple="false" result="$tradeoffers" wares="[ware.fuelcells]">
								<amount min="1" />
							</find_buy_offer>
							<do_if value="$tradeoffers" negate="true">
								<append_to_list name="$overallWarelist" exact="ware.fuelcells"/>
							</do_if>
							<do_else>
								<do_all exact="$fuelstations.count" counter="$y">
									<remove_value name="$tmpConfig.$build.{$tmpConfig.$build.indexof.{$fuelstations.{$y}}}"/>
								</do_all><!-- y -->
								<clear_list list="$fuelstations"/>
							</do_else>
						</do_if>


						<do_if value="$overallWarelist.count == 0">
							<break />
						</do_if>

						<do_if value="$w == 1 and $tmpConfig.$build.count">
							<set_value name="$temp_todo" exact="$tmpConfig.$build.clone"/>
						</do_if>
						<do_else>
							<create_list name="$temp_todo"/>
						</do_else>

						<do_all exact="$temp_todo.count" counter="$x" chance="($w == 1) * 100">
							<do_if value="md.$stationwiki.{'$%1'.[$temp_todo.{$x}.id]}? and md.$stationwiki.{'$%1'.[$temp_todo.{$x}.id]}.$products.count"> <!-- -->
								<set_value name="$warelist" exact="md.$stationwiki.{'$%1'.[$temp_todo.{$x}.id]}.$products"/>
							</do_if>
							<do_else>
								<continue />
							</do_else>

							<do_if value="$warelist.count == 0">
								<remove_value name="$warelist"/>
								<continue />
							</do_if>

							<set_value name="$req_offers" exact="$warelist.clone"/>
							<do_all exact="$req_offers.count" counter="$y" reverse="true">
								<do_if value="$overallWarelist.indexof.{$req_offers.{$y}}">
									<remove_value name="$req_offers.{$y}"/>
								</do_if>
							</do_all><!-- y -->

							<do_if value="$req_offers.count and $req_offers.count == $warelist.count">
								<remove_value name="$warelist"/>
								<remove_value name="$req_offers"/>
								<continue />
							</do_if>
							<do_elseif value="$req_offers.count == 0">
								<append_to_list name="$goodChoice" exact="$temp_todo.{$x}"/>
							</do_elseif>
							<do_elseif value="$req_offers.count and $warelist.count gt 2 and $req_offers.count lt $warelist.count/2">
								<append_to_list name="$possibleChoice" exact="$temp_todo.{$x}"/>
							</do_elseif>
							<do_else>
								<append_to_list name="$badChoice" exact="$temp_todo.{$x}"/>
							</do_else>

							<remove_value name="$warelist"/>
							<remove_value name="$req_offers"/>
						</do_all><!-- x -->
						<remove_value name="$temp_todo"/>

<set_value name="$text2" exact="'\n* [%1] build_iSelect: %2 %3 %4 [%5] _%6_'.[$w, $goodChoice.count, $possibleChoice.count, $badChoice.count, $overallWarelist.count, md.$stationwiki.keys.list.count]" operation="add"/>
						<!-- req resources -->
						<do_if value="($w == 1) and $goodChoice.count">
							<set_value name="$temp_todo" exact="$goodChoice.clone"/>
						</do_if>
						<do_elseif value="($w == 2) and ($possibleChoice.count or $fuelstations.count)">
							<do_if value="$fuelstations.count" chance="33">
								<set_value name="$temp_todo" exact="$fuelstations.clone"/>
							</do_if>
							<do_elseif value="$possibleChoice.count">
								<set_value name="$temp_todo" exact="$possibleChoice.clone"/>
							</do_elseif>
							<do_else>
								<continue />
							</do_else>
						</do_elseif>
						<do_elseif value="($w == 3) and $badChoice.count">
							<set_value name="$temp_todo" exact="$badChoice.clone"/>
						</do_elseif>
						<do_else>
							<continue />
						</do_else>

						<do_all exact="$temp_todo.count" counter="$x">

							<do_if value="md.$stationwiki.{'$%1'.[$temp_todo.{$x}.id]}? and md.$stationwiki.{'$%1'.[$temp_todo.{$x}.id]}.$resources.count">
								<set_value name="$warelist" exact="md.$stationwiki.{'$%1'.[$temp_todo.{$x}.id]}.$resources"/>
							</do_if>
							<do_else>
								<continue />
							</do_else>

							<do_if value="$warelist.count == 0">
								<remove_value name="$warelist"/>
								<break />
							</do_if>

							<find_sell_offer tradepartner="$CVShip" space="$zone.cluster" multiple="true" result="$tradeoffers" wares="$warelist"/>

							<set_value name="$offers" exact="0"/>
							<set_value name="$req_offers" exact="$warelist"/>
							<do_all exact="$tradeoffers.count" counter="$y">
								<do_if value="$tradeoffers.{$y}.unitprice le $tradeoffers.{$y}.ware.averageprice">
									<set_value name="$offers" operation="add"/>
								</do_if>

								<do_if value="$req_offers.indexof.{$tradeoffers.{$y}.ware}">
									<remove_value name="$req_offers.{$req_offers.indexof.{$tradeoffers.{$y}.ware}}"/>
								</do_if>
							</do_all><!-- y -->
							<do_all exact="$req_offers.count" counter="$y" reverse="true">
								<do_if value="$req_offers.{$y}.tags.indexof.{tag.minable}">
									<remove_value name="$req_offers.{$req_offers.indexof.{$req_offers.{$y}}}"/>
								</do_if>
							</do_all><!-- y -->

							<do_if value="$req_offers.count and ($tradeoffers.count == 0 or $req_offers.count == $warelist.count)">
								<remove_value name="$offers"/>
								<remove_value name="$tradeoffers"/>
								<remove_value name="$warelist"/>
								<remove_value name="$req_offers"/>
								<continue />
							</do_if>
							<do_elseif value="$req_offers.count == 0 and $offers gt $warelist.count">
								<set_value name="$stationToBuild" exact="$temp_todo.{$x}"/>
								<remove_value name="$offers"/>
								<remove_value name="$tradeoffers"/>
								<remove_value name="$warelist"/>
								<remove_value name="$req_offers"/>
								<break />
							</do_elseif>
							<do_else>
								<set_value name="$stationToBuild" exact="$temp_todo.{$x}"/>
							</do_else>
					
							<remove_value name="$offers"/>
							<remove_value name="$tradeoffers"/>
							<remove_value name="$warelist"/>
							<remove_value name="$req_offers"/>
						</do_all><!-- x -->
						<remove_value name="$temp_todo"/>

						<do_if value="$stationToBuild">
							<break />
						</do_if>

					</do_all><!-- w -->
					<do_if value="$skipped.count">
						<do_all exact="$skipped.count" counter="$x">
							<find_station name="$temp_station" space="player.galaxy" functional="true" multiple="false">
								<match macro="$skipped.{$x}"/>
							</find_station>
							<do_if value="$temp_station">
								<set_value name="md.$stationwiki.{'$%1'.[$temp_station.macro.id]}" exact="table[ $resources = $temp_station.resources.list, $products = $temp_station.products.list ]"/>
							</do_if>
							<do_else>
								<continue />
							</do_else>
						</do_all><!-- x -->
						<remove_value name="$temp_station"/>
					</do_if>
					<remove_value name="$overallWarelist"/>
					<remove_value name="$badChoice"/>
					<remove_value name="$possibleChoice"/>
					<remove_value name="$goodChoice"/>
					<remove_value name="$skipped"/>
					<remove_value name="$fuelstations"/>
				</do_if>
				<!-- select by environment -->
				<do_if value="not $stationToBuild and $tmpConfig.$build.count" chance="($CVShip? and $CVShip.exists and $doNotSimple?) * 100">
					<create_list name="$goodChoice"/>
					<create_list name="$possibleChoice"/>
					<create_list name="$badChoice"/>
					<create_list name="$skipped"/>
					<create_list name="$fuelstations"/>
					<do_all exact="4" counter="$w">
				
						<do_if value="$w == 1 and $tmpConfig.$build.count">
							<set_value name="$temp_todo" exact="$tmpConfig.$build.clone"/>
						</do_if>
						<do_elseif value="$w == 4 and $skipped.count">
							<set_value name="$temp_todo" exact="$skipped.clone"/>
						</do_elseif>
						<do_else>
							<create_list name="$temp_todo"/>
						</do_else>
						<do_all exact="$temp_todo.count" counter="$x" chance="($w == 1 or $w == 4) * 100">

							<do_if value="md.$stationwiki.{'$%1'.[$temp_todo.{$x}.id]}? and md.$stationwiki.{'$%1'.[$temp_todo.{$x}.id]}.$resources.count">
								<set_value name="$warelist" exact="md.$stationwiki.{'$%1'.[$temp_todo.{$x}.id]}.$resources"/>
							</do_if>
							<do_else>
								<append_to_list name="$skipped" exact="$temp_todo.{$x}" chance="($w lt 4) * 100"/>
								<continue />
							</do_else>

							<do_if value="$warelist.count == 0">
								<append_to_list name="$possibleChoice" exact="$temp_todo.{$x}"/>
								<remove_value name="$warelist"/>
								<continue />
							</do_if>

							<find_sell_offer tradepartner="$CVShip" space="$zone.cluster" multiple="true" result="$tradeoffers" wares="$warelist"/>

							<set_value name="$offers" exact="0"/>
							<set_value name="$req_offers" exact="$warelist"/>
							<do_all exact="$tradeoffers.count" counter="$y">
								<do_if value="$tradeoffers.{$y}.unitprice le $tradeoffers.{$y}.ware.averageprice">
									<set_value name="$offers" operation="add"/>
								</do_if>

								<do_if value="$req_offers.indexof.{$tradeoffers.{$y}.ware}">
									<remove_value name="$req_offers.{$req_offers.indexof.{$tradeoffers.{$y}.ware}}"/>
								</do_if>
							</do_all><!-- y -->
							<do_all exact="$req_offers.count" counter="$y" reverse="true">
								<do_if value="$req_offers.{$y}.tags.indexof.{tag.minable}">
									<remove_value name="$req_offers.{$req_offers.indexof.{$req_offers.{$y}}}"/>
								</do_if>
							</do_all><!-- y -->

							<do_if value="$req_offers.count and ($tradeoffers.count == 0 or $req_offers.count == $warelist.count)">
								<append_to_list name="$badChoice" exact="$temp_todo.{$x}"/>
								<remove_value name="$offers"/>
								<remove_value name="$tradeoffers"/>
								<remove_value name="$warelist"/>
								<remove_value name="$req_offers"/>
								<continue />
							</do_if>
							<do_elseif value="$req_offers.count == 0 and $offers gt $warelist.count">
								<append_to_list name="$goodChoice" exact="$temp_todo.{$x}"/>
							</do_elseif>
							<do_else>
								<append_to_list name="$possibleChoice" exact="$temp_todo.{$x}"/>
							</do_else>
					
							<remove_value name="$offers"/>
							<remove_value name="$tradeoffers"/>
							<remove_value name="$warelist"/>
							<remove_value name="$req_offers"/>
						</do_all><!-- x -->
						<remove_value name="$temp_todo"/>

<set_value name="$text2" exact="'\n* [%1] build select: %2 %3 %4 %5 _%6_'.[$w, $goodChoice.count, $possibleChoice.count, $badChoice.count, $skipped.count, md.$stationwiki.keys.list.count]" operation="add"/>
						<!-- production to sell -->
						<do_if value="($w == 1 or $w == 4) and $goodChoice.count">
							<set_value name="$temp_todo" exact="$goodChoice.clone"/>
						</do_if>
						<do_elseif value="($w == 2 or $w == 4) and $possibleChoice.count">
							<set_value name="$temp_todo" exact="$possibleChoice.clone"/>
						</do_elseif>
						<do_elseif value="($w == 3 or $w == 4) and $badChoice.count" chance="20">
							<set_value name="$temp_todo" exact="$badChoice.clone"/>
						</do_elseif>
						<do_elseif value="$w == 4 and $skipped.count" chance="if ($goodChoice.count + $possibleChoice.count + $badChoice.count) gt 0 then 0 else 100">
							<set_value name="$temp_todo" exact="$skipped.clone"/>
						</do_elseif>
						<do_elseif value="$w == 3">
							<create_list name="$temp_todo"/>
						</do_elseif>
						<do_else>
							<continue />
						</do_else>

						<do_all exact="$temp_todo.count" counter="$x">

							<do_if value="md.$stationwiki.{'$%1'.[$temp_todo.{$x}.id]}? and md.$stationwiki.{'$%1'.[$temp_todo.{$x}.id]}.$products.count">
								<set_value name="$warelist" exact="md.$stationwiki.{'$%1'.[$temp_todo.{$x}.id]}.$products"/>
							</do_if>
							<do_else>
								<continue />
							</do_else>

							<do_if value="$warelist.count == 0">
								<set_value name="$stationToBuild" exact="$temp_todo.{$x}"/>
								<remove_value name="$warelist"/>
								<break />
							</do_if>

							<find_buy_offer tradepartner="$CVShip" space="$zone.cluster" multiple="true" result="$tradeoffers" wares="$warelist"/>
					
							<set_value name="$offers" exact="0"/>
							<set_value name="$req_offers" exact="$warelist"/>
							<do_all exact="$tradeoffers.count" counter="$y">
								<do_if value="$tradeoffers.{$y}.unitprice ge $tradeoffers.{$y}.ware.averageprice">
									<set_value name="$offers" operation="add"/>
								</do_if>

								<do_if value="$req_offers.indexof.{$tradeoffers.{$y}.ware}">
									<remove_value name="$req_offers.{$req_offers.indexof.{$tradeoffers.{$y}.ware}}"/>
								</do_if>
							</do_all><!-- y -->
							<do_all exact="$req_offers.count" counter="$y" reverse="true">
								<do_if value="$req_offers.{$y}.tags.indexof.{tag.ship} or $req_offers.{$y}.tags.indexof.{tag.drone} or ['swarmmissile', 'torpedo', 'dumbfiremissile', 'guidedmissile'].indexof.{$req_offers.{$y}.id}">
									<remove_value name="$req_offers.{$req_offers.indexof.{$req_offers.{$y}}}"/>
								</do_if>
							</do_all><!-- y -->

							<do_if value="$req_offers.count and ($tradeoffers.count == 0 or $req_offers.count == $warelist.count)">
								<remove_value name="$offers"/>
								<remove_value name="$tradeoffers"/>
								<remove_value name="$warelist"/>
								<remove_value name="$req_offers"/>
								<continue />
							</do_if>
							<do_elseif value="$req_offers.count == 0 and $offers gt $warelist.count">
								<set_value name="$stationToBuild" exact="$temp_todo.{$x}"/>
								<remove_value name="$offers"/>
								<remove_value name="$tradeoffers"/>
								<remove_value name="$warelist"/>
								<remove_value name="$req_offers"/>
								<break />
							</do_elseif>
							<do_else>
								<set_value name="$stationToBuild" exact="$temp_todo.{$x}"/>
							</do_else>
					
							<remove_value name="$offers"/>
							<remove_value name="$tradeoffers"/>
							<remove_value name="$warelist"/>
							<remove_value name="$req_offers"/>
						</do_all><!-- x -->
						<remove_value name="$temp_todo"/>

						<do_if value="$w == 3 and $skipped.count">
							<do_all exact="$skipped.count" counter="$x">
								<find_station name="$temp_station" space="player.galaxy" functional="true" multiple="false">
									<match macro="$skipped.{$x}"/>
								</find_station>

								<do_if value="$temp_station">
									<set_value name="md.$stationwiki.{'$%1'.[$temp_station.macro.id]}" exact="table[ $resources = $temp_station.resources.list, $products = $temp_station.products.list ]"/>
								</do_if>
								<do_else>
									<continue />
								</do_else>
							</do_all><!-- x -->

							<remove_value name="$temp_station"/>
							<clear_list list="$badChoice"/>
							<clear_list list="$possibleChoice"/>
							<clear_list list="$goodChoice"/>
						</do_if>

						<do_if value="$stationToBuild">
							<break />
						</do_if>
					</do_all><!-- w -->
					<remove_value name="$skipped"/>
					<remove_value name="$badChoice"/>
					<remove_value name="$possibleChoice"/>
					<remove_value name="$goodChoice"/>
					<remove_value name="$fuelstations"/>
				</do_if>
				<!-- select by .random -->
				<do_elseif value="not $stationToBuild and $tmpConfig.$build.count" chance="(not $doNotSimple?) * 100">
					<set_value name="$stationToBuild" exact="$tmpConfig.$build.random"/>
				</do_elseif>

				<!-- update wiki -->
				<do_if value="$stationToBuild">
					<find_station name="$temp_station" space="player.galaxy" functional="true" multiple="false">
						<match macro="$stationToBuild"/>
					</find_station>
					<do_if value="	not md.$stationwiki.{'$%1'.[$temp_station.macro.id]}? or
									(md.$stationwiki.{'$%1'.[$temp_station.macro.id]}? and ( md.$stationwiki.{'$%1'.[$temp_station.macro.id]}.$resources.count lt $temp_station.resources.list.count or md.$stationwiki.{'$%1'.[$temp_station.macro.id]}.$products.count lt $temp_station.products.list.count ))
								" chance="($temp_station? and $temp_station) *100">
						<set_value name="md.$stationwiki.{'$%1'.[$temp_station.macro.id]}" exact="table[ $resources = $temp_station.resources.list, $products = $temp_station.products.list ]"/>
					</do_if>
					<remove_value name="$temp_station"/>
				</do_if>
		
				<remove_value name="$doNotSimple"/>
				<remove_value name="$searchReq"/>
			</actions>
		</library>

		<!--
		<set_value name="$_CEO" exact="$actorCEO" />
		<include_actions ref="md.MM_Corps__Data.MMCData_CEO_status" />
		-->
		<library name="MMCData_CEO_status">
			<actions>
				<set_value name="$doStatusChance" exact="0"/>

				<do_if value="[level.veryhard, level.impossible].indexof.{player.difficulty} or $_CEO.owner.hasrelation.enemy.{faction.player}" chance="0">
					<set_value name="$doStatusChance" exact="0"/>
				</do_if>
				<do_elseif value="[level.hard].indexof.{player.difficulty} and $_CEO.owner.relationto.{faction.player} ge faction.player.relation.member.min">
					<set_value name="$doStatusChance" exact="90"/>
				</do_elseif>
				<do_elseif value="[level.hard].indexof.{player.difficulty} and $_CEO.owner.relationto.{faction.player} gt faction.player.relation.friend.min">
					<set_value name="$doStatusChance" exact="30"/>
				</do_elseif>
				<do_else>
					<set_value name="$doStatusChance" exact="100"/>
				</do_else>

				<do_if value="true" chance="$doStatusChance">
					<set_value name="$faction" exact="$_CEO.owner" />
					<set_value name="$tempText" exact="{40002,240}.[$faction, $_CEO.money.formatted.default]" />
	
					<find_zone name="$temp" space="player.galaxy" multiple="true" owner="$faction" tempzone="false" mapzone="true" chance="if $temp_zones? and $temp_zones.count then 0 else 100"/>
					<set_value name="$tempText" exact="{40002,241}.[$temp.count]" operation="add" />
					<remove_value name="$temp"/>
	
					<find_station name="$temp" space="player.galaxy" functional="true" multiple="true">
						<match owner="$faction"/>
					</find_station>
					<set_value name="$tempText" exact="{40002,242}.[$temp.count]" operation="add" />
					<remove_value name="$temp"/>
	
					<find_ship name="$temp" class="[class.ship_l, class.ship_xl]" functional="true" space="player.galaxy" multiple="true">
						<match owner="$faction"/>
					</find_ship>
					<find_ship name="$temp_sm" class="[class.ship_s, class.ship_m]" functional="true" space="player.galaxy" multiple="true">
						<match owner="$faction"/>
					</find_ship>
					<set_value name="$tempText" exact="{40002,243}.[$temp.count, $temp_sm.count]" operation="add" />
					<remove_value name="$temp"/>
					<remove_value name="$temp_sm"/>
	
					<write_to_logbook category="general" text="$tempText"/>
	
					<remove_value name="$faction"/>
					<remove_value name="$tempText"/>
				</do_if>
			</actions>
		</library>

		<!-- 
		<include_actions ref="md.MM_Corps__Data.MMCData_doworker_include_corp_future" />
		-->
		<library name="MMCData_doworker_include_corp_future">
			<actions>
				<find_station name="$tmp_stations" space="player.galaxy" functional="true" multiple="true" recursive="true" chance="if not ($tmp_stations? and $tmp_stations.count) then 100 else 0">
					<match owner="$_faction"/>
				</find_station>
				<do_if value="$tmp_stations.count gt 3 and $tmp_stations.{1}.engineer.exists">
					<transfer_money from="$tmp_stations.{1}.engineer" to="$_CEO" amount="20000000Cr - $_CEO.money"/>
				</do_if>
				<do_elseif value="$tmp_stations.count == 0 and $shipDoTrade.count and $validSectors.count and $style.{2} == 'pirate'">
					<set_value name="$noBelongings" exact="$style.{2}"/>
					
					<do_all exact="$shipDoTrade.count" counter="$r">
						<set_value name="$plunder" exact="true"/>
						<set_value name="$Object" exact="$shipDoTrade.{$r}" />
						<set_value name="$sectors" exact="$validSectors.clone" />
						<include_actions ref="md.MM_Corps__Data.MMCData_ship_job" />
					</do_all>
				</do_elseif>
			</actions>
		</library>

		<!-- 
		<set_value name="$tmpMax" comment="optional"/>
		<set_value name="$tmpInstand" comment="optional"/>
		<set_value name="$temp_Objects" exact="$Object / [$Object,$Object2]" />
		<include_actions ref="md.MM_Corps__Data.MMCData_do_cheatressources" />
		-->
		<library name="MMCData_do_cheatressources">
			<actions>
				<do_if value="typeof $temp_Objects == datatype.list" negate="true">
					<set_value name="$temp_Objects" exact="[$temp_Objects]"/>
				</do_if>
				<do_all exact="$temp_Objects.count" counter="$r">
					<do_if value="$temp_Objects.{$r}.isoperational" negate="true">
						<continue />
					</do_if>
					<do_if value="$temp_Objects.{$r}.isplayerowned and (not $tmpConfig? or not $tmpConfig.$cheat?)">
						<continue />
					</do_if>

					<find_buy_offer buyer="$temp_Objects.{$r}" multiple="1" result="$buyoffers" wares="$temp_Objects.{$r}.resources.list"/>
					<set_value name="$price" exact="0Cr"/>

					<do_if value="@$temp_Objects.{$r}.tradenpc.$orders.count and @$temp_Objects.{$r}.tradenpc.$stop_trading gt player.age + 20min">
						<set_value name="$temp_Objects.{$r}.tradenpc.$stop_trading" exact="player.age"/>
					</do_if>
					<do_elseif value="@$temp_Objects.{$r}.tradenpc.$orders.count and @$temp_Objects.{$r}.tradenpc.$stop_trading lt player.age" chance="0">
						<signal_objects object="$temp_Objects.{$r}" param="'GOING_ON'" />
					</do_elseif>

					<do_all exact="$buyoffers.count" counter="$s">
						<do_if value="$temp_Objects.{$r}.cargo.{$buyoffers.{$s}.ware}.count le $temp_Objects.{$r}.cargo.{$buyoffers.{$s}.ware}.target*0.1f">
							<do_if value="$tmpInstand?">
								<add_cargo ware="$buyoffers.{$s}.ware" object="$temp_Objects.{$r}" exact="[$temp_Objects.{$r}.cargo.{$buyoffers.{$s}.ware}.max*0.2f, (($temp_Objects.{$r}.cargo.{$buyoffers.{$s}.ware}.target*0.2f)-$temp_Objects.{$r}.cargo.{$buyoffers.{$s}.ware}.count), $buyoffers.{$s}.offeramount*0.3f].min" result="$cheated" />
								<do_if value="$cheated gt 0" chance="0">
									<set_value name="$price" exact="$buyoffers.{$s}.ware.maxprice * $cheated" operation="add"/>
								</do_if>
								<remove_value name="$cheated"/>
							</do_if>
							<do_elseif value="$temp_Objects.{$r}.cargo.{$buyoffers.{$s}.ware}.count lt 10 and $buyoffers.{$s}.offeramount gt $temp_Objects.{$r}.cargo.{$buyoffers.{$s}.ware}.target*0.9f and $tmpMax?">
								<signal_objects object="player.galaxy" param="'do.cheat.waredelivery'" param2="[$temp_Objects.{$r}, $buyoffers.{$s}.ware, $buyoffers.{$s}.offeramount]" />
							</do_elseif>
							<do_elseif value="$buyoffers.{$s}.offeramount gt $temp_Objects.{$r}.cargo.{$buyoffers.{$s}.ware}.target*0.7f">
								<set_value name="$temp_amount" exact="[$temp_Objects.{$r}.cargo.{$buyoffers.{$s}.ware}.max*0.2f, (($temp_Objects.{$r}.cargo.{$buyoffers.{$s}.ware}.target*0.3f)-$temp_Objects.{$r}.cargo.{$buyoffers.{$s}.ware}.count), $buyoffers.{$s}.offeramount*0.3f].min"/>
								<signal_objects object="player.galaxy" param="'do.cheat.waredelivery'" param2="[$temp_Objects.{$r}, $buyoffers.{$s}.ware, $temp_amount]" />
								<remove_value name="$temp_amount"/>
							</do_elseif>
						</do_if>
					</do_all>
					<!--do_if value="$price" chance="0">
						<transfer_money from="$temp_Objects.{$r}.tradenpc" to="$_CEO" amount="$price"/>
					</do_if-->
					<remove_value name="$buyoffers"/>
					<remove_value name="$price"/>
				</do_all>
				<remove_value name="$temp_Objects"/>
				<remove_value name="$tmpInstand"/>
				<remove_value name="$tmpMax"/>
			</actions>
		</library>

		<!-- 
		* $tmpConfig
		* $valid*spaces
		<set_value name="$_CEO" exact="global.$corp_CEO" />
		<set_value name="$_faction" exact="faction.player" />
		<set_value name="$requiredUnits" exact="['trade','trade','build','fight']" />
		<include_actions ref="md.MM_Corps__Data.MMCData_do_orderships" />
		-->
		<library name="MMCData_do_orderships">
			<actions>
				<set_value name="$ShipYardOfTrust" exact="null" chance="(not $ShipYardOfTrust_Multi? or not ($ShipYardOfTrust? and $ShipYardOfTrust))*100"/>
				<set_value name="$SY_Matches_max" exact="0"/>

				<do_all exact="$validCluster.count" counter="$x" chance="if $ShipYardOfTrust or $_CEO.$style == 'mercenary' then 0 else 100">
					<find_station name="$ShipYardOfTrust2" space="$validCluster.{$x}" functional="true" multiple="true">
						<match_content class="class.buildmodule" />
						<match owner="$_faction"/>
					</find_station>
					<do_all exact="$ShipYardOfTrust2.count" counter="$y">
						<do_if value="$ShipYardOfTrust2.{$y} and $ShipYardOfTrust2.{$y}.tradenpc.exists and not $ShipYardOfTrust2.{$y}.tradenpc.$denyBuildRandomNPC? and $ShipYardOfTrust2.{$y}.tradenpc.$orders? and $ShipYardOfTrust2.{$y}.tradenpc.$orders.count lt 5 and $ShipYardOfTrust2.{$y}.units.{unitcategory.welder}.count gt 10">
							<set_value name="$ShipYardOfTrust" exact="$ShipYardOfTrust2.{$y}"/>
							<break />
						</do_if>
					</do_all>
					<do_if value="$ShipYardOfTrust" negate="true">
						<find_station name="$ShipYardOfTrust2" space="$validCluster.{$x}" functional="true" multiple="true">
							<match_content class="class.buildmodule" />
							<match_relation faction="$_faction"  relation="neutral" comparison="ge"/>
						</find_station>
						<set_value name="$SY_Matches_max" exact="$ShipYardOfTrust2.count" chance="if $SY_Matches_max lt $ShipYardOfTrust2.count then 100 else 0"/>
						<do_all exact="$ShipYardOfTrust2.count" counter="$y">
							<do_if value="$ShipYardOfTrust2.{$y} and $ShipYardOfTrust2.{$y}.tradenpc.exists and not $ShipYardOfTrust2.{$y}.tradenpc.$denyBuildRandomNPC? and $ShipYardOfTrust2.{$y}.tradenpc.$orders? and $ShipYardOfTrust2.{$y}.tradenpc.$orders.count lt 5 and $ShipYardOfTrust2.{$y}.units.{unitcategory.welder}.count gt 10">
								<set_value name="$ShipYardOfTrust" exact="$ShipYardOfTrust2.{$y}"/>
								<break />
							</do_if>
						</do_all>
					</do_if>
					<do_if value="$ShipYardOfTrust and $ShipYardOfTrust.tradenpc.exists and not $ShipYardOfTrust.tradenpc.$denyBuildRandomNPC? and $ShipYardOfTrust.tradenpc.$orders? and $ShipYardOfTrust.tradenpc.$orders.count lt 5 and $ShipYardOfTrust.units.{unitcategory.welder}.count gt 10">
						<break />
					</do_if>
				</do_all>
				<do_if value="$ShipYardOfTrust" negate="true" chance="if $SY_Matches_max == 0 and $validZonesCore.{1}? then 100 else 0">
					<find_station name="$ShipYardOfTrust2" space="player.galaxy" functional="true" multiple="true">
						<match_content class="class.buildmodule" />
						<match_relation faction="$_faction"  relation="neutral" comparison="ge"/>
					</find_station>
					<do_all exact="$ShipYardOfTrust2.count" counter="$y">
						<do_if value="$ShipYardOfTrust2.{$y} and $ShipYardOfTrust2.{$y}.tradenpc.exists and not $ShipYardOfTrust2.{$y}.tradenpc.$denyBuildRandomNPC? and $ShipYardOfTrust2.{$y}.tradenpc.$orders? and $ShipYardOfTrust2.{$y}.tradenpc.$orders.count lt 5 and $ShipYardOfTrust2.{$y}.units.{unitcategory.welder}.count gt 10">
							<do_if value="$ShipYardOfTrust" negate="true">
								<set_value name="$ShipYardOfTrust" exact="$ShipYardOfTrust2.{$y}"/>
							</do_if>
							<do_elseif value="$ShipYardOfTrust and (($ShipYardOfTrust.distanceto.{$validZonesCore.{1}} gt $ShipYardOfTrust2.{$y}.distanceto.{$validZonesCore.{1}} and $ShipYardOfTrust.gatedistance.{$validZonesCore.{1}} ge $ShipYardOfTrust2.{$y}.gatedistance.{$validZonesCore.{1}}) or $ShipYardOfTrust.gatedistance.{$validZonesCore.{1}} gt $ShipYardOfTrust2.{$y}.gatedistance.{$validZonesCore.{1}})">
								<set_value name="$ShipYardOfTrust" exact="$ShipYardOfTrust2.{$y}"/>
							</do_elseif>
						</do_if>
					</do_all>
				</do_if>
				<do_elseif value="$ShipYardOfTrust" negate="true" chance="if $ShipYardOfTrust2? and $ShipYardOfTrust2.count then 100 else 0">
					<do_all exact="$ShipYardOfTrust2.count" counter="$y">
						<do_if value="@$ShipYardOfTrust2.{$y}.tradenpc.$orders.count gt 1 and not $ShipYardOfTrust2.{$y}.tradenpc.$denyBuildRandomNPC?" comment="cheat" chance="($tmpConfig.$cheat? or (not $ShipYardOfTrust2.{$y}.isplayerowned and $tmpConfig.$cheatNPC? and $tmpConfig.$cheatNPC)) * 100">

							<set_value name="$temp_Objects" exact="$ShipYardOfTrust2.{$y}" />
							<include_actions ref="md.MM_Corps__Data.MMCData_do_cheatressources" />

						</do_if>
					</do_all>
				</do_elseif>
				<remove_value name="$ShipYardOfTrust2"/>
				<remove_value name="$SY_Matches_max"/>

				<do_if value="$ShipYardOfTrust">
					<create_list name="$macroList"/>
					<set_value name="$macro" exact="null"/>
					<create_list name="$wishlist"/>
					<create_list name="$blacklist"/>
					<do_if value="global.$randumbuild_blacklist? and global.$randumbuild_blacklist.count">
						<do_all exact="global.$randumbuild_blacklist.count" counter="$y">
							<do_if value="$blacklist.indexof.{global.$randumbuild_blacklist.{$y}} == 0 and [macro.units_size_xl_builder_ship_macro,	macro.units_size_xl_builder_ship_dv_macro, macro.units_size_xl_builder_ship_ol_macro].indexof.{global.$randumbuild_blacklist.{$y}} == 0">
								<append_to_list name="$blacklist" exact="global.$randumbuild_blacklist.{$y}"/>
							</do_if>
						</do_all>
					</do_if>
					<!-- choices by chance of match -->
					<set_value name="$firstChoice" exact="if $requiredUnits.count then $requiredUnits.random else null"/>
					<do_all exact="$requiredUnits.count" counter="$x" reverse="true">
						<do_if value="$requiredUnits.{$x} == $firstChoice">
							<remove_value name="$requiredUnits.{$x}"/>
						</do_if>
					</do_all>
					<set_value name="$secondChoice" exact="if $requiredUnits.count then $requiredUnits.random else null"/>
					<!--do_all exact="$requiredUnits.count" counter="$x" reverse="true">
						<do_if value="$requiredUnits.{$x} == $secondChoice">
							<remove_value name="$requiredUnits.{$x}"/>
						</do_if>
					</do_all-->
					<set_value name="$thirdChoice" exact="if $requiredUnits.count then $requiredUnits.random else null"/>
					<set_value name="$fourthChoice" exact="null"/>

					<set_value name="$shipparts" exact="false"/>
					<do_if value="md.$shipparts?">
						<!-- add by shipparts-extension
						<do_if value="$ShipYardOfTrust.cargo.{ware.shippart}.target">
							<set_value name="$shipparts" exact="true"/>
						</do_if>-->
					</do_if>

					<do_if value="$tmpConfig.$ships? and $tmpConfig.$ships.$fight.count and $tmpConfig.$ships.$trade.count and $tmpConfig.$ships.$build.count and $tmpConfig.$ships.$mine.count" chance="if not $shipparts then 0 else if $ShipYardOfTrust.owner == $_faction then 25 else 100">
						<set_value name="$keylist" exact="['build', 'trade', 'mine', 'fight']"/>
						<do_if value="typeof $firstChoice != datatype.macro and $tmpConfig.$ships.{'$%1'.[$firstChoice]}? and $tmpConfig.$ships.{'$%1'.[$firstChoice]}.count">
							<set_value name="$firstChoice" exact="$tmpConfig.$ships.{'$%1'.[$firstChoice]}.random"/>
							<do_if value="$keylist.indexof.{$firstChoice}">
								<remove_value name="$keylist.{$keylist.indexof.{$firstChoice}}"/>
							</do_if>
						</do_if>
						<do_if value="typeof $secondChoice != datatype.macro and $tmpConfig.$ships.{'$%1'.[$secondChoice]}? and $tmpConfig.$ships.{'$%1'.[$secondChoice]}.count">
							<set_value name="$secondChoice" exact="$tmpConfig.$ships.{'$%1'.[$secondChoice]}.random"/>
							<do_if value="$keylist.indexof.{$secondChoice}">
								<remove_value name="$keylist.{$keylist.indexof.{$secondChoice}}"/>
							</do_if>
						</do_if>
						<do_if value="typeof $thirdChoice != datatype.macro and $tmpConfig.$ships.{'$%1'.[$thirdChoice]}? and $tmpConfig.$ships.{'$%1'.[$thirdChoice]}.count">
							<set_value name="$thirdChoice" exact="$tmpConfig.$ships.{'$%1'.[$thirdChoice]}.random"/>
							<do_if value="$keylist.indexof.{$thirdChoice}">
								<remove_value name="$keylist.{$keylist.indexof.{$thirdChoice}}"/>
							</do_if>
						</do_if>
						<set_value name="$keylist" exact="if $keylist.count then $keylist.random else 'nothing'"/>
						<do_if value="typeof $fourthChoice != datatype.macro and $tmpConfig.$ships.{'$%1'.[$keylist]}? and $tmpConfig.$ships.{'$%1'.[$keylist]}.count" chance="if $_CEO.$style == 'mercenary' then 0 else 100">
							<set_value name="$fourthChoice" exact="$tmpConfig.$ships.{'$%1'.[$keylist]}.random"/>
						</do_if>
						<remove_value name="$keylist"/>
					</do_if>
					<do_else>
						<find_object_component entitytype="entitytype.shiptrader" name="$shiptraders" object="$ShipYardOfTrust" multiple="true"/>
						<do_all exact="$shiptraders.count" counter="$x">
							<do_if value="$shiptraders.{$x}.buildmodule.buildmacros?" negate="true">
								<continue />
							</do_if>
							<do_all exact="$shiptraders.{$x}.buildmodule.buildmacros.count" counter="$y">
								<do_if value="$blacklist.indexof.{$shiptraders.{$x}.buildmodule.buildmacros.{$y}} == 0 and $macroList.indexof.{$shiptraders.{$x}.buildmodule.buildmacros.{$y}} == 0">
									<append_to_list name="$macroList" exact="$shiptraders.{$x}.buildmodule.buildmacros.{$y}"/>
								</do_if>
							</do_all>
						</do_all>
						<remove_value name="$shiptraders"/>
						<!-- make whishlist -->
						<set_value name="$keylist" exact="['build', 'trade', 'mine', 'fight']"/>
						<create_list name="$todo" />
						<do_if value="$keylist.indexof.{$firstChoice} and $tmpConfig.$ships.{'$%1'.[$firstChoice]}? and $tmpConfig.$ships.{'$%1'.[$firstChoice]}.count and $todo.indexof.{$firstChoice} == 0">
							<append_to_list name="$todo" exact="$firstChoice"/>
						</do_if>
						<do_if value="$keylist.indexof.{$secondChoice} and $tmpConfig.$ships.{'$%1'.[$secondChoice]}? and $tmpConfig.$ships.{'$%1'.[$secondChoice]}.count and $todo.indexof.{$secondChoice} == 0">
							<append_to_list name="$todo" exact="$secondChoice"/>
						</do_if>
						<do_if value="$keylist.indexof.{$thirdChoice} and $tmpConfig.$ships.{'$%1'.[$thirdChoice]}? and $tmpConfig.$ships.{'$%1'.[$thirdChoice]}.count and $todo.indexof.{$thirdChoice} == 0">
							<append_to_list name="$todo" exact="$thirdChoice"/>
						</do_if>
						<do_all exact="$todo.count" counter="$y">
							<do_all exact="$tmpConfig.$ships.{'$%1'.[$todo.{$y}]}.count" counter="$x">
								<do_if value="$wishlist.indexof.{ $tmpConfig.$ships.{'$%1'.[$todo.{$y}]}.{$x} } == 0">
									<append_to_list name="$wishlist" exact="$tmpConfig.$ships.{'$%1'.[$todo.{$y}]}.{$x}"/>
								</do_if>
							</do_all>
						</do_all>
						<remove_value name="$keylist"/>
						<remove_value name="$todo"/>
					</do_else>
<set_value name="$text2" exact="' -macros: %1'.[$macroList.count]" operation="add"/>

					<do_all exact="$macroList.count">
						<!-- preferred macros -->
						<do_if value="$wishlist.count">
							<set_value name="$temp_macro" exact="$wishlist.random"/>
							<remove_value name="$wishlist.{$wishlist.indexof.{$temp_macro}}"/>
							<do_if value="$macroList.indexof.{$temp_macro}">
								<set_value name="$macro" exact="$temp_macro"/>
							</do_if>
							<do_elseif value="$_CEO.$isService?">
								<continue />
							</do_elseif>
							<do_else>
								<set_value name="$macro" exact="$macroList.random"/>
							</do_else>
						</do_if>
						<do_else>
							<set_value name="$macro" exact="$macroList.random"/>
						</do_else>
						<!-- neverever macros -->
						<do_if value="$blacklist.indexof.{$macro}">
							<remove_value name="$macroList.{$macroList.indexof.{$macro}}"/>
							<continue />
						</do_if>
						<!-- how much is the fish -->
						<do_if value="$macro.ware.maxprice? and $macro.ware.maxprice gt $_CEO.money/2">
							<remove_value name="$macroList.{$macroList.indexof.{$macro}}"/>
							<continue />
						</do_if>
						<!-- superdirty Hack to find primarypurpose because ES is stupid!!! -->
						<substitute_text text="$testmacro" source="$macro.id">
							<replace string="'builder'" with="'match'" />
							<replace string="'xenon_outk'" with="'match'" />
						</substitute_text>
						<do_if value="$testmacro != $macro.id">
							<set_value name="$primarypurpose" exact="'build'"/>
						</do_if>
						<do_else>
							<substitute_text text="$testmacro" source="$macro.id">
								<replace string="'mine'" with="'match'" />
								<replace string="'collect'" with="'match'" />
								<replace string="'ship_04_mk2'" with="'match'" />
								<replace string="'ore'" with="'match'" />
								<replace string="'gas'" with="'match'" />
							</substitute_text>
							<do_if value="$testmacro != $macro.id">
								<set_value name="$primarypurpose" exact="'mine'"/>
							</do_if>
							<do_else>
								<substitute_text text="$testmacro" source="$macro.id">
									<replace string="'cargo'" with="'match'" />
									<replace string="'pir'" with="'match'" />
									<replace string="'contain'" with="'match'" />
									<replace string="'energ'" with="'match'" />
									<replace string="'liquid'" with="'match'" />
									<replace string="'bulk'" with="'match'" />
									<replace string="'fuel'" with="'match'" />
									<replace string="'repair'" with="'match'" />
									<replace string="'hybrid'" with="'match'" />
									<replace string="'ship_04'" with="'match'" />
									<replace string="'ship_01'" with="'match'" />
									<replace string="'_tls'" with="'match'" />
									<replace string="'transpo'" with="'match'" />
								</substitute_text>
								<do_if value="$testmacro != $macro.id">
									<set_value name="$primarypurpose" exact="'trade'"/>
								</do_if>
								<do_else>
									<set_value name="$primarypurpose" exact="'fight'"/>
								</do_else>
							</do_else>
						</do_else>
						<remove_value name="$testmacro"/>
						<!-- small macro collection -->
						<do_if value="typeof $firstChoice == datatype.macro and typeof $secondChoice == datatype.macro and typeof $thirdChoice == datatype.macro and typeof $fourthChoice == datatype.macro">
							<break />
						</do_if>
						<do_elseif value="typeof $firstChoice != datatype.macro and $primarypurpose == $firstChoice">
							<set_value name="$firstChoice" exact="$macro"/>
						</do_elseif>
						<do_elseif value="typeof $secondChoice != datatype.macro and $primarypurpose == $secondChoice">
							<set_value name="$secondChoice" exact="$macro"/>
						</do_elseif>
						<do_elseif value="typeof $thirdChoice != datatype.macro and $primarypurpose == $thirdChoice">
							<set_value name="$thirdChoice" exact="$macro"/>
						</do_elseif>
						<do_elseif value="typeof $fourthChoice != datatype.macro" chance="if $_CEO.$style == 'mercenary' then 0 else 100">
							<set_value name="$fourthChoice" exact="$macro"/>
						</do_elseif>
						<remove_value name="$macroList.{$macroList.indexof.{$macro}}"/>
					</do_all>
					<remove_value name="$macroList"/>
					<remove_value name="$wishlist"/>
					<remove_value name="$blacklist"/>
					<remove_value name="$primarypurpose"/>
<set_value name="$text3" exact="'** macro-results: %1 - %2 - %3 - %4 \n'.[$firstChoice, $secondChoice, $thirdChoice, $fourthChoice]" operation="add"/>
<set_value name="$text3" exact="'** macro-class: $%1 - $%2 - $%3 - $%4 \n'.[@$firstChoice.class, @$secondChoice.class, @$thirdChoice.class, @$fourthChoice.class]" operation="add" chance="0"/>
					<!-- lets see what we have here -->
					<set_value name="$macro" exact="null"/>
					<do_if value="typeof $firstChoice == datatype.macro and $ShipYardOfTrust.tradenpc.{'$%1'.[$firstChoice.class]}?" chance="if typeof $firstChoice == datatype.macro and $_CEO.money lt ($tmpConfig.$minBuyShipTop *2) and $firstChoice.ware.maxprice? and $firstChoice.ware.maxprice gt $_CEO.money/4 then 100-( ( ($_CEO.money/4)/$firstChoice.ware.maxprice )*100 ) else 100">
						<set_value name="$macro" exact="$firstChoice"/>
					</do_if>
					<do_elseif value="typeof $secondChoice == datatype.macro and $ShipYardOfTrust.tradenpc.{'$%1'.[$secondChoice.class]}?" chance="if typeof $secondChoice == datatype.macro and $_CEO.money lt ($tmpConfig.$minBuyShipTop *2) and $secondChoice.ware.maxprice? and $secondChoice.ware.maxprice gt $_CEO.money/4 then 100-( ( ($_CEO.money/4)/$secondChoice.ware.maxprice )*100 ) else 100">
						<set_value name="$macro" exact="$secondChoice"/>
					</do_elseif>
					<do_elseif value="typeof $thirdChoice == datatype.macro and $ShipYardOfTrust.tradenpc.{'$%1'.[$thirdChoice.class]}?" chance="if typeof $thirdChoice == datatype.macro and $_CEO.money lt ($tmpConfig.$minBuyShipTop *2) and $thirdChoice.ware.maxprice? and $thirdChoice.ware.maxprice gt $_CEO.money/4 then 100-( ( ($_CEO.money/4)/$thirdChoice.ware.maxprice )*100 ) else 100">
						<set_value name="$macro" exact="$thirdChoice"/>
					</do_elseif>
					<do_elseif value="typeof $fourthChoice == datatype.macro and $ShipYardOfTrust.tradenpc.{'$%1'.[$fourthChoice.class]}?" chance="if typeof $fourthChoice == datatype.macro and $_CEO.money lt ($tmpConfig.$minBuyShipTop *2) and $fourthChoice.ware.maxprice? and $fourthChoice.ware.maxprice gt $_CEO.money/4 then 100-( ( ($_CEO.money/4)/$fourthChoice.ware.maxprice )*100 ) else 100">
						<set_value name="$macro" exact="$fourthChoice"/>
					</do_elseif>
					<remove_value name="$firstChoice"/>
					<remove_value name="$secondChoice"/>
					<remove_value name="$thirdChoice"/>
					<remove_value name="$fourthChoice"/>

					<do_if value="typeof $macro == datatype.macro and $ShipYardOfTrust.exists">
						<do_if value="@$ShipYardOfTrust.tradenpc.$orders.count gt 1 and not $ShipYardOfTrust.tradenpc.$denyBuildRandomNPC?" comment="cheat" chance="($tmpConfig.$cheat? or (not $ShipYardOfTrust.isplayerowned and $tmpConfig.$cheatNPC? and $tmpConfig.$cheatNPC)) * 100">

							<set_value name="$temp_Objects" exact="$ShipYardOfTrust" />
							<include_actions ref="md.MM_Corps__Data.MMCData_do_cheatressources" />

						</do_if>
<set_value name="$text2" exact="'\n* Order: Ship: %1 SY: %2 [%3] %4 \n'.[$macro.id, $ShipYardOfTrust.knownname, $ShipYardOfTrust.zone.knownname, @$ShipYardOfTrust.tradenpc.$orders.count]" operation="add"/>
						<signal_objects object="$ShipYardOfTrust" param="'SHIPORDER'" param2="[$macro, $_faction, $_CEO]" />
					</do_if>
					<do_else>
<set_value name="$text3" exact="'** No Order SY:%1 Macro:%2\n'.[$ShipYardOfTrust, $macro]" operation="add"/>
					</do_else>
					<remove_value name="$macro"/>
					<remove_value name="$ShipYardOfTrust"/>
				</do_if>
				<do_else>
<set_value name="$text3" exact="'** No SY available\n'" operation="add"/>
				</do_else>
				<remove_value name="$shipparts"/>
			</actions>
		</library>

		<!-- 
		<set_value name="$Objects" exact="[]"/>
		<set_value name="$validSpaces" exact="[]"/>
		<set_value name="$amount" exact="$tmpConfig.$amountPerSpace"/>
		<set_value name="$checkForNewJob" exact="[]"/>
		<include_actions ref="md.MM_Corps__Data.MMCData_check_jobs_spaces" />
		<remove_value name="$temp_Spaces"/>
		-->
		<library name="MMCData_check_jobs_spaces">
			<actions>
				<create_list name="$temp_Spaces"/>
				<do_all exact="$validSpaces.count" counter="$xy">
					<do_all exact="$amount">
						<append_to_list name="$temp_Spaces" exact="$validSpaces.{$xy}"/>
					</do_all>
				</do_all>
				<remove_value name="$validSpaces"/>
				<remove_value name="$amount"/>
<set_value name="$text3" exact="'- Spaces: %1 Units:%2'.[$temp_Spaces.count, $Objects.count]" operation="add" />

				<do_all exact="$Objects.count" counter="$y">
<set_value name="$text3" exact="' #[Sfo: %1]'.[$Objects.{$y}.pilot.$params.$sfo]" operation="add" chance="if $Objects.{$y}.pilot.$params.$sfo? then 100 else 0" />
					<set_value name="$rangematch" exact="false"/>
					<set_value name="$area" exact="null"/>
					<do_if value="$Objects.{$y}.pilot.$params.$range? and (typeof $Objects.{$y}.pilot.$params.$range).isstring">
						<set_value name="$area" exact="if $Objects.{$y}.pilot.$params.$range == 'cluster' then $Objects.{$y}.cluster else if $Objects.{$y}.pilot.$params.$range == 'sector' then $Objects.{$y}.sector else $Objects.{$y}.zone"/>
					</do_if>
					<do_elseif value="$Objects.{$y}.pilot.$params.$range? and typeof $Objects.{$y}.pilot.$params.$range == datatype.component">
						<set_value name="$area" exact="$Objects.{$y}.pilot.$params.$range"/>
					</do_elseif>
					<do_elseif value="$Objects.{$y}.pilot.$updateRange? and typeof $Objects.{$y}.pilot.$updateRange == datatype.component">
						<set_value name="$area" exact="$Objects.{$y}.pilot.$updateRange"/>
					</do_elseif>
					<do_elseif value="$Objects.{$y}.pilot.$whatido == 'move.patrol.route' or $Objects.{$y}.pilot.$params.$range? and typeof $Objects.{$y}.pilot.$params.$range == datatype.list">
						<do_if value="$Objects.{$y}.pilot.$params.$route? and typeof $Objects.{$y}.pilot.$params.$route == datatype.list">
							<set_value name="$spaces" exact="$Objects.{$y}.pilot.$params.$route.clone"/>
						</do_if>
						<do_elseif value="$Objects.{$y}.pilot.$params.$range? and typeof $Objects.{$y}.pilot.$params.$range == datatype.list">
							<set_value name="$spaces" exact="$Objects.{$y}.pilot.$params.$range.clone"/>
						</do_elseif>
						<do_all exact="$spaces.count" counter="$z">
							<set_value name="$area" exact="$spaces.{$z}"/>
							<do_if value="$temp_Spaces.indexof.{$area}">
								<remove_value name="$temp_Spaces.{$temp_Spaces.indexof.{$area}}"/>
								<set_value name="$rangematch" exact="true"/>
							</do_if>
							<do_elseif value="$temp_Spaces.indexof.{$area.sector}">
								<remove_value name="$temp_Spaces.{$temp_Spaces.indexof.{$area.sector}}"/>
								<set_value name="$rangematch" exact="true"/>
							</do_elseif>
							<do_elseif value="$temp_Spaces.indexof.{$area.cluster}">
								<remove_value name="$temp_Spaces.{$temp_Spaces.indexof.{$area.cluster}}"/>
								<set_value name="$rangematch" exact="true"/>
							</do_elseif>
						</do_all>
						<remove_value name="$spaces"/>
					</do_elseif>
			
					<do_if value="$area and $temp_Spaces.indexof.{$area}">
						<do_if value="$Objects.{$y}.pilot.$params.$sfo? and $Objects.{$y}.pilot.$params.$sfo == 2 and $area.owner and  not $area.owner.hasrelation.enemy.{$Objects.{$y}.owner}">
							<remove_value name="$Objects.{$y}.pilot.$params.$sfo"/>
						</do_if>
						<remove_value name="$temp_Spaces.{$temp_Spaces.indexof.{$area}}"/>
					</do_if>
					<do_elseif value="$rangematch">
						<continue/>
					</do_elseif>
					<do_elseif value="$Objects.{$y}.pilot.$params.$sfo?">
						<do_if value="$Objects.{$y}.pilot.$params.$sfo == 2 and $Objects.{$y}.zone.owner and not $Objects.{$y}.zone.owner.hasrelation.enemy.{$Objects.{$y}.owner}">
							<set_value name="$Objects.{$y}.pilot.$params.$sfo" exact="3"/>
						</do_if>
						<continue/>
					</do_elseif>
					<do_elseif value="$temp_Spaces.count == 0">
						<append_to_list name="$checkForNewJob" exact="$Objects.{$y}"/>
					</do_elseif>
					<do_else>
						<append_to_list name="$checkForNewJob" exact="$Objects.{$y}"/>
					</do_else>
				</do_all>
				<remove_value name="$Objects"/>
				<remove_value name="$area"/>
				<remove_value name="$rangematch"/>
<set_value name="$text3" exact="'- Spaces left: %1 Units2Check:%2'.[$temp_Spaces.count, $checkForNewJob.count]" operation="add" />
			</actions>
		</library>

		<!-- 
		<set_value name="$_CEO" exact="global.$corp_CEO" />
		<set_value name="$_faction" exact="faction.player" />
		<include_actions ref="md.MM_Corps__Data.MMCData_doworker_include_donation" />
		-->
		<library name="MMCData_doworker_include_donation">
			<actions>
				<do_if value="not $validZonesCore? or not $validSectors?">
					<set_value name="$faction" exact="$_faction"/>
					<include_actions ref="md.MM_Corps__Data.MMCData_find_space" />
				</do_if>
				<set_value name="$earnings" exact="0Cr" />
		
				<set_value name="$donation" exact="$tmpConfig.$donationTax" />
				<set_value name="$relationchange" exact="0LF - (0.00004LF + (0.00016LF / (10000000Cr)LF * ($donation)LF))" />

				<do_if value="$_CEO.$style == 'pirate'">
					<do_all exact="$validSectors.count" counter="$x">
						<find_station name="$temp_Station" space="$validSectors.{$x}" functional="true" multiple="true">
							<match owner="$_faction"/>
						</find_station>
						<do_if value="$temp_Station.count">
							<find_station name="$temp_Stations" space="$validSectors.{$x}" functional="true" multiple="true">
								<match owner="faction.ownerless" negate="true"/>
								<match owner="faction.neutral" negate="true"/>
								<match owner="faction.friend" negate="true"/>
								<match owner="$_faction" negate="true"/>
								<match_relation faction="$_faction" relation="neutral" comparison="le"/>
							</find_station>
							<do_all exact="$temp_Stations.count" counter="$y">

								<set_value name="$chance" exact="30" />
								<do_if value="$validZonesCore.indexof.{$temp_Stations.{$y}.zone}">
									<set_value name="$chance" exact="90" />
								</do_if>
								<do_elseif value="$validZones.indexof.{$temp_Stations.{$y}.zone}">
									<set_value name="$chance" exact="50" />
								</do_elseif>

								<do_if value="$temp_Stations.{$y}.tradenpc.exists and $temp_Stations.{$y}.tradenpc.money and $temp_Stations.{$y}.tradenpc.money/5 gt $donation" chance="$chance">
									<transfer_money from="$temp_Stations.{$y}.tradenpc" to="$_CEO" amount="$donation"/>
									<set_value name="$earnings" exact="$donation" operation="add"/>
									<add_faction_relation faction="$temp_Stations.{$y}.owner" otherfaction="$_faction" value="$relationchange*2"/>
									<write_to_logbook category="general" text="'%1 from %2 pay tax of %3Cr to %4.'.[$temp_Stations.{$y}.tradenpc.name, $temp_Stations.{$y}.knownname, $donation.formatted.default, $_faction.name]" chance="if $temp_Stations.{$y}.isplayerowned then 100 else 0"/>
								</do_if>
								<do_else>
									<add_faction_relation faction="$temp_Stations.{$y}.owner" otherfaction="$_faction" value="$relationchange"/>
								</do_else>
							</do_all>
							<remove_value name="$temp_Stations"/>
						</do_if>
						<remove_value name="$temp_Station"/>
						<remove_value name="$chance"/>
					</do_all>
				</do_if>
				<do_else>
					<do_all exact="$validZonesCore.count" counter="$x">
						<do_if value="$validZonesCore.{$x}.owner == $_faction">
							<find_station name="$temp_Stations" space="$validZonesCore.{$x}" functional="true" multiple="true">
								<match owner="faction.ownerless" negate="true"/>
								<match owner="faction.neutral" negate="true"/>
								<match owner="faction.friend" negate="true"/>
								<match owner="$_faction" negate="true"/>
								<match_relation faction="$_faction" relation="neutral" comparison="ge"/>
							</find_station>
							<do_all exact="$temp_Stations.count" counter="$y">
								<do_if value="$temp_Stations.{$y}.tradenpc.exists and $temp_Stations.{$y}.tradenpc.money and $temp_Stations.{$y}.tradenpc.money/10 gt $donation">
									<transfer_money from="$temp_Stations.{$y}.tradenpc" to="$_CEO" amount="$donation"/>
									<set_value name="$earnings" exact="$donation" operation="add"/>
									<add_faction_relation faction="$temp_Stations.{$y}.owner" otherfaction="$_faction" value="$relationchange" chance="($temp_Stations.{$y}.owner.relationto.{$_faction} le $_faction.relation.friend.mid) *30"/>
									<write_to_logbook category="general" text="'%1 from %2 pay tax of %3Cr to %4.'.[$temp_Stations.{$y}.tradenpc.name, $temp_Stations.{$y}.knownname, $donation.formatted.default, $_faction.name]" chance="if $temp_Stations.{$y}.isplayerowned then 100 else 0"/>
								</do_if>
								<do_elseif value="$temp_Stations.{$y}.owner and $temp_Stations.{$y}.owner.relationto.{$_faction} gt $_faction.relation.neutral.min">
									<add_faction_relation faction="$temp_Stations.{$y}.owner" otherfaction="$_faction" value="$relationchange"/>
								</do_elseif>
							</do_all>
							<remove_value name="$temp_Stations"/>
						</do_if>
					</do_all>
				</do_else>
<set_value name="$text2" exact="'\n# Donation collected %1 Cr #\n'.[$earnings.formatted.default]" operation="add" />
				<remove_value name="$earnings"/>
				<remove_value name="$donation"/>
				<remove_value name="$relationchange"/>
			</actions>
		</library>

		<!-- 
		* $tmpConfig
		* $_CEO
		* $ship***
		* $valid***
		<include_actions ref="md.MM_Corps__Data.MMCData_doworker_include_scouts" />
		-->
		<library name="MMCData_doworker_include_scouts">
			<actions>
				<set_value name="$tmp" exact="$tmpConfig.$scouts"/>
				<do_all exact="$shipDoUnknown.count" counter="$r">
					<do_if value="$shipDoUnknown.{$r}.pilot.$whatido" exact="'move.voyager'">
						<set_value name="$tmp" operation="subtract"/>
					</do_if>
					<do_if value="$tmp le 0">
						<break />
					</do_if>
				</do_all>

				<do_if value="$tmp gt 0">
					<set_value name="$tmp" exact="null"/>
					<!-- shipNothingTodo -->
					<do_all exact="$shipNothingTodo.count" counter="$r">
						<do_if value="$shipNothingTodo.{$r}.primarypurpose == objectpurpose.fight">
							<set_value name="$tmp" exact="$shipNothingTodo.{$r}"/>
							<break />
						</do_if>
						<do_elseif value="$shipNothingTodo.{$r}.primarypurpose != objectpurpose.build">
							<set_value name="$tmp" exact="$shipNothingTodo.{$r}"/>
						</do_elseif>
					</do_all>
					<do_if value="$tmp">
						<remove_value name="$shipNothingTodo.{$shipNothingTodo.indexof.{$tmp}}"/>
					</do_if>
					<!-- shipDoEscort -->
					<do_if value="$tmp" negate="true">
						<do_all exact="$shipDoEscort.count" counter="$r">
							<do_if value="$shipDoEscort.{$r}.primarypurpose == objectpurpose.fight">
								<set_value name="$tmp" exact="$shipDoEscort.{$r}"/>
							</do_if>
							<do_elseif value="$shipDoEscort.{$r}.primarypurpose != objectpurpose.build">
								<set_value name="$tmp" exact="$shipDoEscort.{$r}"/>
								<break />
							</do_elseif>
						</do_all>
						<do_if value="$tmp">
							<remove_value name="$shipDoEscort.{$shipDoEscort.indexof.{$tmp}}"/>
						</do_if>
					</do_if>
					<!-- start Job / create order -->
					<do_if value="$tmp">
						<start_script object="$tmp.pilot" name="'move.shipjobs'">
							<param name="run_script_name" value="'move.voyager'"/>
							<param name="run_script_param" value="[['ignoreownedzones', true], ['workspace', [player.galaxy]]]"/>
						</start_script>
					</do_if>
					<do_else>
						<append_to_list name="$tmp_jobs" exact="['move.voyager', if @$validZonesCore.count then $validZonesCore.random else null, [['ignoreownedzones', true], ['workspace', [player.galaxy]]]]"/>
					</do_else>
				</do_if>
				<remove_value name="$tmp"/>
			</actions>
		</library>

		<!--
		* $tmp_jobs
		* $tmpConfig
		* $valid***
		* $style
		<include_actions ref="md.MM_Corps__Data.MMCData_doworker_include_patrol" />
		-->
		<library name="MMCData_doworker_include_patrol">
			<actions>
				<create_list name="$checkForNewJob"/>
				<create_list name="$needEscort"/>
				<create_list name="$patrolZone"/>
				<create_list name="$patrolSector"/>
				<create_list name="$patrolCluster"/>
				<create_list name="$patrolStation"/>
				<create_list name="$patrolRoute"/>
				<create_list name="$patrolUnknown"/>
				<!-- sort patrols -->
				<do_all exact="$shipDoPatrol.count" counter="$r">
					<do_if value="$shipDoPatrol.{$r}.pilot.$params.$sfo? and $shipDoPatrol.{$r}.pilot.$params.$sfo">
						<continue/>
					</do_if>
					<do_elseif value="$shipDoPatrol.{$r}.pilot.$params.$range? and (typeof $shipDoPatrol.{$r}.pilot.$params.$range).isstring" chance="if $shipDoPatrol.{$r}.pilot.$whatido? and $shipDoPatrol.{$r}.pilot.$whatido == 'move.patrol.route' then 0 else 100">
						<do_if value="$shipDoPatrol.{$r}.pilot.$params.$range == 'zone'">
							<append_to_list name="$patrolZone" exact="$shipDoPatrol.{$r}"/>
						</do_if>
						<do_elseif value="$shipDoPatrol.{$r}.pilot.$params.$range == 'sector'">
							<append_to_list name="$patrolSector" exact="$shipDoPatrol.{$r}"/>
						</do_elseif>
						<do_elseif value="$shipDoPatrol.{$r}.pilot.$params.$range == 'cluster'">
							<append_to_list name="$patrolCluster" exact="$shipDoPatrol.{$r}"/>
						</do_elseif>
						<do_elseif value="$shipDoPatrol.{$r}.pilot.$params.$range == 'station'">
							<append_to_list name="$patrolStation" exact="$shipDoPatrol.{$r}"/>
						</do_elseif>
						<do_else>
							<append_to_list name="$patrolUnknown" exact="$shipDoPatrol.{$r}"/>
						</do_else>
					</do_elseif>
					<do_elseif value="$shipDoPatrol.{$r}.pilot.$params.$range? and typeof $shipDoPatrol.{$r}.pilot.$params.$range == datatype.component" chance="if $shipDoPatrol.{$r}.pilot.$whatido? and $shipDoPatrol.{$r}.pilot.$whatido == 'move.patrol.route' then 0 else 100">
						<do_if value="$shipDoPatrol.{$r}.pilot.$params.$range.isclass.zone">
							<append_to_list name="$patrolZone" exact="$shipDoPatrol.{$r}"/>
						</do_if>
						<do_elseif value="$shipDoPatrol.{$r}.pilot.$params.$range.isclass.sector">
							<append_to_list name="$patrolSector" exact="$shipDoPatrol.{$r}"/>
						</do_elseif>
						<do_elseif value="$shipDoPatrol.{$r}.pilot.$params.$range.isclass.cluster">
							<append_to_list name="$patrolCluster" exact="$shipDoPatrol.{$r}"/>
						</do_elseif>
						<do_else>
							<append_to_list name="$patrolUnknown" exact="$shipDoPatrol.{$r}"/>
						</do_else>
					</do_elseif>
					<do_elseif value="($shipDoPatrol.{$r}.pilot.$whatido? and $shipDoPatrol.{$r}.pilot.$whatido == 'move.patrol.route') or ($shipDoPatrol.{$r}.pilot.$params.$range? and typeof $shipDoPatrol.{$r}.pilot.$params.$range == datatype.list)">
						<do_if value="$shipDoPatrol.{$r}.pilot.$updateRange? and $shipDoPatrol.{$r}.pilot.$updateRange.isclass.zone">
							<append_to_list name="$patrolZone" exact="$shipDoPatrol.{$r}"/>
						</do_if>
						<do_elseif value="$shipDoPatrol.{$r}.pilot.$updateRange? and $shipDoPatrol.{$r}.pilot.$updateRange.isclass.sector">
							<append_to_list name="$patrolSector" exact="$shipDoPatrol.{$r}"/>
						</do_elseif>
						<do_elseif value="$shipDoPatrol.{$r}.pilot.$updateRange? and $shipDoPatrol.{$r}.pilot.$updateRange.isclass.cluster">
							<append_to_list name="$patrolCluster" exact="$shipDoPatrol.{$r}"/>
						</do_elseif>
						<do_else>
							<append_to_list name="$patrolRoute" exact="$shipDoPatrol.{$r}"/>
						</do_else>
					</do_elseif>
					<do_else>
						<append_to_list name="$patrolUnknown" exact="$shipDoPatrol.{$r}"/>
					</do_else>
				</do_all>
				<!-- priority of patrols -->
				<do_if value="$_CEO.$style == 'cooperative'">
					<set_value name="$check" exact="['route','corezone','station','sector','cluster']"/>
				</do_if>
				<do_else>
					<set_value name="$check" exact="['cluster','corezone','sector','route']"/>
				</do_else>
				<do_all exact="$check.count" counter="$r">
					<set_value name="$amount" exact="false" comment="workaround"/>
<set_value name="$text3" exact="'\n** Check : [%1] '.[$check.{$r}]" operation="add" />
					<do_if value="$check.{$r} == 'zone' or $check.{$r} == 'corezone'">
						<set_value name="$Objects" exact="$patrolZone.clone"/>
						<do_if value="$validZonesHotZone.count" chance="if $validZonesHotZone.count and $validZonesCore.count lt $validZonesHotZone.count*3 then 70 else 0">
							<set_value name="$validSpaces" exact="$validZonesHotZone.clone"/>
							<do_all exact="$validZonesCore.count - $validZonesHotZone.count">
								<append_to_list name="$validSpaces" exact="$validZonesHotZone.random"/>
							</do_all>
						</do_if>
						<do_else>
							<set_value name="$validSpaces" exact="$validZonesCore.clone"/>
						</do_else>
						<set_value name="$amount" exact="$tmpConfig.$zonePatrol"/>
					</do_if>
					<do_elseif value="$check.{$r} == 'sector'">
						<set_value name="$Objects" exact="$patrolSector.clone"/>
						<set_value name="$validSpaces" exact="$validSectors.clone"/>
						<set_value name="$amount" exact="$tmpConfig.$sectorPatrol"/>
					</do_elseif>
					<do_elseif value="$check.{$r} == 'cluster'">
						<set_value name="$Objects" exact="$patrolCluster.clone"/>
						<do_if value="$patrolCluster.count == 0 and $patrolSector.count ge 3" comment="fallback: vanilla patrol doesn't support cluster">
							<create_group groupname="$tmp_space" />
							<do_all exact="$validCluster.count" counter="$s">
								<find_sector groupname="$tmp_space" space="$validCluster.{$s}" multiple="true" />
							</do_all>
							<set_value name="$validSpaces" exact="$tmp_space.list.clone"/>
							<remove_value name="$tmp_space"/>
						</do_if>
						<do_else>
							<set_value name="$validSpaces" exact="$validCluster.clone"/>
						</do_else>
						<set_value name="$amount" exact="$tmpConfig.$clusterPatrol"/>
					</do_elseif>
					<do_elseif value="$check.{$r} == 'route' or $check.{$r} == 'station'">
						<set_value name="$Objects" exact="$patrolRoute.clone"/>
						<do_if value="$validZonesHotZone.count" chance="if $validZonesHotZone.count and $validZonesCore.count lt $validZonesHotZone.count*3 then 70 else 0">
							<set_value name="$validSpaces" exact="$validZonesHotZone.clone"/>
							<do_all exact="$validZonesCore.count - $validZonesHotZone.count">
								<append_to_list name="$validSpaces" exact="$validZonesHotZone.random"/>
							</do_all>
						</do_if>
						<do_else>
							<set_value name="$validSpaces" exact="$validZonesCore.clone"/>
						</do_else>
						<set_value name="$amount" exact="$tmpConfig.$stationPatrol"/>

						<do_if value="$amount and $Objects.count and $validSpaces.count">
							<include_actions ref="md.MM_Corps__Data.MMCData_check_jobs_spaces" />
							<!-- ToDo route per cluster/sector -->
							<do_if value="$temp_Spaces.count">
								<create_list name="$tmp"/>
								<do_all exact="$temp_Spaces.count" counter="$s">
									<do_if value="$temp_Spaces.{$s}.isclass.zone and $tmp.indexof.{$temp_Spaces.{$s}} == 0 and ($tmp.count == 0 or $temp_Spaces.{$s}.sector == @$tmp.{1}.sector)">
										<append_to_list name="$tmp" exact="$temp_Spaces.{$s}"/>
									</do_if>
									<do_elseif value="$temp_Spaces.{$s}.isclass.[class.sector, class.cluster] and $tmp.count == 0">
										<find_zone name="$tmp" space="$temp_Spaces.{$s}" tempzone="false" mapzone="true" multiple="true">
											<match_relation faction="$_faction" relation="neutral" comparison="ge"/>
										</find_zone>
										<break />
									</do_elseif>
								</do_all>
								<append_to_list name="$tmp_jobs" exact="['move.patrol.route', $tmp.random, [ ['route', $tmp], ['allowstations', false] ] ]" chance="if $tmp.count gt 1 then 100 else 0"/>
							</do_if>
						</do_if>
						<do_elseif value="$amount and $validSpaces.count">
							<append_to_list name="$tmp_jobs" exact="['move.patrol.route', $validSpaces.random, [ ['route', $validSpaces], ['allowstations', false] ] ]" chance="if $validSpaces.count gt 1 then 100 else 0"/>
						</do_elseif>
						<!-- ToDo route per cluster/sector -->
					</do_elseif>
					<do_elseif value="$check.{$r} == 'station'">
						<!-- ToDo -->
					</do_elseif>
					<!-- common worker of (core)zone/sector/cluster -->
					<do_if value="$check.{$r}" list="['zone','corezone','sector','cluster']">
						<do_if value="$amount and $Objects.count and $validSpaces.count">
							<include_actions ref="md.MM_Corps__Data.MMCData_check_jobs_spaces" />

							<do_if value="$temp_Spaces.count">
								<do_all exact="$temp_Spaces.count" counter="$s">
									<append_to_list name="$tmp_jobs" exact="[if global.$nfconfig.$Check? then 'BR.move.patrol' else 'move.patrol', $temp_Spaces.{$s}, [ ['range', $temp_Spaces.{$s}] ] ]"/>
								</do_all>
							</do_if>
						</do_if>
						<do_elseif value="$amount and $validSpaces.count">
							<set_value name="$tmp" exact="$validSpaces.random"/>
							<append_to_list name="$tmp_jobs" exact="[if global.$nfconfig.$Check? then 'BR.move.patrol' else 'move.patrol', $tmp, [ ['range', $tmp] ] ]"/>
						</do_elseif>
					</do_if>
					<!-- clear -->
					<remove_value name="$tmp"/>
					<remove_value name="$Objects"/>
					<remove_value name="$validSpaces"/>
					<remove_value name="$amount"/>
					<remove_value name="$temp_Spaces"/>
				</do_all>
<!--set_value name="$text3" exact="'\n'" operation="add" chance="if $check.count then 100 else 0" /-->

<set_value name="$text2" exact="'* DoJob cfnJ%1 --'.[$checkForNewJob.count]" operation="add" />
				<!-- reorganice outdatet jobs -->
				<do_if value="$checkForNewJob.count and $tmp_jobs.count">
					<do_all exact="$checkForNewJob.count" counter="$r" reverse="true">
						<set_value name="$tmp" exact="$tmp_jobs.count"/>
						<set_value name="$plunder" exact="if $_CEO.$style == 'pirate' or $_CEO.$isInvader? then true else false"/>
						<set_value name="$Object" exact="$checkForNewJob.{$r}" />
						<set_value name="$sectors" exact="$validSectors.clone" />
						<include_actions ref="md.MM_Corps__Data.MMCData_ship_job" />
						<do_if value="$tmp != $tmp_jobs.count">
							<remove_value name="$checkForNewJob.{$r}"/>
						</do_if>
					</do_all>
					<remove_value name="$tmp"/>
				</do_if>
<set_value name="$text2" exact="' cfnJ: %1 esc: %2 needE: %3 \n'.[$checkForNewJob.count, $tmpConfig.$patrolEscorts, $needEscort.count]" operation="add" />
				<!-- nothing valid todo, then do escort -->
				<do_if value="$tmpConfig.$patrolEscorts and $checkForNewJob.count">
					<set_value name="$tmp" exact="$checkForNewJob.count"/>
					<!-- find leaders -->
					<set_value name="$tmp_todo" exact="[$patrolCluster, $patrolRoute, $patrolSector, $patrolZone]"/>
					<do_all exact="$tmp_todo.count" counter="$r">
						<set_value name="$tmp_List" exact="$tmp_todo.{$r}.clone"/>
						<do_all exact="$tmp_List.count" counter="$s" chance="if $tmp then 100 else 0">
							<do_if value="$checkForNewJob.indexof.{$tmp_List.{$s}} == 0 and $tmp_List.{$s}.isclass.[class.ship_l, class.ship_xl] and $tmp_List.{$s}.subordinates.count lt $tmpConfig.$patrolEscorts">
								<append_to_list name="$needEscort" exact="$tmp_List.{$s}"/>
								<set_value name="$tmp" operation="subtract"/>
							</do_if>
							<do_if value="$tmp" negate="true">
								<break />
							</do_if>
						</do_all>
						<remove_value name="$tmp_List"/>
						<do_if value="$tmp" negate="true">
							<break />
						</do_if>
					</do_all>
					<remove_value name="$tmp_todo"/>
					<!-- add escort -->
					<set_value name="$tmp" exact="$needEscort.count"/>
					<do_all exact="$checkForNewJob.count" counter="$r" reverse="true" chance="if $tmp then 100 else 0">
						<set_value name="$Object" exact="$checkForNewJob.{$r}" />
						<set_value name="$newcommander" exact="null" />
						<do_all exact="$needEscort.count" counter="$s">
							<do_if value="$needEscort.{$s}.isoperational">
								<set_value name="$newcommander" exact="$needEscort.{$s}" />
								<set_value name="$tmp" operation="subtract"/>
								<remove_value name="$needEscort.{$s}"/>
								<break />
							</do_if>
						</do_all>
						<do_if value="$newcommander.exists and $newcommander.isclass.[class.ship_l, class.ship_xl]">

							<set_value name="$param" exact="[['target', $newcommander]]"/>
							<set_value name="$script" exact="if global.$nfconfig.$Check? then 'BR.move.escort' else 'move.escort'"/>
							<include_actions ref="md.MM_Corps__Data.MMCData_ship_job_runscript" />

							<!--set_object_commander object="$Object" commander="$newcommander" />
							<start_script object="$Object.pilot" name="'move.shipjobs'">
								<param name="run_script_name" value="if global.$nfconfig.$Check? then 'BR.move.escort' else 'move.escort'"/>
								<param name="run_script_param" value="[['target', $newcommander]]"/>
							</start_script-->
							<remove_value name="$checkForNewJob.{$r}"/>
						</do_if>
						<remove_value name="$newcommander"/>
						<do_if value="$tmp" negate="true">
							<break />
						</do_if>
					</do_all>
				</do_if>
				<!-- set free patrols for fleetactivity -->
				<do_if value="$checkForNewJob.count and $tmpConfig.$fleets">
					<do_all exact="$checkForNewJob.count" counter="$r" reverse="true">
						<do_if value="$checkForNewJob.{$r}.pilot.exists and not $checkForNewJob.{$r}.pilot.$params?">
							<set_value name="$checkForNewJob.{$r}.pilot.$params" exact="table[]"/>
						</do_if>
						<set_value name="$checkForNewJob.{$r}.pilot.$params.$sfo" exact="3" chance="if $checkForNewJob.{$r}.pilot.exists and not $checkForNewJob.{$r}.pilot.$params.$sfo? then 100 else 0"/>
					</do_all>
					<remove_value name="$tmp"/>
				</do_if>
				<!-- Jobs clear -->
				<remove_value name="$check"/>
				<remove_value name="$tmp"/>
				<remove_value name="$checkForNewJob"/>
				<remove_value name="$needEscort"/>
				<remove_value name="$patrolZone"/>
				<remove_value name="$patrolSector"/>
				<remove_value name="$patrolCluster"/>
				<remove_value name="$patrolStation"/>
				<remove_value name="$patrolRoute"/>
				<remove_value name="$patrolUnknown"/>
			</actions>
		</library>

		<!--
		* $shipDoEscort
		<include_actions ref="md.MM_Corps__Data.MMCData_doworker_include_escorts" />
		-->
		<library name="MMCData_doworker_include_escorts">
			<actions>
				<create_list name="$tempLeader"/>
				<create_list name="$checkForNewJob"/>

				<do_all exact="$shipDoEscort.count" counter="$x"> 
					<do_if value="$shipDoEscort.{$x}.isjobship">
						<continue />
					</do_if>
					<do_elseif value="$shipDoEscort.{$x}.ismission">
						<continue />
					</do_elseif>
					<do_if value="not $shipDoEscort.{$x}.commander or not $shipDoEscort.{$x}.commander.exists">
						<append_to_list name="$checkForNewJob" exact="$shipDoEscort.{$x}"/>
					</do_if>
					<do_elseif value="$shipDoEscort.indexof.{$shipDoEscort.{$x}.commander} and $shipDoEscort.{$x}.isclass.[class.ship_l, class.ship_xl]">
						<append_to_list name="$checkForNewJob" exact="$shipDoEscort.{$x}"/>
					</do_elseif>
					<do_elseif value="$tempLeader.indexof.{$shipDoEscort.{$x}.commander} == 0">
						<append_to_list name="$tempLeader" exact="$shipDoEscort.{$x}.commander"/>
					</do_elseif>
				</do_all>

				<do_all exact="$tempLeader.count" counter="$x" reverse="true">
					<do_if value="$tempLeader.{$x}.hullpercentage lt 95 or $tempLeader.{$x}.isboostactive or not $tempLeader.{$x}.pilot.$whatido?">
						<remove_value name="$tempLeader.{$x}"/>
						<continue />
					</do_if>
					<set_value name="$tmpVmax" exact="$tempLeader.{$x}.maxspeed"/> 
					<set_value name="$tmpVmax_sub" exact="$tmpVmax"/> 
					<do_all exact="$tempLeader.{$x}.subordinates.count" counter="$y">
						<do_if value="$tempLeader.{$x}.subordinates.{$y}.hullpercentage lt 95 or $tempLeader.{$x}.subordinates.{$y}.isboostactive or not $tempLeader.{$x}.subordinates.{$y}.isclass.[class.ship_l, class.ship_xl]">
							<continue />
						</do_if>
						<do_elseif value="$tempLeader.{$x}.subordinates.{$y}.maxspeed ge $tmpVmax_sub">
							<continue />
						</do_elseif>
						<do_else>
							<set_value name="$tmpVmax_sub" exact="$tempLeader.{$x}.subordinates.{$y}.maxspeed"/> 
						</do_else>
					</do_all> 
					<do_if value="$tmpVmax gt $tmpVmax_sub">
						<remove_value name="$tempLeader.{$x}"/>
					</do_if>
				</do_all> 
				<remove_value name="$tmpVmax"/>
				<remove_value name="$tmpVmax_sub"/>

				<do_all exact="$tempLeader.count" counter="$x" reverse="true">
					<do_if value="$tempLeader.{$x}.hullpercentage lt 95 or $tempLeader.{$x}.isboostactive">
						<continue />
					</do_if>
					<create_list name="$tempgroup"/>
					<set_value name="$tmpVmax_sub" exact="$tempLeader.{$x}.maxspeed"/> 
					<set_value name="$tmpNewLeader" exact="$tempLeader.{$x}"/>
					<append_to_list name="$tempgroup" exact="$tempLeader.{$x}"/> 
					<!-- check speed -->
					<do_all exact="$tempLeader.{$x}.subordinates.count" counter="$y">
						<do_if value="not $tempLeader.{$x}.subordinates.{$y}.isclass.[class.ship_l, class.ship_xl]">
							<continue />
						</do_if>
						<do_elseif value="$tempLeader.{$x}.subordinates.{$y}.hullpercentage lt 95 or $tempLeader.{$x}.subordinates.{$y}.isboostactive or $tempLeader.{$x}.subordinates.{$y}.maxspeed ge $tmpVmax_sub">
							<append_to_list name="$tempgroup" exact="$tempLeader.{$x}.subordinates.{$y}"/>
							<continue />
						</do_elseif>
						<do_else>
							<append_to_list name="$tempgroup" exact="$tempLeader.{$x}.subordinates.{$y}"/>
							<set_value name="$tmpVmax_sub" exact="$tempLeader.{$x}.subordinates.{$y}.maxspeed"/>
							<set_value name="$tmpNewLeader" exact="$tempLeader.{$x}.subordinates.{$y}"/> 
						</do_else>
					</do_all> 
					<!-- set new slowest ship as leader -->
					<do_if value="$tmpNewLeader != $tempLeader.{$x}">
						<remove_object_commander object="$tmpNewLeader" />
						<start_script object="$tmpNewLeader.pilot" name="'move.shipjobs'">
							<param name="run_script_name" value="$tempLeader.{$x}.pilot.$whatido"/>
							<param name="params" value="$tempLeader.{$x}.pilot.$params"/>
						</start_script>
						<remove_value name="$tempgroup.{$tempgroup.indexof.{$tmpNewLeader}}"/>
						<do_all exact="$tempgroup.count" counter="$y">
							<set_value name="$Object" exact="$tempgroup.{$y}"/>
							<set_value name="$param" exact="[['target', $tmpNewLeader]]"/>
							<set_value name="$script" exact="if global.$nfconfig.$Check? then 'BR.move.escort' else 'move.escort'"/>
							<include_actions ref="md.MM_Corps__Data.MMCData_ship_job_runscript" />
							<remove_value name="$Object"/>
							<!--set_object_commander object="$tempgroup.{$y}" commander="$tmpNewLeader" />
							<start_script object="$tempgroup.{$y}.pilot" name="'move.shipjobs'">
								<param name="run_script_name" value="if global.$nfconfig.$Check? then 'BR.move.escort' else 'move.escort'"/>
								<param name="run_script_param" value="[['target', $tmpNewLeader]]"/>
							</start_script-->
						</do_all> 
					</do_if>
					<remove_value name="$tempgroup"/>
					<remove_value name="$tmpNewLeader"/>
					<remove_value name="$tmpVmax_sub"/>
					<remove_value name="$tempLeader.{$x}"/>
				</do_all> 
				<remove_value name="$tempLeader"/>

				<!-- against lazy ships -->
				<do_if value="$checkForNewJob.count and $validSectors.count">
					<do_all exact="$checkForNewJob.count" counter="$r">
						<do_if value="$checkForNewJob.{$r}.primarypurpose == objectpurpose.build and not $checkForNewJob.{$r}.pilot.$traderNow?">
							<continue />
						</do_if>
						<set_value name="$plunder" exact="if $_CEO.$style == 'pirate' or $_CEO.$isInvader? then true else false"/>
						<set_value name="$Object" exact="$checkForNewJob.{$r}" />
						<set_value name="$sectors" exact="$validSectors.clone" />
						<include_actions ref="md.MM_Corps__Data.MMCData_ship_job" />
					</do_all>
				</do_if>
				<remove_value name="$checkForNewJob"/>
			</actions>
		</library>

		<!-- 
		* $tmpConfig
		* $ship***
		<include_actions ref="md.MM_Corps__Data.MMCData_doworker_include_invasion" />
		-->
		<library name="MMCData_doworker_include_invasion">
			<actions>
				<create_list name="$patrolSFO"/>
				<set_value name="$InvasionFleet" exact="null"/>
				<set_value name="$temp_invasion_starts" exact="false"/>
				<do_if value="true">
					<!-- TODO Find Fleet -->
					<do_all exact="$shipDoPatrol.count" counter="$r">
						<do_if value="$shipDoPatrol.{$r}.pilot.$params.$sfo? and $shipDoPatrol.{$r}.pilot.$params.$sfo">
							<do_if value="$shipDoPatrol.{$r}.pilot.$params.$sfo == 2">
								<do_if value="$shipDoPatrol.{$r}.zone.owner == $_faction">
									<find_station name="$enemyStations" space="$shipDoPatrol.{$r}.zone" functional="true" multiple="false">
										<match owner="faction.ownerless" negate="true"/>
										<match_relation faction="$_faction" relation="enemy" comparison="le"/>
									</find_station>
									<find_ship name="$enemyShips" class="[class.ship_l, class.ship_xl]" functional="true" space="$shipDoPatrol.{$r}.zone" multiple="false">
										<match_any>
											<match primarypurpose="objectpurpose.fight"/>
											<match_relation faction="$_faction" relation="enemy" comparison="le"/>
										</match_any>		
									</find_ship>
									<do_if value="$enemyStations or $enemyShips" negate="true">
										<append_to_list name="$patrolSFO" exact="$shipDoPatrol.{$r}"/>
										<set_value name="this.$params.$sfo" exact="3"/>
									</do_if>
									<do_else>
										<!--set_value name="this.$params.$sfo" exact="2"/-->
									</do_else>
								</do_if>
								<remove_value name="$enemyStations"/>
								<remove_value name="$enemyShips"/>
							</do_if>
							<do_elseif value="$shipDoPatrol.{$r}.pilot.$params.$sfo ge 3">
								<append_to_list name="$patrolSFO" exact="$shipDoPatrol.{$r}"/>
							</do_elseif>
						</do_if>
					</do_all>
					<do_if value="false">
						<!-- some tactical stuff [calculate adjusted enemyzones / non-sfo patrols] -->
					</do_if>
					<do_else>
						<set_value name="$InvasionFleet" exact="if $patrolSFO.count then $patrolSFO.random else null"/>
					</do_else>
				</do_if>
				<do_else>
					<!-- Construct Fleet by Escorts -->
				</do_else>
<set_value name="$text2" exact="'* Invasion %1 ships [%2] -- '.[@$InvasionFleet.name, $patrolSFO.count]" operation="add" />

				<do_if value="$InvasionFleet">
					<do_if value="not $validSectors?">
						<set_value name="$faction" exact="$_faction"/>
						<set_value name="$fallback" exact="true"/>
						<include_actions ref="md.MM_Corps__Data.MMCData_find_space" />
					</do_if>

					<create_list name="$tmp_1"/>
					<create_list name="$tmp_2"/>
					<create_list name="$tmpCoreSectors"/>

					<do_all exact="$validZonesCore.count" counter="$r">
						<do_if value="$tmpCoreSectors.indexof.{$validZonesCore.{$r}.sector} == 0">
							<append_to_list name="$tmpCoreSectors" exact="$validZonesCore.{$r}.sector"/>
						</do_if>
					</do_all>

					<do_all exact="$validZones.count" counter="$r">
						<do_if value="(not $validZones.{$r}.owner or $validZones.{$r}.owner.relationto.{$_faction} le $_faction.relation.enemy.min) and ($tmp_1.indexof.{$validZones.{$r}} == 0 and $tmp_2.indexof.{$validZones.{$r}} == 0)">
							<do_if value="$tmpCoreSectors.indexof.{$validZones.{$r}.sector}">
								<append_to_list name="$tmp_1" exact="$validZones.{$r}"/>
							</do_if>
							<do_else>
								<append_to_list name="$tmp_2" exact="$validZones.{$r}"/>
							</do_else>
						</do_if>
					</do_all>

					<do_if value="$tmp_1.count or $tmp_2.count">
						<!-- TODO start invasion and/or Outpost-Buildership [compare fleetsize with enemy units] -->
						<include_actions ref="md.MM_Corps__Data.MMCData_doworker_include_scoutdata" />
					</do_if>
				</do_if>

				<remove_value name="$tmp_1"/>
				<remove_value name="$tmp_2"/>
				<remove_value name="$tmpCoreSectors"/>
				<do_if value="$patrolSFO? and $patrolSFO.count == 0">
					<set_value name="$nextInvasion" exact="if $next_Check? and $next_Check.{4} then player.age + $next_Check.{4} else player.age + 8h" />
				</do_if>
				<do_else>
					<set_value name="$nextInvasion" exact="if $next_Check? and $next_Check.{4} then player.age + ($next_Check.{4}/2) else player.age + 4h" chance="if $temp_invasion_starts then 100 else 30"/>
				</do_else>
				<remove_value name="$temp_invasion_starts"/>
				<remove_value name="$InvasionFleet"/>
				<remove_value name="$patrolSFO"/>
			</actions>
		</library>
		<!--
		* $tmp_jobs
		* $tmpConfig
		* $valid***
		* $InvasionFleet
		* $patrolSFO.count
		<set_value name="$temp_priorities" exact="table[
														$xenon = [faction.xenon, macro.struct_at_xen_xenon_portal_macro, 100, 0, 0]
												]" comment="optional" />
		<include_actions ref="md.MM_Corps__Data.MMCData_doworker_include_scoutdata" />
		<remove_value name="$temp_invasion_starts"/>
		-->
		<library name="MMCData_doworker_include_scoutdata">
			<actions>
				<set_value name="$faction" exact="$_faction" />
				<do_if value="md.$scoutmatches? and md.$scoutmatches.{'$%1'.[$_faction.id]}? and md.$scoutmatches.{'$%1'.[$_faction.id]}.{2}.count">
					<set_value name="$faction" exact="if md.$scoutmatches.{'$%1'.[$_faction.id]}.{1} then md.$scoutmatches.{'$%1'.[$_faction.id]}.{1} else $_faction" />
					<set_value name="$temp_priorities" exact="table[]" chance="if $temp_priorities? then 0 else 100"/>

					<do_if value="md.$scoutmatches.{'$%1'.[$_faction.id]}.{2}.count">

						<do_if value="$temp_priorities.{'$%1'.[$faction.id]}?">
							<create_list name="$prio_area"/>
							<find_station name="$prio_stations" space="player.galaxy" functional="true" multiple="true">
								<match_any>
									<match macro="$temp_priorities.{'$%1'.[$faction.id]}.{2}"/>
									<match_content class="class.buildmodule" />
								</match_any>
								<match owner="$temp_priorities.{'$%1'.[$faction.id]}.{1}"/>
							</find_station>
							<do_if value="$prio_stations.count">
								<do_all exact="$prio_stations.count" counter="$x" >
									<do_if value="$prio_area.indexof.{$prio_stations.{$x}.cluster}" negate="true">
										<find_zone name="$temp_check" space="$prio_stations.{$x}.cluster" multiple="false" tempzone="false">
											<match_relation faction="$temp_priorities.{'$%1'.[$faction.id]}.{1}" relation="enemy" comparison="le"/>
										</find_zone>
										<do_if value="$temp_check">
											<append_to_list name="$prio_area" exact="$prio_stations.{$x}.cluster"/>
										</do_if>
									</do_if>
								</do_all>
								<remove_value name="$temp_check"/>
							</do_if>
							<remove_value name="$prio_stations"/>
						</do_if>
						<do_elseif value="$tmp_1? and $tmp_2? and ($tmp_1.count or $tmp_2.count)">
							<set_value name="$temp_x" exact="if $tmp_1.count then $tmp_1.clone else $tmp_2.clone" />
						</do_elseif>

						<do_all exact="md.$scoutmatches.{'$%1'.[$faction.id]}.{2}.count" counter="$x" reverse="true">
							<do_if value="@md.$scoutmatches.{'$%1'.[$faction.id]}.{2}.{$x}.exists and @md.$scoutmatches.{'$%1'.[$faction.id]}.{2}.{$x}.owner.hasrelation.enemy.{$faction}" negate="true">
								<remove_value name="md.$scoutmatches.{'$%1'.[$faction.id]}.{2}.{$x}"/>
							</do_if>
						</do_all>

						<do_if value="md.$scoutmatches.{'$%1'.[$faction.id]}.{2}.count">
							<!-- validation -->
							<do_if value="true">
								<create_list name="$temp_sectarget"/>
								<create_list name="$temp_lowtarget"/>
								<create_list name="$temp_priotarget"/>
								<create_list name="$temp_priotarget_2nd"/>
								<set_value name="$temp_list" exact="md.$scoutmatches.{'$%1'.[$faction.id]}.{2}.clone" />

								<do_all exact="$temp_list.count" counter="$x" reverse="true">
									<do_if value="$prio_area? and $prio_area.indexof.{$temp_list.{$x}.cluster} and $validZones.indexof.{$temp_list.{$x}.zone}">
										<do_if value="$temp_priotarget.indexof.{$temp_list.{$x}.zone}" negate="true">
											<append_to_list name="$temp_priotarget" exact="$temp_list.{$x}"/>
										</do_if>
									</do_if>
									<do_elseif value="$temp_x? and $temp_x.indexof.{$temp_list.{$x}.zone}">
										<do_if value="$temp_priotarget.indexof.{$temp_list.{$x}.zone}" negate="true">
											<append_to_list name="$temp_priotarget" exact="$temp_list.{$x}"/>
										</do_if>
									</do_elseif>
									<do_if value="$validZones.indexof.{$temp_list.{$x}.zone}" negate="true">
										<do_if value="$prio_area? and $prio_area.indexof.{$temp_list.{$x}.cluster}" chance="if $temp_priorities.{'$%1'.[$faction.id]}.{3}? then $temp_priorities.{'$%1'.[$faction.id]}.{3} else 100">
											<append_to_list name="$temp_priotarget_2nd" exact="$temp_list.{$x}"/>
										</do_if>
										<do_elseif value="$validSectors.indexof.{$temp_list.{$x}.sector}" chance="if $temp_priorities.{'$%1'.[$faction.id]}.{4}? then $temp_priorities.{'$%1'.[$faction.id]}.{4} else 100">
											<append_to_list name="$temp_sectarget" exact="$temp_list.{$x}"/>
										</do_elseif>
										<do_elseif value="$validCluster.indexof.{$temp_list.{$x}.cluster}" chance="if $temp_priorities.{'$%1'.[$faction.id]}.{5}? then $temp_priorities.{'$%1'.[$faction.id]}.{5} else 100">
											<append_to_list name="$temp_lowtarget" exact="$temp_list.{$x}"/>
										</do_elseif>
										<remove_value name="$temp_list.{$x}"/>
									</do_if>
								</do_all>
								<remove_value name="$prio_area"/>
								<remove_value name="$temp_x"/>

								<do_if value="$temp_priotarget.count or $temp_priotarget_2nd.count">
									<set_value name="$target" exact="if $temp_priotarget.count then $temp_priotarget.random else $temp_priotarget_2nd.random " />
								</do_if>
								<do_elseif value="$temp_list.count or $temp_sectarget.count">
									<set_value name="$target" exact="if $temp_list.count then $temp_list.random else if $temp_sectarget.count then $temp_sectarget.random else null" />
								</do_elseif>
								<do_else>
									<set_value name="$target" exact="if $temp_lowtarget.count then $temp_lowtarget.random else null" chance="30"/>
								</do_else>

								<remove_value name="$temp_list"/>
								<remove_value name="$temp_sectarget"/>
								<remove_value name="$temp_lowtarget"/>
								<remove_value name="$temp_priotarget"/>
								<remove_value name="$temp_priotarget_2nd"/>

								<do_if value="$target" negate="true">
									<remove_value name="$target"/>
								</do_if>
							</do_if>
							<do_else>
								<set_value name="$target" exact="md.$scoutmatches.{'$%1'.[$faction.id]}.{2}.random" />
							</do_else>
							<!-- / validation -->
						</do_if>
						<do_else>
							<remove_value name="md.$scoutmatches.{'$%1'.[$faction.id]}"/>
						</do_else>
					</do_if>
				</do_if>
				<!-- do invasion -->
				<do_if value="$faction? and $faction and ($target? or $tmp_1.count or $tmp_2.count)">
					<do_if value="$target? and (not $target.zone.owner or ($target.zone.owner and $target.zone.owner.hasrelation.enemy.{$faction}))">
						<set_value name="$targetZone" exact="if $target.isclass.zone then $target else $target.zone" />
					</do_if>
					<do_elseif value="$target? and ($target.owner.hasrelation.enemy.{$faction})">
						<set_value name="$targetZone" exact="if $target.isclass.zone then $target else $target.zone" />
					</do_elseif>
					<do_elseif value="$tmp_1.count and (not $tmp_1.{1}.owner or $tmp_1.{1}.owner and $tmp_1.{1}.owner.hasrelation.enemy.{$faction})">
						<set_value name="$targetZone" exact="if $tmp_1.{1}.isclass.zone then $tmp_1.{1} else $tmp_1.{1}.zone" />
					</do_elseif>
					<do_elseif value="$tmp_2.count and (not $tmp_2.{1}.owner or $tmp_2.{1}.owner and $tmp_2.{1}.owner.hasrelation.enemy.{$faction})">
						<set_value name="$targetZone" exact="if $tmp_2.{1}.isclass.zone then $tmp_2.{1} else $tmp_2.{1}.zone" />
					</do_elseif>

					<do_if value="$targetZone? and $targetZone.exists">
						<find_station name="$ZoneEnemyStations" space="$targetZone" functional="true" multiple="true">
							<match_relation faction="$faction" relation="enemy" comparison="le"/>
						</find_station>
						<find_ship name="$ZoneEnemyShips" class="[class.ship_xl, class.ship_l]" space="$targetZone"  multiple="true">
							<match_relation faction="$faction" relation="enemy" comparison="le"/>
							<match primarypurpose="objectpurpose.trade" negate="true"/>
							<match primarypurpose="objectpurpose.build" negate="true"/>
						</find_ship>
				
						<do_if value="($ZoneEnemyStations.count + $ZoneEnemyShips.count) ge 1">
							<set_value name="$requiredCapships" min="(($ZoneEnemyStations.count + $ZoneEnemyShips.count)/2)+1" max="$ZoneEnemyStations.count*2 + $ZoneEnemyShips.count +1"/>
						</do_if>
						<do_else>
							<set_value name="$requiredCapships" exact="1" />
						</do_else>
						<remove_value name="$ZoneEnemyShips"/>
						<remove_value name="$ZoneEnemyStations"/>

						<do_if value="$InvasionFleet" negate="true">
							<set_value name="$InvasionFleet" exact="$patrolSFO.random"/>
						</do_if>

						<create_list name="$InvasionFleetList" />
						<do_if value="$requiredCapships gt 1">
							<set_value name="$countCapships" exact="1" />
							<append_to_list name="$InvasionFleetList" exact="$InvasionFleet"/>
							<do_all exact="$InvasionFleet.subordinates.count" counter="$x">
								<do_if value="$InvasionFleet.subordinates.{$x}.isclass.[class.ship_l, class.ship_xl]">
									<set_value name="$countCapships" operation="add"/>
								</do_if>
							</do_all>
							<remove_value name="$patrolSFO.{$patrolSFO.indexof.{$InvasionFleet}}"/>

							<do_all exact="$patrolSFO.count">
								<set_value name="$InvasionFleet" exact="$patrolSFO.random"/>
								<append_to_list name="$InvasionFleetList" exact="$InvasionFleet"/>
								<do_if value="$InvasionFleet.isclass.[class.ship_l, class.ship_l]">
									<set_value name="$countCapships" operation="add"/>
								</do_if>
								<do_all exact="$InvasionFleet.subordinates.count" counter="$x">
									<do_if value="$InvasionFleet.subordinates.{$x}.isclass.[class.ship_l, class.ship_xl]">
										<set_value name="$countCapships" operation="add"/>
									</do_if>
								</do_all>
								<remove_value name="$patrolSFO.{$patrolSFO.indexof.{$InvasionFleet}}"/>
								<do_if value="$countCapships ge $requiredCapships">
									<break />
								</do_if>
							</do_all>
						</do_if>
						<do_else>
							<append_to_list name="$InvasionFleetList" exact="$InvasionFleet"/>
							<set_value name="$countCapships" exact="1" />
						</do_else>
<set_value name="$text2" exact="' -Invasion can start?: %1 ge %2 [%3] %4\n'.[$countCapships, $requiredCapships, $InvasionFleetList.count, $targetZone.name]" operation="add" />

						<do_all exact="$InvasionFleetList.count" counter="$x" chance="if $countCapships ge $requiredCapships then 100 else 0">
<set_value name="$text2" exact="'*** Invasion: %1 subs[%2]\n'.[$InvasionFleetList.{$x}.knownname, $InvasionFleetList.{$x}.subordinates.count]" operation="add" />
							<set_value name="$param" exact="[['range', 'zone'], ['allowstations', true], ['sfo', 0]]"/>
							<set_value name="$destination" exact="$targetZone"/>
							<set_value name="$script" exact="if global.$nfconfig.$Check? then 'BR.move.patrol' else 'move.patrol'"/>
							<set_value name="$Object" exact="$InvasionFleetList.{$x}"/>
							<include_actions ref="md.MM_Corps__Data.MMCData_ship_job_runscript" />
							<set_value name="$temp_invasion_starts" exact="true"/>
						</do_all>

						<remove_value name="$Object"/>
						<remove_value name="$countCapships"/>
						<remove_value name="$requiredCapships"/>
						<remove_value name="$InvasionFleetList"/>
					</do_if>
				</do_if>

				<remove_value name="$targetZone"/>
				<remove_value name="$target"/>
				<remove_value name="$faction"/>
				<remove_value name="$temp_priorities"/>
				<remove_value name="$InvasionFleet"/>
				<remove_value name="$patrolSFO"/>
			</actions>
		</library>

		<!-- 
		<set_value name="$_CEO" exact="null"/>
		+ event.param2
		<include_actions ref="md.MM_Corps__Data.MMCData_dohandler_include_escorts" />
		-->
		<library name="MMCData_dohandler_include_escorts">
			<actions>

				<include_actions ref="md.MM_Corps__Data.MMCData_config" />

				<do_if value="event.param2? and event.param2.isclass.ship and $_CEO.money gt $tmpConfig.$minBuyShipTop">
					<set_value name="$_faction" exact="$_CEO.trueowner" />


					<set_value name="$target" exact="event.param2" />

					<set_value name="$faction" exact="$_faction" />

					<do_if value="$tmpConfig.$patrolEscorts">
						<set_value name="$amount_master" exact="$tmpConfig.$patrolEscorts" />
						<set_value name="$amount" exact="$amount_master" />
						<create_list name="$macrolist_fight" />
						<create_list name="$macrolist_fight_sm" />

						<do_if value="$tmpConfig.$ships.$fight.count or $tmpConfig.$ships.$fight_sm.count">
							<create_list name="$macrolist_fight_xl" />
							<set_value name="$budget" exact="($_CEO.money / 10) / $tmpConfig.$patrolEscorts" />
							<set_value name="$cheapship" exact="null" />

							<do_all exact="$tmpConfig.$ships.$fight.count" counter="$x" reverse="true">
								<do_if value="$tmpConfig.$ships.$fight.{$x}.ware and $tmpConfig.$ships.$fight.{$x}.ware.averageprice lt $budget">
									<append_to_list name="$macrolist_fight" exact="$tmpConfig.$ships.$fight.{$x}" />
									<do_if value="$tmpConfig.$ships.$fight.{$x}.isclass.ship_xl">
										<append_to_list name="$macrolist_fight_xl" exact="$tmpConfig.$ships.$fight.{$x}" />
									</do_if>
								</do_if>
								<do_elseif value="(not $cheapship and $tmpConfig.$ships.$fight.{$x}.ware) or ($cheapship and $tmpConfig.$ships.$fight.{$x}.ware and $tmpConfig.$ships.$fight.{$x}.ware.averageprice lt $cheapship.ware.averageprice)">
									<set_value name="$ref" exact="$tmpConfig.$ships.$fight.{$x}"/>
								</do_elseif>
							</do_all>

							<do_if value="$target.isclass.ship_xl and $macrolist_fight.count gt $macrolist_fight_xl.count">
								<do_all exact="$macrolist_fight_xl.count" counter="$x" reverse="true">
									<remove_value name="$macrolist_fight.{$macrolist_fight.indexof.{$macrolist_fight_xl.{$x}}}"/>
								</do_all>
							</do_if>
							<do_elseif value="$macrolist_fight.count == 0 and $cheapship">
								<append_to_list name="$macrolist_fight" exact="$cheapship" />
								<set_value name="$amount" exact="[($amount_master / 2), 1 ].max" />
							</do_elseif>

							<do_if value="$tmpConfig.$ships.$fight_sm.count">
								<set_value name="$macrolist_fight_sm" exact="$tmpConfig.$ships.$fight_sm.clone" />
							</do_if>
							<remove_value name="$macrolist_fight_xl"/>
							<remove_value name="$cheapship"/>
							<remove_value name="$budget"/>
						</do_if>

						<do_if value="$target.isclass.[class.ship_l, class.ship_xl] and $amount lt 9">
							<do_if value="$macrolist_fight.count">
								<set_value name="$ref" exact="$macrolist_fight.random"/>
							</do_if>
							<do_elseif value="$_faction.id" list="['heartofalbion', 'argongovernment', 'terran']">
								<set_value name="$ref" exact="class.ship_xl"/>
							</do_elseif>
							<do_else>
								<set_value name="$ref" exact="class.ship_l"/>
							</do_else>
							<set_value name="$amount" exact="[$amount, 2 ].min" />
						</do_if>
						<do_else>
							<do_if value="$target.macro.ismacro.{global.$mmcarriers}">
								<set_value name="$dockObject" exact="$target"/>
								<set_value name="$dockObject_laterUse" exact="$temp_stations.{$y}"/>
							</do_if>
							<do_elseif value="$target.zone == player.primaryship.zone">
								<find_station name="$temp_stations" space="player.galaxy" functional="true" multiple="true"/>
								<do_all exact="$temp_stations.count" counter="$y">
									<find_dock_location container="$temp_stations.{$y}" size="tag.dock_m" name="$dock_m" />
									<do_if value="$dock_m">
										<find_dock_location container="$temp_stations.{$y}" size="tag.dock_s" name="$dock_s" />
										<do_if value="$dock_s">
											<set_value name="$dockObject" exact="$temp_stations.{$y}"/>
											<set_value name="$dockObject_laterUse" exact="$temp_stations.{$y}"/>
											<break />
										</do_if>
									</do_if>
								</do_all>
								<remove_value name="$dock_s"/>
								<remove_value name="$dock_m"/>
								<remove_value name="$temp_stations"/>
							</do_elseif>

							<do_if value="$macrolist_fight_sm.count">
								<set_value name="$ref" exact="$macrolist_fight_sm.random"/>
							</do_if>
							<do_elseif value="$_faction.id" list="['heartofalbion']">
								<set_value name="$ref" exact="class.ship_m"/>
							</do_elseif>
							<do_else>
								<set_value name="$ref" exact="class.ship_s"/>
							</do_else>
						</do_else>
<debug_text chance="0" text="'process escorts xl:%1 sm:%2 [%4] %3'.[$macrolist_fight.count, $macrolist_fight_sm.count, $ref, $amount]" filter="error" />

						<set_value name="$spawnZone" exact="$target.zone" />

						<do_if value="player.difficulty" exact="level.impossible">
							<set_value name="$Elite" />
						</do_if>
						<do_if value="player.difficulty" list="[level.veryhard, level.impossible]">
							<set_value name="$addToList" />
						</do_if>
						<create_list name="$escort_ships" />

						<do_all exact="$amount" counter="$count" reverse="true">
							<set_value name="$faction" exact="$_faction" />
							<do_if value="$count == 1">
								<set_value name="$clearAll" />
							</do_if>
							<set_value name="$param" exact="[['target', $target]]"/>
							<set_value name="$script" exact="if global.$nfconfig.$Check? then 'BR.move.escort' else 'move.escort'"/>
							<include_actions ref="md.MM_Corps__Data.MMCData_ship_spawner" />

							<remove_value name="$createdShip"/>
							<remove_value name="$Object"/>
						</do_all>
						<remove_value name="$addToList"/>

						<!-- escort of escorts -->
						<do_if value="$escort_ships.count" chance="$_CEO.money gt 1000000000Cr">
<debug_text chance="0" text="'process SUBescorts for %5 xl:%1 sm:%2 [%4] %3'.[$macrolist_fight.count, $macrolist_fight_sm.count, $ref, $amount, $escort_ships.count]" filter="error" />

							<set_value name="$faction" exact="$_faction" />

							<do_all exact="$escort_ships.count" counter="$counter">
								<set_value name="$target" exact="$escort_ships.{$counter}" reverse="true"/>

								<do_if value="player.difficulty == level.impossible and $target.isclass.[class.ship_l, class.ship_xl] and $amount lt 5">
									<do_if value="$macrolist_fight.count">
										<set_value name="$ref" exact="$macrolist_fight.random"/>
									</do_if>
									<do_elseif value="$_faction.id" list="['heartofalbion', 'argongovernment', 'terran']">
										<set_value name="$ref" exact="class.ship_xl"/>
									</do_elseif>
									<do_else>
										<set_value name="$ref" exact="class.ship_l"/>
									</do_else>
									<set_value name="$amount" exact="[$amount, 2 ].min" />
								</do_if>
								<do_else>
									<do_if value="$target.macro.ismacro.{global.$mmcarriers}">
										<set_value name="$dockObject" exact="$target"/>
										<set_value name="$dockObject_laterUse" exact="$target"/>
									</do_if>
									<do_elseif value="$dockObject_laterUse? and $target.zone == player.primaryship.zone">
										<set_value name="$dockObject" exact="$dockObject_laterUse"/>
									</do_elseif>
									<do_elseif value="not $dockObject_laterUse? and $target.zone == player.primaryship.zone">
										<find_station name="$temp_stations" space="player.galaxy" functional="true" multiple="true"/>
										<do_all exact="$temp_stations.count" counter="$y">
											<find_dock_location container="$temp_stations.{$y}" size="tag.dock_m" name="$dock_m" />
											<do_if value="$dock_m">
												<find_dock_location container="$temp_stations.{$y}" size="tag.dock_s" name="$dock_s" />
												<do_if value="$dock_s">
													<set_value name="$dockObject" exact="$temp_stations.{$y}"/>
													<set_value name="$dockObject_laterUse" exact="$temp_stations.{$y}"/>
													<break />
												</do_if>
											</do_if>
										</do_all>
										<remove_value name="$dock_s"/>
										<remove_value name="$dock_m"/>
										<remove_value name="$temp_stations"/>
										<set_value name="$amount" exact="$amount_master" />
									</do_elseif>
	
									<do_if value="$macrolist_fight_sm.count">
										<set_value name="$ref" exact="$macrolist_fight_sm.random"/>
									</do_if>
									<do_elseif value="$_faction.id" list="['heartofalbion']">
										<set_value name="$ref" exact="class.ship_m"/>
									</do_elseif>
									<do_else>
										<set_value name="$ref" exact="class.ship_s"/>
									</do_else>
								</do_else>

								<set_value name="$spawnZone" exact="$target.zone" />

								<do_if value="player.difficulty" exact="level.impossible">
									<set_value name="$Elite" />
								</do_if>

								<do_if value="$target.macro.ismacro.{global.$mmcarriers}">
									<set_value name="$dockObject" exact="$target"/>
								</do_if>

								<do_all exact="$amount" counter="$count" reverse="true">
									<set_value name="$faction" exact="$_faction" />
									<do_if value="$count == 1 and $counter == 1">
										<set_value name="$clearAll" />
									</do_if>
									<set_value name="$param" exact="[['target', $target]]"/>
									<set_value name="$script" exact="if global.$nfconfig.$Check? then 'BR.move.escort' else 'move.escort'"/>
									<include_actions ref="md.MM_Corps__Data.MMCData_ship_spawner" />

									<remove_value name="$createdShip"/>
									<remove_value name="$Object"/>
								</do_all>
							</do_all>
						</do_if>
					</do_if>
					<remove_value name="$macrolist_fight_sm"/>
					<remove_value name="$macrolist_fight"/>
					<remove_value name="$escort_ships"/>
					<remove_value name="$_faction"/>
					<remove_value name="$target"/>
					<remove_value name="$amount"/>
					<remove_value name="$amount_master"/>
					<remove_value name="$dockObject_laterUse"/>
				</do_if>
				<remove_value name="$tmpConfig"/>
			</actions>
		</library>

		<!--
		<set_value name="$faction" exact="$_faction" />
		<set_value name="$ref" exact="macro. / 'ref' / class. "/>
		<set_value name="$spawnZone" exact="$zone" />
		<set_value name="$dockObject" exact="$object" comment="optional [station or ship]"/>
		<set_value name="$spawnZoneSafepos" exact="$Safepos" comment="optional"/>
		<set_value name="$spawnZoneOrientation" exact="$Orientation" comment="optional"/>
		<set_value name="$Elite" comment="optional"/>
		<set_value name="$clearAll" comment="optional"/>
		<include_actions ref="md.MM_Corps__Data.MMCData_ship_spawner" />
		<remove_value name="$createdShip"/>
		<remove_value name="$faction" comment="optional"/>
		<remove_value name="$ref" comment="optional"/>
		<remove_value name="$Elite" comment="optional"/>
		<remove_value name="$raceTag" comment="optional"/>
		<remove_value name="$dockObject" comment="optional"/>
		<remove_value name="$spawnZoneSafepos" comment="optional"/>
		<remove_value name="$spawnZoneOrientation" comment="optional"/>
		-->
		<library name="MMCData_ship_spawner">
			<actions>
				<do_if value="$spawnZone and not $spawnZoneSafepos?">
					<get_safe_pos result="$spawnZoneSafepos" zone="$spawnZone" radius="1km" min="10km" max="15km" allowyaxis="false"/>
				</do_if>
				<do_if value="$spawnZoneSafepos and $spawnZone">
					<create_orientation name="$spawnZoneOrientation" orientation="look_at" refposition="position.[0, 0, 0]">
						<position value="$spawnZoneSafepos" />
					</create_orientation>
				</do_if>

				<do_if value="$raceTag? and $raceTag" negate="true">
					<set_value name="$raceTag" exact="if $faction? and ['xenon','khaak'].indexof.{$faction.id} then race.{$faction.id} else [race.argon, race.split, race.terran, race.teladi].random"/>
				</do_if>

				<do_if value="$dockObject? and $dockObject and player.primaryship.zone != $spawnZone">
					<set_value name="$dockObject" exact="null"/>
				</do_if>
		
				<set_value name="$createdShip" exact="null"/>
<debug_text chance="0" text="'MMCData_ship_spawner %1 %2 %3 %4'.[$faction, $ref, $spawnZone.macro, @$dockObject]" filter="error" />

				<do_if value="$ref? and $ref">
					<do_if value="typeof $ref == datatype.macro">
						<do_if value="typeof $ref == datatype.macro and [class.ship_l, class.ship_xl].indexof.{$ref.class} and $dockObject? and $dockObject">
							<create_ship name="$createdShip" dock="$dockObject" zone="$dockObject.zone" macro="$ref">
								<owner exact="$faction" overridenpc="true"/>
								<pilot>
									<select race="$raceTag" tags="[tag.commander]"/>
								</pilot>
								<defence>
									<select race="$raceTag" tags="[tag.defencecontrol]"/>
								</defence>
								<engineer>
									<select race="$raceTag" tags="[tag.engineer]"/>
								</engineer>
							</create_ship>
						</do_if>
						<do_elseif value="typeof $ref == datatype.macro and [class.ship_l, class.ship_xl].indexof.{$ref.class}">
							<create_ship name="$createdShip" zone="$spawnZone" macro="$ref">
								<owner exact="$faction" overridenpc="true"/>
								<pilot>
									<select race="$raceTag" tags="[tag.commander]"/>
								</pilot>
								<defence>
									<select race="$raceTag" tags="[tag.defencecontrol]"/>
								</defence>
								<engineer>
									<select race="$raceTag" tags="[tag.engineer]"/>
								</engineer>
								<position value="$spawnZoneSafepos" max="5km"/>
								<rotation value="$spawnZoneOrientation" />
							</create_ship>
						</do_elseif>
						<do_elseif value="typeof $ref == datatype.macro and $dockObject? and $dockObject">
							<create_ship name="$createdShip" dock="$dockObject" zone="$dockObject.zone" macro="$ref">
								<owner exact="$faction" overridenpc="true"/>
								<pilot>
									<select race="$raceTag" tags="[tag.fighterpilot]"/>
								</pilot>
							</create_ship>
						</do_elseif>
						<do_elseif value="typeof $ref == datatype.macro">
							<create_ship name="$createdShip" zone="$spawnZone" macro="$ref">
								<owner exact="$faction" overridenpc="true"/>
								<pilot>
									<select race="$raceTag" tags="[tag.fighterpilot]"/>
								</pilot>
								<position value="$spawnZoneSafepos" max="5km"/>
								<rotation value="$spawnZoneOrientation" />
							</create_ship>
						</do_elseif>

						<do_if value="$createdShip.isclass.[class.ship_l,class.ship_xl]" negate="true">
							<destroy_object object="$createdShip.defencenpc" explosion="false" chance="if $createdShip.defencenpc then 100 else 0"/>
							<destroy_object object="$createdShip.engineer" explosion="false" chance="if $createdShip.engineer then 100 else 0"/>
						</do_if>
						<do_else>
							<set_value name="$Unitcapacity" exact="[$createdShip.units.maxcount, 1000].min" />

							<do_if value="$createdShip.cargo.{ware.fuelcells}.free gt 2499">
								<add_cargo ware="ware.fuelcells" object="$createdShip" exact="2500" />
							</do_if>

							<do_if value="$Unitcapacity">
								<do_if value="$createdShip.cargo.{ware.ore}.max and $createdShip.cargo.{ware.plasma}.max and $createdShip.primarypurpose == objectpurpose.mine">
									<add_units object="$createdShip" macro="macro.units_size_drone_attackdrone_plasma_mk2_macro" min="$Unitcapacity/6/2" max="$Unitcapacity/6"/>
									<add_units object="$createdShip" macro="macro.units_size_drone_rubble_collector_mk2_macro" min="3" max="$Unitcapacity/6" chance="50"/>
									<add_units object="$createdShip" macro="macro.units_size_drone_rubble_collector_mk1_macro" min="3" max="$Unitcapacity/6"/>
									<add_units object="$createdShip" macro="macro.units_size_drone_liquid_collector_mk2_macro" min="3" max="$Unitcapacity/6" chance="50"/>
									<add_units object="$createdShip" macro="macro.units_size_drone_liquid_collector_mk1_macro" min="3" max="$Unitcapacity/6"/>
									<add_units object="$createdShip" macro="macro.units_size_xs_transp_empty_macro" min="1" max="$Unitcapacity/6/2"/>
									<add_units object="$createdShip" macro="macro.units_size_xs_welder_drone_macro" min="1" max="$Unitcapacity/6/2"/>
								</do_if>
								<do_elseif value="$createdShip.cargo.{ware.ore}.max and $createdShip.primarypurpose == objectpurpose.mine">
									<add_units object="$createdShip" macro="macro.units_size_drone_attackdrone_plasma_mk2_macro" min="$Unitcapacity/4/2" max="$Unitcapacity/4"/>
									<add_units object="$createdShip" macro="macro.units_size_drone_rubble_collector_mk2_macro" min="3" max="$Unitcapacity/4" chance="50"/>
									<add_units object="$createdShip" macro="macro.units_size_drone_rubble_collector_mk1_macro" min="3" max="$Unitcapacity/4"/>
									<add_units object="$createdShip" macro="macro.units_size_xs_transp_empty_macro" min="1" max="$Unitcapacity/4/2"/>
									<add_units object="$createdShip" macro="macro.units_size_xs_welder_drone_macro" min="1" max="$Unitcapacity/4/2"/>
								</do_elseif>
								<do_elseif value="$createdShip.cargo.{ware.plasma}.max and $createdShip.primarypurpose == objectpurpose.mine">
									<add_units object="$createdShip" macro="macro.units_size_drone_attackdrone_plasma_mk2_macro" min="$Unitcapacity/4/2" max="$Unitcapacity/4"/>
									<add_units object="$createdShip" macro="macro.units_size_drone_liquid_collector_mk2_macro" min="3" max="$Unitcapacity/4" chance="50"/>
									<add_units object="$createdShip" macro="macro.units_size_drone_liquid_collector_mk1_macro" min="3" max="$Unitcapacity/4"/>
									<add_units object="$createdShip" macro="macro.units_size_xs_transp_empty_macro" min="1" max="$Unitcapacity/4/2"/>
									<add_units object="$createdShip" macro="macro.units_size_xs_welder_drone_macro" min="1" max="$Unitcapacity/4/2"/>
								</do_elseif>
								<do_elseif value="$createdShip.primarypurpose == objectpurpose.build">
									<add_units object="$createdShip" macro="macro.units_size_drone_attackdrone_plasma_mk2_macro" min="$Unitcapacity/4/2" max="$Unitcapacity/4"/>
									<add_units object="$createdShip" macro="macro.units_size_xs_welder_drone_macro" min="$Unitcapacity/4" max="$Unitcapacity/4"/>
									<add_units object="$createdShip" macro="macro.units_size_xs_transp_empty_macro" min="$Unitcapacity/4/3" max="$Unitcapacity/4/2"/>
									<add_units object="$createdShip" macro="macro.units_size_drone_missiledrone_dumbfire_mk2_macro" min="$Unitcapacity/4/3" max="$Unitcapacity/4/2"/>
								</do_elseif>
								<!--do_elseif value="$createdShip.cargo.{ware.fusionreactor}.max or $createdShip.cargo.{ware.water}.max or $createdShip.cargo.{ware.energycells}.max or $createdShip.cargo.{ware.ore}.max" chance="if $faction == faction.deepwater then 100 else 0">								
			
									<add_units object="$createdShip" macro="macro.units_size_drone_attackdrone_plasma_mk1_macro" min="5" max="$Unitcapacity/2/3"/>
									<add_units object="$createdShip" macro="macro.units_size_drone_attackdrone_impulse_mk1_macro" min="5" max="$Unitcapacity/2/3"/>
									<add_units object="$createdShip" macro="macro.units_size_drone_missiledrone_dumbfire_mk2_macro" min="5" max="$Unitcapacity/2/3"/>
									<add_units object="$createdShip" macro="macro.units_size_xs_welder_drone_macro" min="3" max="$Unitcapacity/2/2"/>
									<add_units object="$createdShip" macro="macro.units_size_xs_transp_empty_macro" min="5" max="$Unitcapacity/2/2"/>
								</do_elseif-->
								<do_elseif value="$createdShip.cargo.{ware.fusionreactor}.max or $createdShip.cargo.{ware.water}.max or $createdShip.cargo.{ware.energycells}.max or $createdShip.cargo.{ware.ore}.max">								
			
									<add_units object="$createdShip" macro="macro.units_size_drone_attackdrone_plasma_mk1_macro" min="5" max="$Unitcapacity/2/3"/>
									<add_units object="$createdShip" macro="macro.units_size_drone_attackdrone_impulse_mk1_macro" min="5" max="$Unitcapacity/2/3"/>
									<add_units object="$createdShip" macro="macro.units_size_drone_missiledrone_dumbfire_mk2_macro" min="5" max="$Unitcapacity/2/3"/>
									<add_units object="$createdShip" macro="macro.units_size_xs_welder_drone_macro" min="3" max="$Unitcapacity/2/2"/>
									<add_units object="$createdShip" macro="macro.units_size_xs_transp_empty_macro" exact="[50 ,[$createdShip.units.maxcount, 1000].min -$createdShip.units.count].min"/>
								</do_elseif>
								<do_elseif value="$createdShip.primarypurpose == objectpurpose.fight or (not $createdShip.cargo.{ware.water}.max and not $createdShip.cargo.{ware.energycells}.max and not $createdShip.cargo.{ware.fusionreactor}.max and not $createdShip.cargo.{ware.ore}.max)">
									<add_units object="$createdShip" macro="macro.units_size_drone_attackdrone_plasma_mk2_macro" min="$Unitcapacity/7/2" max="$Unitcapacity/7" chance="40"/>
									<add_units object="$createdShip" macro="macro.units_size_drone_attackdrone_plasma_mk1_macro" min="$Unitcapacity/7/2" max="$Unitcapacity/7"/>
									<add_units object="$createdShip" macro="macro.units_size_drone_attackdrone_impulse_mk2_macro" min="$Unitcapacity/7/2" max="$Unitcapacity/7" chance="40"/>
									<add_units object="$createdShip" macro="macro.units_size_drone_attackdrone_impulse_mk1_macro" min="$Unitcapacity/7/2" max="$Unitcapacity/7"/>
									<add_units object="$createdShip" macro="macro.units_size_drone_missiledrone_dumbfire_mk2_macro" min="$Unitcapacity/7/2" max="$Unitcapacity/7" chance="40"/>
									<add_units object="$createdShip" macro="macro.units_size_drone_missiledrone_dumbfire_mk1_macro" min="$Unitcapacity/7/2" max="$Unitcapacity/7"/>		
			
									<add_units object="$createdShip" macro="macro.units_size_xs_welder_drone_macro" min="$Unitcapacity/7/2" max="$Unitcapacity/7"/>
									<add_units object="$createdShip" macro="macro.units_size_xs_transp_empty_macro" exact="[5 ,[$createdShip.units.maxcount, 1000].min -$createdShip.units.count].min"/>
								</do_elseif>
							</do_if>
							<remove_value name="$Unitcapacity" />
						</do_else>
					</do_if>
					<do_else>
						<do_if value="typeof $ref == datatype.class and $dockObject? and $dockObject">
							<create_ship name="$createdShip" dock="$dockObject" zone="$dockObject.zone">
								<select faction="$faction" size="$ref" tags="if $tag? and $tag then $tag else [tag.military]" />
								<owner exact="$faction" overridenpc="true"/>
							</create_ship>
						</do_if>
						<do_elseif value="typeof $ref == datatype.class">
							<create_ship name="$createdShip" zone="$spawnZone">
								<select faction="$faction" size="$ref" tags="if $tag? and $tag then $tag else [tag.military]" />
								<owner exact="$faction" overridenpc="true"/>
								<position value="$spawnZoneSafepos" max="5km"/>
								<rotation value="$spawnZoneOrientation" />
							</create_ship>
						</do_elseif>
						<do_elseif value="$dockObject? and $dockObject">
							<create_ship name="$createdShip" dock="$dockObject" ref="$ref" zone="$dockObject.zone" />
						</do_elseif>
						<do_else>
							<create_ship name="$createdShip" ref="$ref" zone="$spawnZone">
								<position value="$spawnZoneSafepos" max="5km"/>
								<rotation value="$spawnZoneOrientation" />
							</create_ship>
						</do_else>
					</do_else>
				</do_if>

				<do_if value="$createdShip? and $createdShip" negate="true">
					<do_if value="$dockObject? and $dockObject">
						<create_ship name="$createdShip" dock="$dockObject" zone="$dockObject.zone" macro="units_size_m_pmc_xen_02_macro">
							<owner exact="$faction" overridenpc="true"/>
							<pilot race="$raceTag" tags="[tag.fighterpilot]"/>
						</create_ship>
					</do_if>
					<do_else>
						<create_ship name="$createdShip" zone="$spawnZone" macro="units_size_m_pmc_xen_02_macro">
							<owner exact="$faction" overridenpc="true"/>
							<pilot race="$raceTag" tags="[tag.fighterpilot]"/>
							<position value="$spawnZoneSafepos" max="5km"/>
							<rotation value="$spawnZoneOrientation" />
						</create_ship>
					</do_else>
				</do_if>

				<do_if value="$Elite? and $createdShip">
					<get_control_entities object="$createdShip" groupname="$ControlEntities"/>
					<do_all exact="$ControlEntities.count" counter="$Counter">
						<set_skill entity="$ControlEntities.{$Counter}" type="combat" max="5"/>
						<set_skill entity="$ControlEntities.{$Counter}" type="engineering" exact="5"/>
						<set_skill entity="$ControlEntities.{$Counter}" type="leadership" exact="5"/>
						<set_skill entity="$ControlEntities.{$Counter}" type="management" exact="5"/>
						<set_skill entity="$ControlEntities.{$Counter}" type="morale" max="5"/>
						<set_skill entity="$ControlEntities.{$Counter}" type="navigation" max="5"/>
						<set_skill entity="$ControlEntities.{$Counter}" type="science" max="5"/>
					</do_all>
					<remove_value name="$ControlEntities"/>
				</do_if>

				<!--do_if value="$createdShip.pilot.$end_of_work?" negate="true">
					<set_value name="$createdShip.pilot.$end_of_work" exact="if $defineEOL? and $defineEOL gt player.age then $defineEOL else player.age + 24h" />
				</do_if-->
				<do_if value="$createdShip.pilot.$spawnjob?" negate="true">
					<set_value name="$createdShip.pilot.$spawnjob" />
				</do_if>

				<do_if value="$createdShip and stat.nf_ships_spawned?">
					<set_value name="stat.nf_ships_spawned" operation="add" />
				</do_if>

				<do_if value="$createdShip and $param? and $script?">
					<add_effect object="$createdShip" effect="'jump_jumpin_l'" chance="if $createdShip.zone == player.primaryship.zone and $createdShip.isclass.[class.ship_l,class.ship_xl] then 100 else 0"/>

					<set_value name="$Object" exact="$createdShip"/>
					<include_actions ref="md.MM_Corps__Data.MMCData_ship_job_runscript" />
					<remove_value name="$Object"/>
				</do_if>

				<do_if value="$escort_ships?" chance="($addToList?)*100">
					<append_to_list name="$escort_ships" exact="$createdShip"/>
				</do_if>

				<do_if value="$clearAll?">
					<remove_value name="$faction"/>
					<remove_value name="$ref"/>
					<remove_value name="$raceTag"/>
					<remove_value name="$dockObject"/>
					<remove_value name="$spawnZoneSafepos"/>
					<remove_value name="$spawnZoneOrientation"/>
					<remove_value name="$Elite"/>
					<remove_value name="$defineEOL"/>
				</do_if>
			</actions>
		</library>

		<!--
		<set_value name="$tmpConfig" exact="table[]" />
		<set_value name="$faction" exact="faction.player" />
		<include_actions ref="md.MM_Corps__Data.MMCData_do_station_ships" />
		-->
		<library name="MMCData_do_station_ships">
			<actions>
				<create_list name="$ShipYards"/>
				<create_list name="$Stations"/>
				<create_list name="$StationsY"/>
				<do_if value="not $tmpConfig.$traderStation?">
					<include_actions ref="md.MM_Corps__Data.MMCData_config" />
				</do_if>
				<set_value name="$temp_entitytype" exact="entitytype.manager"/>
				<set_value name="$temp_entitytypeSubordinates" exact="$tmpConfig.$traderStation"/>

				<find_station name="$temp_stations" space="player.galaxy" functional="true" multiple="true">
					<match owner="$faction"/>
				</find_station>
<set_value name="$text2" exact="'* Support Stations: %1'.[$temp_stations.count]" operation="add" />
				<do_all exact="$temp_stations.count" counter="$x">
					<do_if value="$temp_stations.{$x}.exists" negate="true">
						<continue />
					</do_if>
					<do_if value="$temp_stations.{$x}.canproduceships">
						<append_to_list name="$ShipYards" exact="$temp_stations.{$x}"/>
					</do_if>
					<do_if value="$temp_stations.{$x}.tradenpc and $temp_stations.{$x}.subordinates.{$temp_entitytype}.count lt $temp_entitytypeSubordinates">
						<append_to_list name="$Stations" exact="$temp_stations.{$x}"/>
					</do_if>
					<do_elseif value="$temp_stations.{$x}.tradenpc and $temp_stations.{$x}.subordinates.{$temp_entitytype}.count gt $temp_entitytypeSubordinates">
						<append_to_list name="$StationsY" exact="$temp_stations.{$x}"/>
					</do_elseif>
					<do_elseif value="$temp_stations.{$x}.tradenpc" chance="20" comment="check">
						<append_to_list name="$StationsY" exact="$temp_stations.{$x}"/>
						<append_to_list name="$Stations" exact="$temp_stations.{$x}"/>
					</do_elseif>
				</do_all>
				<remove_value name="$temp_stations"/>
<set_value name="$text2" exact="' [ +%1 -%2 ]'.[$Stations.count, $StationsY.count]" operation="add" />
<set_value name="$temp_remove" exact="0" />
<set_value name="$temp_add" exact="0" />
				<do_if value="$StationsY.count">
					<create_list name="$tmp_leave" />
					<create_list name="$tmp_leave_maybe" />
					<do_all exact="$StationsY.count" counter="$x">
						<do_if value="$StationsY.{$x}.tradenpc and $StationsY.{$x}.engineer" negate="true">
							<!-- TODO: Weaponplattforms with Fighters? -->
							<continue />
						</do_if>
						<set_value name="$temp_requiredShips" exact="$temp_entitytypeSubordinates"/>
						<set_value name="$temp_requiredShips" exact="$StationsY.{$x}.subordinates.{$temp_entitytype}.count" operation="subtract"/>

						<set_value name="$temp_Fighter" exact="0" />
						<set_value name="$temp_Miner" exact="0" />
						<set_value name="$temp_Collector" exact="0" />
						<set_value name="$temp_Trader" exact="0" />

						<do_all exact="$StationsY.{$x}.resources.list.count" counter="$r">
							<do_if value="$StationsY.{$x}.resources.list.{$r}.tags.indexof.{tag.minable}">
								<do_if value="$StationsY.{$x}.resources.list.{$r}.tags.indexof.{tag.liquid}">
									<set_value name="$liquid" />
									<set_value name="$liquidTrade" />
								</do_if>
								<do_if value="$StationsY.{$x}.resources.list.{$r}.tags.indexof.{tag.bulk}">
									<set_value name="$bulk" />
									<set_value name="$bulkTrade" />
								</do_if>
							</do_if>
							<do_else>
								<do_if value="$StationsY.{$x}.resources.list.{$r}.tags.indexof.{tag.liquid}">
									<set_value name="$liquidTrade" />
								</do_if>
								<do_if value="$StationsY.{$x}.resources.list.{$r}.tags.indexof.{tag.bulk}">
									<set_value name="$bulkTrade" />
								</do_if>
								<do_if value="$StationsY.{$x}.resources.list.{$r}.tags.indexof.{tag.energy}">
									<set_value name="$energyTrade" />
								</do_if>
								<do_if value="$StationsY.{$x}.resources.list.{$r}.tags.indexof.{tag.container}">
									<set_value name="$containerTrade" />
								</do_if>
							</do_else>
							<do_if value="$containerTrade? and $energyTrade? and $bulkTrade? and $liquidTrade? and $bulk? and $liquid?">
								<break />
							</do_if>
						</do_all>
						<do_if value="$containerTrade? and $energyTrade? and $bulkTrade? and $liquidTrade?" negate="true">
							<create_list name="$tmp_warelist" />
							<do_all exact="$StationsY.{$x}.products.list.count" counter="$i">
								<do_if value="$tmp_warelist.indexof.{$StationsY.{$x}.products.list.{$i}}" exact="0">
								  <append_to_list name="$tmp_warelist" exact="$StationsY.{$x}.products.list.{$i}" />
								</do_if>
							</do_all>
							<do_all exact="$StationsY.{$x}.tradewares.list.count" counter="$i">
								<do_if value="$tmp_warelist.indexof.{$StationsY.{$x}.tradewares.list.{$i}}" exact="0">
								  <append_to_list name="$tmp_warelist" exact="$StationsY.{$x}.tradewares.list.{$i}" />
								</do_if>
							</do_all>
							<do_all exact="$tmp_warelist.count" counter="$r">
								<do_if value="$tmp_warelist.{$r}.tags.indexof.{tag.liquid}">
									<set_value name="$liquidTrade" />
								</do_if>
								<do_if value="$tmp_warelist.{$r}.tags.indexof.{tag.bulk}">
									<set_value name="$bulkTrade" />
								</do_if>
								<do_if value="$tmp_warelist.{$r}.tags.indexof.{tag.energy}">
									<set_value name="$energyTrade" />
								</do_if>
								<do_if value="$tmp_warelist.{$r}.tags.indexof.{tag.container}">
									<set_value name="$containerTrade" />
								</do_if>
								<do_if value="$containerTrade? and $energyTrade? and $bulkTrade? and $liquidTrade? and $bulk? and $liquid?">
									<break />
								</do_if>
							</do_all>
							<remove_value name="$tmp_warelist"/>
						</do_if>

						<do_all exact="$StationsY.{$x}.subordinates.{$temp_entitytype}.count" counter="$y">
							<do_if value="$StationsY.{$x}.subordinates.{$temp_entitytype}.{$y}.pilot.$whatido?"> 
								<do_if value="$StationsY.{$x}.subordinates.{$temp_entitytype}.{$y}.pilot.$whatido" list="['trade.ship', 'trade.ship.ranged']">
									<do_if value="($containerTrade? or $energyTrade? or $bulkTrade? or $liquidTrade?) and
												$StationsY.{$x}.subordinates.{$temp_entitytype}.{$y}.cargo.{ware.ore}.max and 
												$StationsY.{$x}.subordinates.{$temp_entitytype}.{$y}.cargo.{ware.plasma}.max and 
												$StationsY.{$x}.subordinates.{$temp_entitytype}.{$y}.cargo.{ware.dumbfiremissile}.max and 
												$StationsY.{$x}.subordinates.{$temp_entitytype}.{$y}.cargo.{ware.energycells}.max">
										<do_if value="$haveTrade?">
											<append_to_list name="$tmp_leave_maybe" exact="$StationsY.{$x}.subordinates.{$temp_entitytype}.{$y}" />
										</do_if>
										<do_else>
											<set_value name="$haveTrade" />
										</do_else>
									</do_if>
									<do_elseif value="$containerTrade? and $StationsY.{$x}.subordinates.{$temp_entitytype}.{$y}.cargo.{ware.dumbfiremissile}.max">
										<do_if value="$haveTrade_c?">
											<append_to_list name="$tmp_leave_maybe" exact="$StationsY.{$x}.subordinates.{$temp_entitytype}.{$y}" />
										</do_if>
										<do_else>
											<set_value name="$haveTrade_c" />
										</do_else>
									</do_elseif>
									<do_elseif value="$energyTrade? and $StationsY.{$x}.subordinates.{$temp_entitytype}.{$y}.cargo.{ware.energycells}.max">
										<do_if value="$haveTrade_e?">
											<append_to_list name="$tmp_leave_maybe" exact="$StationsY.{$x}.subordinates.{$temp_entitytype}.{$y}" />
										</do_if>
										<do_else>
											<set_value name="$haveTrade_e" />
										</do_else>
									</do_elseif>
									<do_elseif value="$bulkTrade? and $StationsY.{$x}.subordinates.{$temp_entitytype}.{$y}.cargo.{ware.ore}.max">
										<do_if value="$haveTrade_b?">
											<append_to_list name="$tmp_leave_maybe" exact="$StationsY.{$x}.subordinates.{$temp_entitytype}.{$y}" />
										</do_if>
										<do_else>
											<set_value name="$haveTrade_b" />
										</do_else>
									</do_elseif>
									<do_elseif value="$liquidTrade? and $StationsY.{$x}.subordinates.{$temp_entitytype}.{$y}.cargo.{ware.plasma}.max">
										<do_if value="$haveTrade_l?">
											<append_to_list name="$tmp_leave_maybe" exact="$StationsY.{$x}.subordinates.{$temp_entitytype}.{$y}" />
										</do_if>
										<do_else>
											<set_value name="$haveTrade_l" />
										</do_else>
									</do_elseif>
									<do_else>
										<append_to_list name="$tmp_leave" exact="$StationsY.{$x}.subordinates.{$temp_entitytype}.{$y}" />
									</do_else>
								</do_if>
								<do_elseif value="$StationsY.{$x}.subordinates.{$temp_entitytype}.{$y}.pilot.$whatido" list="['mining.ship.free', 'mining.ship.station', 'mining.ship.player']">
									<do_if value="$StationsY.{$x}.subordinates.{$temp_entitytype}.{$y}.cargo.{ware.ore}.max and $StationsY.{$x}.subordinates.{$temp_entitytype}.{$y}.cargo.{ware.plasma}.max and not ($liquid? or $bulk?)">
										<append_to_list name="$tmp_leave" exact="$StationsY.{$x}.subordinates.{$temp_entitytype}.{$y}" />
									</do_if>
									<do_elseif value="$bulk? and $liquid? and not ($haveMiner? or $haveCollector?) and $StationsY.{$x}.subordinates.{$temp_entitytype}.{$y}.cargo.{ware.plasma}.max and $StationsY.{$x}.subordinates.{$temp_entitytype}.{$y}.cargo.{ware.ore}.max">
										<set_value name="$haveMiner" />
										<set_value name="$haveCollector" />
									</do_elseif>
									<do_elseif value="$bulk? and not $haveMiner? and $StationsY.{$x}.subordinates.{$temp_entitytype}.{$y}.cargo.{ware.ore}.max">
										<set_value name="$haveMiner" />
									</do_elseif>
									<do_elseif value="$liquid? and not $haveCollector? and $StationsY.{$x}.subordinates.{$temp_entitytype}.{$y}.cargo.{ware.plasma}.max">
										<set_value name="$haveCollector" />
									</do_elseif>
									<do_elseif value="$StationsY.{$x}.subordinates.{$temp_entitytype}.{$y}.cargo.{ware.ore}.max and not $bulk?">
										<append_to_list name="$tmp_leave" exact="$StationsY.{$x}.subordinates.{$temp_entitytype}.{$y}" />
									</do_elseif>
									<do_elseif value="$StationsY.{$x}.subordinates.{$temp_entitytype}.{$y}.cargo.{ware.plasma}.max and not $liquid?">
										<append_to_list name="$tmp_leave" exact="$StationsY.{$x}.subordinates.{$temp_entitytype}.{$y}" />
									</do_elseif>
									<do_elseif value="$bulk? and $haveMiner? and $StationsY.{$x}.subordinates.{$temp_entitytype}.{$y}.cargo.{ware.ore}.max">
										<append_to_list name="$tmp_leave_maybe" exact="$StationsY.{$x}.subordinates.{$temp_entitytype}.{$y}" />
									</do_elseif>
									<do_elseif value="$liquid? and $haveCollector? and $StationsY.{$x}.subordinates.{$temp_entitytype}.{$y}.cargo.{ware.plasma}.max">
										<append_to_list name="$tmp_leave_maybe" exact="$StationsY.{$x}.subordinates.{$temp_entitytype}.{$y}" />
									</do_elseif>
									<do_else>
										<append_to_list name="$tmp_leave" exact="$StationsY.{$x}.subordinates.{$temp_entitytype}.{$y}" />
									</do_else>
								</do_elseif>
								<do_elseif value="$StationsY.{$x}.subordinates.{$temp_entitytype}.{$y}.pilot.$whatido" list="['BR.move.patrol', 'move.patrol', 'move.plunder', 'move.plunder.taxi']" chance="0">
									<append_to_list name="$tmp_leave" exact="$StationsY.{$x}.subordinates.{$temp_entitytype}.{$y}" />
								</do_elseif>
							</do_if> 
							<remove_value name="$containerTrade"/>
							<remove_value name="$energyTrade"/>
							<remove_value name="$bulkTrade"/>
							<remove_value name="$liquidTrade"/>
							<remove_value name="$haveTrade"/>
							<remove_value name="$haveTrade_c"/>
							<remove_value name="$haveTrade_e"/>
							<remove_value name="$haveTrade_b"/>
							<remove_value name="$haveTrade_l"/>
							<remove_value name="$haveMiner"/>
							<remove_value name="$haveCollector"/>
							<remove_value name="$liquid"/>
							<remove_value name="$bulk"/>

							<do_all exact="$tmp_leave.count" counter="$r">
<set_value name="$temp_remove" operation="add"/>
								<set_value name="$capship" exact="$tmp_leave.{$r}.isclass.[class.ship_l, class.ship_xl]" />
								<remove_object_commander object="$tmp_leave.{$r}" />
								<start_script object="$tmp_leave.{$r}.pilot" name="'move.die'">
									<param name="byjump" value="$capship" />
									<param name="byhighway" value="not $capship" />
									<param name="bydock" value="not $capship" />
									<param name="byidle" value="true" />
								</start_script>
								<remove_value name="$capship"/>
							</do_all>
							<do_if value="$StationsY.{$x}.subordinates.{$temp_entitytype}.count gt $temp_entitytypeSubordinates">
								<set_value name="$count" exact="$temp_entitytypeSubordinates - $StationsY.{$x}.subordinates.{$temp_entitytype}.count" />
								<do_all exact="[$tmp_leave_maybe.count, $count].min">
<set_value name="$temp_remove" operation="add"/>
									<set_value name="$ship" exact="$tmp_leave_maybe.random" />
									<set_value name="$capship" exact="$ship.isclass.[class.ship_l, class.ship_xl]" />
									<remove_object_commander object="$ship" />
									<start_script object="$ship.pilot" name="'move.die'">
										<param name="byjump" value="$capship" />
										<param name="byhighway" value="not $capship" />
										<param name="bydock" value="not $capship" />
										<param name="byidle" value="true" />
									</start_script>
									<remove_value name="$capship"/>
									<remove_value name="$tmp_leave_maybe.{$tmp_leave_maybe.indexof.{$ship}}"/>
									<remove_value name="$ship"/>
								</do_all>
							</do_if>
							<clear_list list="$tmp_leave" />
							<clear_list list="$tmp_leave_maybe" />
						</do_all>
					</do_all>
					<remove_value name="$tmp_leave"/>
					<remove_value name="$tmp_leave_maybe"/>
					<remove_value name="$StationsY"/>
				</do_if> 

				<do_if value="$Stations.count and $ShipYards.count == 0">
					<find_station name="$ShipYards" space="player.galaxy" functional="true" multiple="true" productsize="ship">
						<match_content class="class.production" />
						<match_relation faction="$faction"  relation="neutral" comparison="ge"/>
					</find_station>
					<do_all exact="$ShipYards.count" counter="$x" reverse="true">
						<do_if value="$ShipYards.{$x}.exists and $ShipYards.{$x}.isoperational" negate="true">
							<remove_value name="$ShipYards.{$x}"/>
							<continue />
						</do_if>
						<do_if value="$ShipYards.{$x}.canproduceships" negate="true">
							<remove_value name="$ShipYards.{$x}"/>
							<continue />
						</do_if>
					</do_all>
				</do_if>

				<do_if value="$Stations.count and $ShipYards.count and not $tmpConfig.$ships?">
					<include_actions ref="md.MM_Corps__Data.MMCData_config" />
				</do_if>
				<do_if value="$Stations.count and $ShipYards.count and ($tmpConfig.$ships.$trade_sm.count or $tmpConfig.$ships.$mine_sm.count)">
					<create_list name="$tmpMiner" />
					<create_list name="$tmpCollector" />
					<create_list name="$tmpContainer" />
					<create_list name="$tmpLiquid" />
					<create_list name="$tmpBulk" />
					<create_list name="$tmpEnergy" />
					<create_list name="$tmpUniTrade" />

					<do_all exact="$Stations.count" counter="$x">
						<do_if value="$Stations.{$x}.tradenpc and $Stations.{$x}.engineer" negate="true">
							<!-- TODO: Weaponplattforms with Fighters? -->
							<continue />
						</do_if>
						<set_value name="$temp_requiredShips" exact="$temp_entitytypeSubordinates"/>
						<set_value name="$temp_requiredShips" exact="$Stations.{$x}.subordinates.{$temp_entitytype}.count" operation="subtract"/>

						<set_value name="$temp_Fighter" exact="0" />
						<set_value name="$temp_Miner" exact="0" />
						<set_value name="$temp_Collector" exact="0" />
						<set_value name="$temp_Trader" exact="0" />
						<do_all exact="$Stations.{$x}.subordinates.{$temp_entitytype}.count" counter="$y">
							<do_if value="$Stations.{$x}.subordinates.{$temp_entitytype}.{$y}.pilot.$whatido?"> 
								<do_if value="$Stations.{$x}.subordinates.{$temp_entitytype}.{$y}.pilot.$whatido" list="['trade.ship', 'trade.ship.ranged']">
									<set_value name="$temp_Trader" operation="add"/>
								</do_if>
								<do_elseif value="$Stations.{$x}.subordinates.{$temp_entitytype}.{$y}.pilot.$whatido" list="['mining.ship.free', 'mining.ship.station', 'mining.ship.player']">
									<do_if value="$Stations.{$x}.subordinates.{$temp_entitytype}.{$y}.cargo.{ware.ore}.max and $Stations.{$x}.subordinates.{$temp_entitytype}.{$y}.cargo.{ware.plasma}.max">
										<set_value name="$temp_Miner" operation="add"/>
										<set_value name="$temp_Collector" operation="add"/>
									</do_if>
									<do_elseif value="$Stations.{$x}.subordinates.{$temp_entitytype}.{$y}.cargo.{ware.ore}.max">
										<set_value name="$temp_Miner" operation="add"/>
									</do_elseif>
									<do_elseif value="$Stations.{$x}.subordinates.{$temp_entitytype}.{$y}.cargo.{ware.plasma}.max">
										<set_value name="$temp_Collector" operation="add"/>
									</do_elseif>
								</do_elseif>
								<do_elseif value="$Stations.{$x}.subordinates.{$temp_entitytype}.{$y}.pilot.$whatido" list="['BR.move.patrol', 'move.patrol', 'move.plunder', 'move.plunder.taxi']">
									<set_value name="$temp_Fighter" operation="add"/>
								</do_elseif>
							</do_if> 
						</do_all>

						<do_if value="$tmpConfig.$ships.$mine_sm.count"  chance="if $temp_requiredShips gt 0 then 100 else 0">
							<do_if value="$Stations.{$x}.resources.list.count" chance="if $temp_requiredShips gt 0 then 100 else 0">
								<!-- prepare data -->
								<do_all exact="$Stations.{$x}.resources.list.count" counter="$r">
									<do_if value="$Stations.{$x}.resources.list.{$r}.tags.indexof.{tag.minable}">
										<do_if value="$Stations.{$x}.resources.list.{$r}.tags.indexof.{tag.liquid}">
											<set_value name="$liquid" />
										</do_if>
										<do_if value="$Stations.{$x}.resources.list.{$r}.tags.indexof.{tag.bulk}">
											<set_value name="$bulk" />
										</do_if>
									</do_if>
									<do_if value="$liquid? and $bulk?">
										<break />
									</do_if>
								</do_all>
								<do_if value="$liquid? or $bulk?">
									<do_all exact="$tmpConfig.$ships.$mine_sm.count" counter="$r" chance="if $tmpMiner.count or $tmpCollector.count then 0 else 100">
										<substitute_text text="$testmacro" source="$tmpConfig.$ships.$mine_sm.{$r}.id">
											<replace string="'mine'" with="'match'" />
											<replace string="'ore'" with="'match'" />
											<replace string="'ice'" with="'match'" />
											<replace string="'crystal'" with="'match'" />
											<replace string="'silicon'" with="'match'" />
											<replace string="'nividium'" with="'match'" />
										</substitute_text>
										<!--
											<replace string="'collect'" with="'match'" />
											<replace string="'gas'" with="'match'" />
											<replace string="'ions'" with="'match'" />
											<replace string="'hydrogen'" with="'match'" />
											<replace string="'plasma'" with="'match'" />
										-->
										<do_if value="$testmacro != $tmpConfig.$ships.$mine_sm.{$r}.id">
											<append_to_list name="$tmpMiner" exact="$tmpConfig.$ships.$mine_sm.{$r}" />
										</do_if>
										<do_else>
											<append_to_list name="$tmpCollector" exact="$tmpConfig.$ships.$mine_sm.{$r}" />
										</do_else>
										<remove_value name="$testmacro"/>
									</do_all>

									<do_if value="$liquid? and $bulk?">
										<set_value name="$temp_Collector" exact="if $temp_entitytypeSubordinates/3 le $temp_Collector then 0 else $temp_entitytypeSubordinates/3-$temp_Collector" />
										<set_value name="$temp_Miner" exact="if $temp_entitytypeSubordinates/3 le $temp_Miner then 0 else $temp_entitytypeSubordinates/3-$temp_Miner" />
									</do_if>
									<do_else>
										<set_value name="$temp_Collector" exact="if $temp_entitytypeSubordinates/2 le $temp_Collector then 0 else $temp_entitytypeSubordinates/2-$temp_Collector" />
										<set_value name="$temp_Miner" exact="if $temp_entitytypeSubordinates/2 le $temp_Miner then 0 else $temp_entitytypeSubordinates/2-$temp_Miner" />
									</do_else>

									<!-- do order -->
									<set_value name="$temp_Station" exact="$Stations.{$x}" />
									<include_actions ref="md.MM_Corps__Data.MMCData_do_station_ships_find_sy" />
		
									<!-- process order -->
									<set_value name="$temp_Station" exact="$Stations.{$x}" />

									<do_if value="$liquid? and $tmpCollector.count == 0">
										<append_to_list name="$tmpCollector" exact="macro.units_size_m_hydrogen_collector_macro" />
									</do_if>
									<do_if value="$bulk? and $tmpMiner.count == 0">
										<append_to_list name="$tmpMiner" exact="macro.units_size_m_crystal_collector_macro" />
									</do_if>

									<do_if value="$liquid? and $tmpCollector.count" chance="if $temp_requiredShips gt 0 and $temp_Collector then 100 else 0">
										<do_if value="$temp_requiredShips le 2">
											<set_value name="$temp_StationRS" exact="$temp_Collector"/>
										</do_if>
										<do_else>
											<set_value name="$temp_StationRS" min="1" max="$temp_Collector" profile="increasing"/>
										</do_else>
										<do_all exact="$temp_StationRS">
											<do_if value="$temp_requiredShips le 0">
												<break />
											</do_if>
											<set_value name="$ref" exact="$tmpCollector.random" />
											<include_actions ref="md.MM_Corps__Data.MMCData_do_station_ships_order_ships" />
											<set_value name="$temp_requiredShips" exact="1" operation="subtract"/>
										</do_all>
										<remove_value name="$temp_StationRS"/>
									</do_if>
									<do_if value="$bulk? and $tmpMiner.count" chance="if $temp_requiredShips gt 0 and $temp_Miner then 100 else 0">
										<do_if value="$temp_requiredShips le 2">
											<set_value name="$temp_StationRS" exact="$temp_Miner"/>
										</do_if>
										<do_else>
											<set_value name="$temp_StationRS" min="1" max="$temp_Miner" profile="increasing"/>
										</do_else>
										<do_all exact="$temp_StationRS">
											<do_if value="$temp_requiredShips le 0">
												<break />
											</do_if>
											<set_value name="$ref" exact="$tmpMiner.random" />
											<include_actions ref="md.MM_Corps__Data.MMCData_do_station_ships_order_ships" />
											<set_value name="$temp_requiredShips" exact="1" operation="subtract"/>
										</do_all>
										<remove_value name="$temp_StationRS"/>
									</do_if>
									<remove_value name="$liquid"/>
									<remove_value name="$bulk"/>
									<remove_value name="$temp_Station"/>
								</do_if>
							</do_if>
						</do_if>
						<do_if value="$Stations.{$x}.resources.list.count or $Stations.{$x}.tradewares.list.count" chance="if $temp_requiredShips gt 0 then 100 else 0">
							<!-- prepare data -->
							<do_all exact="$tmpConfig.$ships.$trade_sm.count" counter="$r" chance="if $tmpContainer.count or $tmpLiquid.count or $tmpBulk.count or $tmpEnergy.count or $tmpUniTrade.count then 0 else 100">
								<substitute_text text="$testmacro" source="$tmpConfig.$ships.$trade_sm.{$r}.id">
									<replace string="'container'" with="'match'" />
									<replace string="'_04'" with="'match'" />
								</substitute_text>
								<do_if value="$testmacro != $tmpConfig.$ships.$trade_sm.{$r}.id">
									<append_to_list name="$tmpContainer" exact="$tmpConfig.$ships.$trade_sm.{$r}" />
								</do_if>
								<remove_value name="$testmacro"/>
								<substitute_text text="$testmacro" source="$tmpConfig.$ships.$trade_sm.{$r}.id">
									<replace string="'bulk'" with="'match'" />
									<replace string="'crystal'" with="'match'" />
									<replace string="'_02'" with="'match'" />
								</substitute_text>
								<do_if value="$testmacro != $tmpConfig.$ships.$trade_sm.{$r}.id">
									<append_to_list name="$tmpBulk" exact="$tmpConfig.$ships.$trade_sm.{$r}" />
								</do_if>
								<remove_value name="$testmacro"/>
								<substitute_text text="$testmacro" source="$tmpConfig.$ships.$trade_sm.{$r}.id">
									<replace string="'liquid'" with="'match'" />
									<replace string="'_01'" with="'match'" />
								</substitute_text>
								<do_if value="$testmacro != $tmpConfig.$ships.$trade_sm.{$r}.id">
									<append_to_list name="$tmpLiquid" exact="$tmpConfig.$ships.$trade_sm.{$r}" />
								</do_if>
								<remove_value name="$testmacro"/>
								<substitute_text text="$testmacro" source="$tmpConfig.$ships.$trade_sm.{$r}.id">
									<replace string="'energ'" with="'match'" />
									<replace string="'_03'" with="'match'" />
								</substitute_text>
								<do_if value="$testmacro != $tmpConfig.$ships.$trade_sm.{$r}.id">
									<append_to_list name="$tmpEnergy" exact="$tmpConfig.$ships.$trade_sm.{$r}" />
								</do_if>
								<remove_value name="$testmacro"/>
								<substitute_text text="$testmacro" source="$tmpConfig.$ships.$trade_sm.{$r}.id">
									<replace string="'universal'" with="'match'" />
								</substitute_text>
								<do_if value="$testmacro != $tmpConfig.$ships.$trade_sm.{$r}.id">
									<append_to_list name="$tmpUniTrade" exact="$tmpConfig.$ships.$trade_sm.{$r}" />
								</do_if>
								<remove_value name="$testmacro"/>
							</do_all>
							<!-- create order -->
							<create_list name="$tmpTrade" />
							<do_if value="$tmpUniTrade.count">
								<append_to_list name="$tmpTrade" exact="$tmpUniTrade.random" />
							</do_if>
							<do_if value="$tmpContainer.count or $tmpLiquid.count or $tmpBulk.count or $tmpEnergy.count">
								<do_all exact="3" counter="$s">
									<do_if value="$energy? and $container? and $liquid? and $bulk?">
										<break />
									</do_if>
									<do_if value="$s == 1">
										<set_value name="$tmpWare" exact="$Stations.{$x}.resources.list"/>
									</do_if>
									<do_elseif value="$s == 2">
										<set_value name="$tmpWare" exact="$Stations.{$x}.tradewares.list"/>
									</do_elseif>
									<do_elseif value="$s == 3">
										<set_value name="$tmpWare" exact="$Stations.{$x}.products.list"/>
									</do_elseif>
									<do_all exact="$tmpWare.count" counter="$r">
										<do_if value="$energy? and $container? and $liquid? and $bulk?">
											<break />
										</do_if>
										<do_if value="$tmpWare.{$r}.tags.indexof.{tag.energy} and not $energy?">
											<set_value name="$energy" />
											<append_to_list name="$tmpTrade" exact="$tmpEnergy.random" />
										</do_if>
										<do_if value="$tmpWare.{$r}.tags.indexof.{tag.container} and not $container?">
											<set_value name="$container" />
											<append_to_list name="$tmpTrade" exact="$tmpContainer.random" />
										</do_if>
										<do_if value="$tmpWare.{$r}.tags.indexof.{tag.liquid} and not $liquid?">
											<set_value name="$liquid" />
											<append_to_list name="$tmpTrade" exact="$tmpLiquid.random" />
										</do_if>
										<do_if value="$tmpWare.{$r}.tags.indexof.{tag.bulk} and not $bulk?">
											<set_value name="$bulk" />
											<append_to_list name="$tmpTrade" exact="$tmpBulk.random" />
										</do_if>
									</do_all>
									<remove_value name="$tmpWare"/>
								</do_all>
								<remove_value name="$energy"/>
								<remove_value name="$container"/>
								<remove_value name="$liquid"/>
								<remove_value name="$bulk"/>
							</do_if>
<set_value name="$text3" exact="'\n** EqSt: Station %1 C:%2 L:%3 B:%4 E:%5 U:%6 [T:%7]'.[$Stations.{$x}.knownname, $tmpContainer.count, $tmpLiquid.count, $tmpBulk.count, $tmpEnergy.count, $tmpUniTrade.count, $tmpTrade.count]" operation="add" chance="0"/>
							<!-- do order -->
							<set_value name="$temp_Station" exact="$Stations.{$x}" />
							<include_actions ref="md.MM_Corps__Data.MMCData_do_station_ships_find_sy" />

							<!-- process order -->
							<set_value name="$temp_Station" exact="$Stations.{$x}" />

							<do_if value="$temp_requiredShips le 2">
								<set_value name="$temp_StationRS" exact="$temp_requiredShips"/>
							</do_if>
							<do_else>
								<set_value name="$temp_StationRS" min="1" max="$temp_requiredShips" profile="increasing"/>
							</do_else>
							<do_all exact="$temp_StationRS" counter="$c">
								<do_if value="$temp_requiredShips le 0">
									<break />
								</do_if>
								<set_value name="$ref" exact="if $tmpTrade.count then $tmpTrade.random else macro.units_size_m_universal_transport_macro" />
								<!--do_if value="$tmpTrade.count gt 1 and $tmpTrade.indexof.{$ref}">
									<remove_value name="$tmpTrade.{$tmpTrade.indexof.{$ref}}"/>
								</do_if-->
								<do_if value="$tmpTrade.count gt 1 and $tmpTrade.count le $temp_StationRS and $tmpTrade.count ge $c">
									<set_value name="$ref" exact="$tmpTrade.{$c}" />
								</do_if>
								<include_actions ref="md.MM_Corps__Data.MMCData_do_station_ships_order_ships" />
								<set_value name="$temp_requiredShips" exact="1" operation="subtract"/>
							</do_all>
							<remove_value name="$temp_Station"/>
							<remove_value name="$temp_StationRS"/>
						</do_if>
						<remove_value name="$energy"/>
						<remove_value name="$container"/>
						<remove_value name="$liquid"/>
						<remove_value name="$bulk"/>
						<remove_value name="$tmpTrade"/>
					</do_all>
					<remove_value name="$tmpCollector"/>
					<remove_value name="$tmpMiner"/>
					<remove_value name="$tmpContainer" />
					<remove_value name="$tmpLiquid" />
					<remove_value name="$tmpBulk" />
					<remove_value name="$tmpEnergy" />
					<remove_value name="$tmpUniTrade" />
					<remove_value name="$tmpTrade" />
					<remove_value name="$temp_Miner"/>
					<remove_value name="$temp_Collector"/>
					<remove_value name="$temp_Trader"/>
					<remove_value name="$temp_Fighter"/>
<set_value name="$text2" exact="' [shps +%2 -%1 ]\n'.[$temp_remove, $temp_add]" operation="add" />
<remove_value name="$temp_remove"/>
<remove_value name="$temp_add"/>
				</do_if>

				<remove_value name="$ShipYards"/>
				<remove_value name="$Stations"/>
				<remove_value name="$temp_shipyard"/>
				<remove_value name="$temp_entitytype"/>
				<remove_value name="$temp_entitytypeSubordinates"/>
				<remove_value name="$faction"/>
			</actions>
		</library>

		<!--
		<set_value name="$temp_Station" exact="$Stations.{$x}" />
		<set_value name="$ShipYards" exact="[]" />
		<include_actions ref="md.MM_Corps__Data.MMCData_do_station_ships_find_sy" />
		<remove_value name="$temp_shipyard"/>
		-->
		<library name="MMCData_do_station_ships_find_sy">
			<actions>
				<do_if value="$temp_Station.canproduceships">
					<set_value name="$temp_shipyard" exact="$Stations.{$x}"/>
				</do_if>
				<do_else>
					<set_value name="$temp_shipyard" exact="null"/>
					<do_all exact="$ShipYards.count" counter="$y">
						<do_if value="$ShipYards.{$y}.isoperational" negate="true">
							<continue />
						</do_if>
						<do_if value="not $temp_shipyard">
							<set_value name="$temp_shipyard" exact="$ShipYards.{$y}"/>
							<continue />
						</do_if>
						<do_if value="$temp_shipyard.zone == $temp_Station.zone">
							<break />
						</do_if>
						<do_if value="$ShipYards.{$y}.distanceto.{$temp_Station.zone} lt $temp_shipyard.distanceto.{$temp_Station.zone}">
							<set_value name="$temp_shipyard" exact="$ShipYards.{$y}"/>
						</do_if>
					</do_all>
				</do_else>
				<remove_value name="$temp_Station"/>
			</actions>
		</library>

		<!--
		<set_value name="$ref" exact="macro.macro" />
		<set_value name="$faction" exact="faction.player" />
		<set_value name="$temp_shipyard" exact="$Station" />
		<set_value name="$temp_Station" exact="$Stations.{$x}" />
		<include_actions ref="md.MM_Corps__Data.MMCData_do_station_ships_order_ships" />
		<remove_value name="$temp_shipyard"/>
		<remove_value name="$temp_Station"/>
		-->
		<library name="MMCData_do_station_ships_order_ships">
			<actions>
				<do_if value="$raceTag? and $raceTag" negate="true">
					<set_value name="$raceTag" exact="if $faction? and ['xenon','khaak'].indexof.{$faction.id} then race.{$faction.id} else [race.argon, race.split, race.terran, race.teladi].random"/>
				</do_if>

				<set_value name="$cost" exact="0"/>
				<do_if value="$temp_shipyard" negate="true" comment="fallback">
					<set_value name="$temp_shipyard" exact="$temp_Station"/>
					<set_value name="$fallback" />
				</do_if>

				<create_ship name="$Object" dock="$temp_shipyard" zone="$temp_shipyard.zone" macro="$ref">
					<owner exact="$faction" overridenpc="true"/>
					<pilot actor="null"/>
				</create_ship>
				<do_if value="$Object.exists" negate="true">
					<create_ship name="$Object" zone="$temp_shipyard.zone" macro="$ref">
						<owner exact="$faction" overridenpc="true"/>
						<pilot actor="null"/>
						<safepos object="$temp_shipyard" y="-1km" />
					</create_ship>
				</do_if>

				<do_if value="$Object.exists">
<set_value name="$temp_add" operation="add"/>
					<do_if value="$ref.ware and $temp_shipyard.cargo.{$ref.ware}.count">
						<remove_cargo object="$temp_shipyard" ware="$ref.ware" exact="1" />
						<set_value name="$cost" exact="$ref.ware.maxprice" chance="if $temp_shipyard.owner != $faction then 100 else 0"/>
					</do_if>
					<do_elseif value="$ref.ware and $ref.ware.maxprice">
						<set_value name="$cost" exact="$ref.ware.maxprice"/>
						<do_if value="stat.nf_ships_spawned?">
							<set_value name="stat.nf_ships_spawned" operation="add" />
						</do_if>
					</do_elseif>

					<do_if value="$Object.primarypurpose == objectpurpose.mine">
						<set_value name="$Unitcapacity" exact="[($Object.units.maxcount-$Object.units.count), 200].min" />
						<do_if value="$Object.cargo.{ware.ore}.max and $Object.cargo.{ware.plasma}.max">
							<add_units object="$Object" macro="macro.units_size_drone_rubble_collector_mk2_macro" exact="$Unitcapacity/2"/>
							<set_value name="$Unitcapacity" exact="[($Object.units.maxcount-$Object.units.count), 200].min" />
							<add_units object="$Object" macro="macro.units_size_drone_liquid_collector_mk2_macro" exact="$Unitcapacity"/>
						</do_if>
						<do_elseif value="$Object.cargo.{ware.ore}.max">
							<add_units object="$Object" macro="macro.units_size_drone_rubble_collector_mk1_macro" exact="$Unitcapacity"/>
						</do_elseif>
						<do_elseif value="$Object.cargo.{ware.plasma}.max">
							<add_units object="$Object" macro="macro.units_size_drone_liquid_collector_mk1_macro" exact="$Unitcapacity"/>
						</do_elseif>
						<remove_value name="$Unitcapacity" />
					</do_if>
	
					<create_pilot name="$pilot" ship="$Object">
						<select race="$raceTag" tags="tag.pilot"/>
						<owner exact="$faction"/>
					</create_pilot>

					<set_value name="$tempActor" exact="$pilot" />
					<set_value name="$temp_Skill" exact="if $temp_shipyard.owner == $faction then true else false" />
					<include_actions ref="md.NF_BASE.NF_skill_actor" />
					<remove_value name="$tempActor"/>
					<remove_value name="$temp_Skill"/>
					
					<share_actor_account actor="$pilot" otherobject="$_CEO"/>
					
					<do_if value="$cost and $temp_shipyard.tradenpc and $_CEO.owner != $temp_shipyard.tradenpc.owner">
						<transfer_money from="$_CEO" to="$temp_shipyard.tradenpc" amount="$cost"/>
					</do_if>
	
					<set_object_commander object="$Object" commander="$temp_Station" type="$temp_Station.tradenpc.type" />

					<set_value name="$Station" exact="$temp_Station"/>
					<include_actions ref="md.MM_Corps__Data.MMCData_ship_job" />

					<remove_value name="$pilot"/>
				</do_if>

				<do_if value="$fallback?">
					<set_value name="$temp_shipyard" exact="null"/>
					<remove_value name="$fallback" />
				</do_if>
				
				<remove_value name="$Object"/>
				<remove_value name="$raceTag"/>
			</actions>
		</library>

		<!-- 
		<set_value name="$_CEO" exact="null"/>
		+ event.param2
		<include_actions ref="md.MM_Corps__Data.MMCData_dohandler_include_rentaship" />
		-->
		<library name="MMCData_dohandler_include_rentaship">
			<actions>

				<include_actions ref="md.MM_Corps__Data.MMCData_config" />

				<do_if value="event.param2? and typeof event.param2 == datatype.list and typeof event.param2.{1} == datatype.faction and global.$factionCEOs.{'$' + event.param2.{1}.id}? and $_CEO.$freeShips? and $_CEO.$freeShips.count">
					<set_value name="$_faction_Cust" exact="event.param2.{1}" />
					<set_value name="$_CEO_Cust" exact="global.$factionCEOs.{'$' + $_faction.id}" />
					<set_value name="$_Station_Cust" exact="if event.param2.{3}? then event.param2.{3} else null" />

					<do_if value="$_Station_Cust and $_Station_Cust.isoperational" negate="true"> 
						<find_station name="$_Station_Cust" space="player.galaxy" functional="true" multiple="false">
							<match_content class="class.buildmodule" />
							<match owner="$_faction_Cust"/>
						</find_station>

						<do_if value="$_Station_Cust" negate="true">
							<find_station name="$_Station_Cust" space="player.galaxy" functional="true" multiple="false">
								<match owner="$_faction_Cust"/>
							</find_station>
							<do_if value="$_Station_Cust.tradewares.list.count + $_Station_Cust.resources.list.count" negate="true">
								<set_value name="$_Station_Cust" exact="null" />
							</do_if>
						</do_if>
					</do_if>

					<set_value name="$targetZone" exact="null" />

					<do_if value="$_Station_Cust.isoperational">
						<find_object space="$_Station_Cust.cluster" name="$targetObjects" class="[class.gate, class.highwayentrygate, class.jumpbeacon, class.highwayexitgate]" multiple="true" />
						<do_if value="$targetObjects.count">
							<set_value name="$tmpObject" exact="$targetObjects.random" />
							<set_value name="$targetZone" exact="$tmpObject.zone" />
							<remove_value name="$tmpObject"/>
						</do_if>
						<do_else>
							<find_zone name="$targetzone" space="$_Station_Cust.cluster" priorityzone="true" tempzone="false">
								<match class="class.highway" negate="true" />
							</find_zone>
						</do_else>
						<remove_value name="$targetObjects"/>
						<!--
						<set_value name="$faction" exact="$_CEO.owner" />
						<set_value name="$ref" exact="$tmpConfig.$ships.$temp_ships.$fight"/>
						<set_value name="$spawnZone" exact="$targetZone" />
						<set_value name="$clearAll" />
						<include_actions ref="md.MM_Corps__Data.MMCData_ship_spawner" />
	
						<set_value name="$temp_base" exact="$createdShip" />
						<remove_value name="$createdShip"/>
						-->
						<set_value name="$temp_base" exact="$_CEO.$freeShips.random" />
	
						<do_if value="$temp_base.cluster" exact="$targetzone.cluster" negate="true">
							<set_value name="$temp_sector" exact="100" />
							<do_all exact="$_CEO.$freeShips.count" counter="$i">
								<do_if value="$_CEO.$freeShips.{$i}.zone == $targetzone">
									<set_value name="$temp_base" exact="$_CEO.$freeShips.{$i}" />
									<break />
								</do_if>
								<do_elseif value="$_CEO.$freeShips.{$i}.sector == $targetzone.sector">
									<set_value name="$temp_base" exact="$_CEO.$freeShips.{$i}" />
									<set_value name="$temp_sector" exact="0" />
								</do_elseif>
								<do_elseif value="$_CEO.$freeShips.{$i}.cluster == $targetzone.cluster" chance="$temp_sector">
									<set_value name="$temp_base" exact="$_CEO.$freeShips.{$i}" />
								</do_elseif>
							</do_all>
							<remove_value name="$temp_sector"/>
						</do_if>
						
						<do_if value="$temp_base.isoperational">
							<remove_value name="$_CEO.$freeShips.{$_CEO.$freeShips.indexof.{$temp_base}}"/>
	
							<find_station name="$ShipYards" space="player.galaxy" functional="true" multiple="true" productsize="ship">
								<match_relation faction="$_CEO.owner" comparison="not" relation="enemy" />
							</find_station>
							<do_all exact="$ShipYards.count" counter="$x" reverse="true">
								<do_if value="$ShipYards.{$x}.exists and $ShipYards.{$x}.isoperational and $ShipYards.{$x}.canproduceships" negate="true">
									<remove_value name="$ShipYards.{$x}"/>
								</do_if>
							</do_all>
		
							<set_value name="$temp_leader" exact="null" />
							<set_value name="$Squads" min="15" max="30" />
							<set_value name="$Cost" exact="0Cr" />
							<set_value name="$Cost" exact="$temp_base.macro.ware.minprice*0.5f" operation="add" />
		
							<do_all exact="$Squads" > 
		
								<set_value name="$faction" exact="$_faction_Cust" />
								<set_value name="$ref" exact="[macro.units_size_s_torpedo_bomber_macro, macro.units_size_s_ship_pirate_03_macro, macro.units_size_s_ship_pirate_02_macro].random"/>
								<include_actions ref="md.MM_Corps__Data.MMCData_dohandler_include_rentaship_buy_squads" />
								<set_value name="$spawnZone" exact="$targetZone" />
								<set_value name="$clearAll" />
								<include_actions ref="md.MM_Corps__Data.MMCData_ship_spawner" />
		
								<set_value name="$temp_leader2" exact="$createdShip" />
								<do_if value="$temp_leader" negate="true">
									<set_object_commander object="$createdShip" commander="$temp_base" />
									<set_value name="$temp_leader" exact="$createdShip" />
								</do_if>
								<do_else>
									<set_object_commander object="$createdShip" commander="$temp_leader" />
									<set_value name="$param" exact="[['base', $temp_base], ['commander', $temp_leader], ['do_escort', true]]"/>
									<set_value name="$script" exact="'carrier.default'"/>
									<set_value name="$Object" exact="$createdShip"/>
									<include_actions ref="md.MM_Corps__Data.MMCData_ship_job_runscript" />
								</do_else>
								<remove_value name="$createdShip"/>
		
								<do_all exact="2" chance="if $temp_leader == $temp_leader2 then 0 else 100"> 
			
									<set_value name="$faction" exact="$_faction_Cust" />
									<set_value name="$ref" exact="[macro.units_size_s_ship_pirate_01_macro, macro.units_size_s_ship_pirate_03_macro, macro.units_size_s_ship_pirate_02_macro].random"/>
									<include_actions ref="md.MM_Corps__Data.MMCData_dohandler_include_rentaship_buy_squads" />
									<set_value name="$spawnZone" exact="$targetZone" />
									<set_value name="$clearAll" />
									<include_actions ref="md.MM_Corps__Data.MMCData_ship_spawner" />
			
									<set_object_commander object="$createdShip" commander="$temp_leader2" />
									<set_value name="$param" exact="[['base', $temp_base], ['commander', $temp_leader2], ['do_escort', true]]"/>
									<set_value name="$script" exact="'carrier.default'"/>
									<set_value name="$Object" exact="$createdShip"/>
									<include_actions ref="md.MM_Corps__Data.MMCData_ship_job_runscript" />
		
									<remove_value name="$createdShip"/>
								</do_all>
							</do_all>
		
							<set_value name="$param" exact="[['base', $temp_base], ['do_escort', true]]"/>
							<set_value name="$script" exact="'carrier.default'"/>
							<set_value name="$Object" exact="$temp_leader"/>
							<include_actions ref="md.MM_Corps__Data.MMCData_ship_job_runscript" />
		
							<set_value name="$currentbasket" exact="[]"/>
							<do_all exact="warebasket.all.list.count" counter="$i">
								<do_if value="$_Station_Cust.cargo.{warebasket.all.list.{$i}}.target">
									<append_to_list name="$currentbasket" exact="warebasket.all.list.{$i}"/>
								</do_if>
							</do_all>
							<set_value name="$param" exact="[['range', 'sector'], ['squadleader', $temp_leader], ['customerbase', $_Station_Cust], ['basebasket', $currentbasket], ['jobmainzone', $targetZone]]"/>
							<set_value name="$script" exact="'move.plunder.taxi'"/>
							<set_value name="$Object" exact="$temp_base"/>
							<include_actions ref="md.MM_Corps__Data.MMCData_ship_job_runscript" />
		
							<transfer_money from="$_CEO_Cust" to="$_CEO" amount="$Cost"/>
						</do_if>
					</do_if>
					
					<remove_value name="$currentbasket"/>
					<remove_value name="$_faction_Cust"/>
					<remove_value name="$_CEO_Cust"/>
					<remove_value name="$_Station_Cust"/>
					<remove_value name="$temp_leader2"/>
					<remove_value name="$temp_leader"/>
					<remove_value name="$temp_base"/>
					<remove_value name="$Squads"/>
					<remove_value name="$Cost"/>
					<remove_value name="$ShipYards"/>
				</do_if>
			</actions>
		</library>

		<!--
		<set_value name="$ref" exact="macro.macro" />
		<set_value name="$faction" exact="faction.player" />
		<set_value name="$ShipYards" exact="[]" />
		<set_value name="$_CEO" exact="$_CEO" />
		<set_value name="$Cost" exact="0Cr" />
		<include_actions ref="md.MM_Corps__Data.MMCData_dohandler_include_rentaship_buy_squads" />
		-->
		<library name="MMCData_dohandler_include_rentaship_buy_squads">
			<actions>
				<set_value name="$temp_shipyard" exact="$ShipYards.random" />

				<do_if value="$temp_shipyard.exists and $ref.ware and $ref.ware.maxprice">

					<set_value name="$costShip" exact="$ref.ware.maxprice"/>

					<do_if value="$temp_shipyard.cargo.{$ref.ware}.count">
						<remove_cargo object="$temp_shipyard" ware="$ref.ware" exact="1" />

						<do_if value="$temp_shipyard.owner == $faction">
							<set_value name="$costShip" exact="0Cr"/>
						</do_if>
						<do_else>
							<set_value name="$Cost" exact="$costShip" operation="add" />
						</do_else>
					</do_if>
					<do_else>
						<do_if value="stat.nf_ships_spawned?">
							<set_value name="stat.nf_ships_spawned" operation="add" />
						</do_if>
					</do_else>

					<do_if value="$costShip and $temp_shipyard.owner != $_CEO.owner">
						<transfer_money from="$_CEO" to="$temp_shipyard.tradenpc" amount="$costShip"/>
					</do_if>
				</do_if>
				<remove_value name="$temp_shipyard"/>
				<remove_value name="$costShip"/>
			</actions>
		</library>
	</cues>
</mdscript>