<?xml version="1.0" encoding="iso-8859-1" ?>
<aiscript name="move.patrol.care" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="aiscripts.xsd" version="6">
  <params>
    <param name="range" default="'sector'" comment="'zone','station','sector','cluster'"/>
    <param name="range_min" default="5km" comment="currently only supported when range=station, or patrolobject"/>
    <param name="range_max" default="this.ship.maxradarrange * 2" comment="currently only supported when range=station, or patrolobject. Default: max radar range"/>
    <param name="patrolobject" default="null" comment="Object to patrol around (ignore range, but use range_min and range_max)" />
    <param name="position" default="null" comment="position is treated as an offset to destination. Default: safe position on [0,0,0] of destination"/>
    <param name="engageenemies" default="true" comment="When moving, scan for and engage enemies"/>
    <param name="onlyinrange" default="true" comment="Stay in the range of 'range' or 'patrolobject' within 'range_max'" />
    <param name="ownstations" default="false" comment="Check especially owned stations" />
    <param name="debugoutputchance" default="0" />
  </params>
  <interrupts>
    <handler ref="TargetInvalidHandler" />
    <handler ref="AttackHandler" />
    <handler ref="ScannedHandler" />
    <handler ref="PlayerInput" />
  </interrupts>
  <init>
    <set_command command="command.patrol"  />
    <set_command_action commandaction="commandaction.calculating" />
  </init>
  <patch sinceversion="6">
    <set_value name="$ownstations" exact="false"/>
    <set_value name="$position" exact="null"/>
  </patch>
  <attention min="unknown">
    <actions>

      <run_script name="'move.undock'" sinceversion="3" />
      <do_if value="not $patrolobject.exists and this.ship.jobmainzone">
        <set_value name="$patrolobject" exact="this.ship.jobmainzone"/>
      </do_if>
      <do_if value="@$patrolobject.exists and $patrolobject.isclass.[class.zone, class.sector, class.cluster] and ['zone','sector','cluster'].indexof.{$range}">
        <set_value name="$endintargetzone" exact="true"/>
        <do_if value="$patrolobject.isclass.zone" negate="true">
          <find_zone groupname="$zones" space="$patrolobject" multiple="true" tempzone="false" /> 
          <do_all exact="$zones.count" counter="$i" reverse="true"> 
            <do_if value="$zones.{$i}.istemporaryzone or $zones.{$i}.isclass.highway or not $zones.{$i}.ismapzone">
              <remove_from_group group="$zones" object="$zones.{$i}" />
            </do_if>
          </do_all>
          <set_value name="$patrolobject" exact="$zones.random"/>
          <remove_value name="$zones"/>
        </do_if>
        <do_if value="$position">
          <set_value name="$endintargetzone" exact="false"/>
        </do_if>
        <do_if value="not $patrolobject.isclass.zone and this.zone != $patrolobject">
          <run_script name="if @global.$mmcare_mmcarrier_is_active then 'move.generic.carrier' else 'move.generic'" >
            <param name="destination" value="$patrolobject" />
            <param name="endintargetzone" value="$endintargetzone" />
            <param name="position" value="$position" />
          </run_script>
          <set_value name="$patrolobject" exact="null"/>
        </do_if>
        <remove_value name="$endintargetzone"/>
        <set_value name="$position" exact="null"/>
      </do_if>

      <do_if value="not this.ship.engineer.exists">
        <create_engineer name="$engineer" ship="this.ship">
          <select race="race.argon" tags="tag.engineer"/>
          <owner exact="this.ship.owner"/>
          <skills>
            <skill type="boarding" exact="5"/>
            <skill type="combat" exact="5"/>
            <skill type="engineering" exact="5"/>
            <skill type="navigation" exact="5"/>
            <skill type="leadership" exact="5"/>
            <skill type="morale" exact="5"/>
            <skill type="science" exact="5"/>
            <skill type="management" exact="5"/>
          </skills>
        </create_engineer>
      </do_if>
      <do_if value="this.ship.engineer.exists">
        <start_script object="this.ship.engineer" name="'engineer.ai.plus'"/>
      </do_if>

      <label name="start" />
      <set_value name="$capship" exact="this.ship.isclass.[class.ship_l, class.ship_xl]" />

      <do_if value="this.ship.owner == this.ship.trueowner and not $ownstations">
        <get_control_entities groupname="$Entities" object="this.ship"/>
        <do_if value="$Entities?">
          <do_all exact="$Entities.count" counter="$i" > 
            <set_cover_owner object="$Entities.{$i}" faction="faction.neutral"/>
          </do_all> 
          <set_cover_owner object="this.ship" faction="faction.neutral"/>
        </do_if>
        <remove_value name="$Entities"/>
      </do_if>

      <set_value name="$startzone" exact="this.ship.zone" />
      <!-- Has a job main zone? -->
      <do_if value="this.ship.jobmainzone">
        <set_value name="$startzone" exact="this.ship.jobmainzone"/>
      </do_if>
      <set_value name="$targetzone" exact="this.ship.zone" />
      <set_value name="$patrolendtime" exact="0"/>
      <set_value name="$pos" exact="this.ship.position"/>

      <break_formation object="this.ship" />

      <do_if value="$capship">
        <set_value name="$patrol_duration" exact="20min" />
      </do_if>
      <do_else>
        <set_value name="$patrol_duration" exact="10min" />
        <create_formation formation="formationshape.vshape" object="this.ship" param="this.ship.size * 1.5" />
        <do_all exact="this.ship.subordinates.count" counter="$i">
          <do_if value="this.ship.trueowner == this.ship.subordinates.{$i}.owner">
            <get_control_entities groupname="$Entities" object="this.ship.subordinates.{$i}"/>
            <do_if value="$Entities?">
              <do_all exact="$Entities.count" counter="$j" > 
                <set_cover_owner object="$Entities.{$j}" faction="faction.neutral"/>
              </do_all> 
              <set_cover_owner object="this.ship.subordinates.{$i}" faction="faction.neutral"/>
            </do_if>
            <remove_value name="$Entities"/>
          </do_if>
          <start_script name="'move.escort'" object="this.ship.subordinates.{$i}.pilot">
            <param name="target" value="this.ship" />
            <param name="formation" value="[formationshape.vshape, formationshape.invvshape].random" />              
          </start_script>
        </do_all>
      </do_else>

      <do_if value="$range" exact="'zone'">
        <set_value name="$space" exact="null"/>
      </do_if>
      <do_elseif value="$range" exact="'station'">
        <set_value name="$space" exact="null"/>
      </do_elseif>
      <do_elseif value="$range" exact="'sector'">
        <set_value name="$space" exact="this.ship.sector" />
      </do_elseif>
      <do_elseif value="$range" exact="'cluster'">
        <set_value name="$space" exact="this.ship.cluster" />
      </do_elseif>
      <do_else>
        <!-- Don't send capships to around the cluster until their move functionality allows them to handle jumpdrives-->
        <do_if value="$range != 'sector'">
          <debug_text text="'Range %1 not supported'.[$range]" filter="error" />
        </do_if>
        <set_value name="$space" exact="this.ship.sector" />
      </do_else>

      <label name="find_destination" />
      <!-- Safety checking for non-existing zones -->
      <do_if value="not $targetzone.exists or not $startzone.exists" >
        <wait min="1s" max="2s" sinceversion="4" />
        <resume label="start" />
      </do_if>

      <set_value name="$fly_around_zone" exact="true"/>

      <!-- Specal case for check Objects "ownstations" -->
      <do_if value="$ownstations">
        <do_if value="$space.exists" negate="true">
          <set_value name="$space" exact="this.ship.sector" />
        </do_if>
        <set_value name="$hulldamagelimit" exact="60 + (40 * this.ship.engineer.combinedskill / 100)" comment="below what percentage hull is a component considered damaged (ship engineer repairs up to a value between 60% and 100%, dependent on skill)"/>
        <set_value name="$target" exact="null" />
        <find_object name="$RepairTargets" space="$space" class="class.station" owner="this.ship.trueowner" multiple="true"/>
        <do_all exact="$RepairTargets.count" counter="$i">
          <do_if value="$RepairTargets.{$i}.hullpercentage ge $hulldamagelimit">
            <continue />
          </do_if>
          <do_if value="$target == null">
            <set_value name="$target" exact="$RepairTargets.{$i}"/>
          </do_if>
          <do_elseif value="$RepairTargets.{$i}.hullpercentage lt @$target.hullpercentage">
            <set_value name="$target" exact="$RepairTargets.{$i}"/>
          </do_elseif>
        </do_all>
        <remove_value name="$hulldamagelimit"/>
        <remove_value name="$RepairTargets"/>
        <do_if value="$target.exists" >
          <set_value name="$targetzone" exact="$target.zone" />
          <set_value name="$pos" exact="$target.position" />
          <remove_value name="$target"/>
          <resume label="patrol" />
        </do_if>
        <remove_value name="$target"/>
      </do_if>

      <!-- Specal case for patrol around Object "patrolobject" -->
      <do_if value="@$patrolobject.exists">
        <set_value name="$space" exact="null" />
        <do_if value="$patrolobject.isclass.space">
          <do_if value="$patrolobject.isclass.zone">
            <set_value name="$targetzone" exact="$patrolobject" />
          </do_if>
          <do_else>
            <do_if value="true" chance="50">
              <!--normal map zones-->
              <find_zone name="$targetzone" space="$patrolobject" mapzone="true" tempzone="false"/>
            </do_if>
            <do_else>
              <!--normal map zones and those with a player station-->
              <do_if value="$patrolobject.isclass.sector">
                <find_zone name="$targetzone" space="$patrolobject" mapzone="true">
                  <match_distance object="$patrolobject" max="250km"/>
                </find_zone>
              </do_if>
              <do_else>
                <find_sector name="$tempsector" space="$patrolobject"/>
                <find_zone name="$targetzone" space="$tempsector" mapzone="true">
                  <match_distance object="$tempsector" max="250km"/>
                </find_zone>
                <remove_value name="$tempsector"/>
              </do_else>
            </do_else>
          </do_else>
          <create_position name="$patrolpos" min="$range_min" max="$range_max" />
        </do_if>
        <do_else>
          <set_value name="$targetzone" exact="$patrolobject.zone" />
          <create_position name="$patrolpos" object="$patrolobject" min="$range_min" max="$range_max" />
        </do_else>

        <do_if value="$capship">
          <set_value name="$Y" min="-500m" max="500m"/>
          <get_safe_pos result="$pos" radius="this.ship.size + 1000m" value="position.[$patrolpos.x, $Y, $patrolpos.z]" zone="$targetzone" allowyaxis="false"/>
        </do_if>
        <do_else>
          <get_safe_pos result="$pos" radius="this.ship.size + 200m" value="$patrolpos" zone="$targetzone" />
        </do_else>

        <resume label="patrol" />
      </do_if>

      <!--if $space is valid, the ship will patrol other zones-->
      <do_if value="$space">
        <set_value name="$fly_around_zone" exact="false"/>
        <do_if value="this.sector" exact="@$targetzone.sector">
          <!--Use same check distance here and in 'move.seekenemies' (this.ship.size * 2) -->
          <do_if value="this.ship.distanceto.[$targetzone, $pos]" max="this.ship.size * 2">
            <!--Ship is in the target zone but patrol time needs to be set-->
            <set_value name="$fly_around_zone" exact="true"/>
            <do_if value="$patrolendtime" exact="0">
              <set_value name="$patrolendtime" exact="player.age + $patrol_duration" />
            </do_if>

            <!--Patrol time has ended, so find a zone in this space-->
            <do_elseif value="player.age" min="$patrolendtime">
              <set_value name="$fly_around_zone" exact="false"/>
              <do_if value="true" chance="50">
                <!--normal map zones-->
                <find_zone name="$targetzone" space="$space" mapzone="true" tempzone="false"/>
              </do_if>
              <do_else>
                <!--normal map zones and those with a player station-->
                <do_if value="$space.isclass.sector">
                  <find_zone name="$targetzone" space="$space" mapzone="true">
                    <match_distance object="$space" max="250km"/>
                  </find_zone>
                </do_if>
                <do_else>
                  <find_sector name="$tempsector" space="$space"/>
                  <find_zone name="$targetzone" space="$tempsector" mapzone="true">
                    <match_distance object="$tempsector" max="250km"/>
                  </find_zone>
                  <remove_value name="$tempsector"/>
                </do_else>
                <do_if value="not $targetzone">
                  <find_zone name="$targetzone" space="$space" mapzone="true" tempzone="false"/>
                </do_if>
              </do_else>
              <create_random_position_in_boundingbox name="$pos" component="$targetzone" />
              <set_value name="$Y" min="-5000m" max="5000m"/>
              <get_safe_pos result="$pos" radius="this.ship.size + 1000m" value="position.[$pos.x, $Y, $pos.z]" zone="$targetzone" />
            </do_elseif>
          </do_if>
        </do_if>
      </do_if>

      <do_if value="$fly_around_zone">
        <!--Fly around the commanding station-->
        <do_if value="$range" exact="'station'">
          <set_value name="$targetzone" exact="null" />
          <do_if value="this.ship.commander.exists">
            <do_if value="this.ship.commander.isclass.station">
              <set_value name="$targetzone" exact="this.ship.commander.zone" />
              <create_position name="$pos" object="this.ship.commander" min="$range_min" max="$range_max"/>
              <do_if value="not $capship">
                <get_safe_pos result="$pos" radius="this.ship.size + 200m" value="$pos" zone="$targetzone" />
              </do_if>
              <do_else>
                <set_value name="$Y" min="-500m" max="500m"/>
                <get_safe_pos result="$pos" radius="this.ship.size + 1000m" value="position.[$pos.x, $Y, $pos.z]" zone="$targetzone" allowyaxis="false"/>
              </do_else>
            </do_if>
          </do_if>
          <do_if value="not $targetzone">
            <debug_text text="'No commanding station to anchor the patrolling object. Reverting to zone patrol.'" chance="$debugoutputchance" />
            <set_value name="$range" exact="'zone'"/>
            <resume label="find_destination"/>
          </do_if>
        </do_if>
        <!--Fly around the startzone-->
        <do_elseif value="$range" exact="'zone'">
          <set_value name="$targetzone" exact="$startzone" />
          <find_object space="$targetzone" name="$patrolobj" surfaceelement="false">
            <match_size min="500m" />
          </find_object>

          <do_if value="(not $capship) and ($patrolobj.exists)">
            <create_position name="$patrolpos" object="$patrolobj" min="500m" max="2km" />
            <get_safe_pos result="$pos" radius="this.ship.size + 200m" value="$patrolpos" zone="$targetzone" />
            <debug_text text="'fly to ' + $pos " chance="$debugoutputchance" />
          </do_if>
          <do_else>
            <create_random_position_in_boundingbox name="$pos" component="$targetzone" />
            <set_value name="$Y" min="-5000m" max="5000m"/>
            <get_safe_pos result="$pos" radius="this.ship.size + 1000m" value="position.[$pos.x, $Y, $pos.z]" zone="$targetzone" />
          </do_else>
        </do_elseif>
        <!--Fly around the current target zone-->
        <do_else>
          <create_random_position_in_boundingbox name="$pos" component="$targetzone" />
          <set_value name="$Y" min="-5000m" max="5000m"/>
          <get_safe_pos result="$pos" radius="this.ship.size + 1000m" value="position.[$pos.x, $Y, $pos.z]" zone="$targetzone" />
        </do_else>
      </do_if>
      <label name="patrol" />

      <!-- Safety checking for non-existing zones -->
      <do_if value="not $targetzone.exists or not $startzone.exists" >
        <wait min="1s" max="2s" sinceversion="1" />
        <resume label="start" />
      </do_if>

      <run_script name="'move.seekdefensible'">
        <param name="destination" value="$targetzone"/>
        <param name="pos" value="$pos"/>
        <param name="engageenemies" value="$engageenemies"/>
        <param name="onlyinrange" value="@$onlyinrange" />
        <param name="escort" value="$patrolobject" />
        <param name="pursuedistance" value="$range_max" />
        <param name="debugoutputchance" value="$debugoutputchance" />
      </run_script>

      <wait min="1s" max="2s" />

      <!-- check if there this is a wreck and we can restore it -->
      <do_if value="false">
        <find_gravidar_contact name="$RestoreTarget" object="this.ship" restorable="true" multiple="false">
          <match_distance object="this.ship" max="this.ship.maxradarrange"/>
          <match_size min="300m"/>
        </find_gravidar_contact>
        <do_if value="$RestoreTarget.iswreck">
          <restore_object object="$RestoreTarget" hull="1" recursive="true"/>
          <set_owner object="$RestoreTarget" faction="faction.ownerless" />
          <set_object_hull object="$RestoreTarget" exact="5" />
          <set_value name="$targetzone" exact="$RestoreTarget.zone"/>
          <get_safe_pos result="$pos" radius="this.ship.size + 1000m" ignored="this.ship" object="$RestoreTarget" zone="$targetzone" />

          <resume label="patrol"/>
        </do_if>
      </do_if>

      <do_if value="this.ship.trueowner == faction.player and @$nextupdate lt player.age">
        <write_to_logbook category="squad" text="'[%5 %1] %2/%3/%4'.[this.ship.name, this.ship.cluster.name, this.ship.sector.name, this.ship.zone.name, {20204,10002}]" queued="false"/>
        <set_value name="$nextupdate" exact="player.age + 8h"/>
      </do_if>

      <!-- check if this is a jobship at the end of its lifetime -->
      <do_if value="this.ship.jobexpired or (this.ship.isjobship and this.ship.units.{unitcategory.welder}.count == 0)">
        <debug_text text="'%1 doing job %2 has expired, die!'.[this.ship.knownname, this.ship.job]" chance="$debugoutputchance" />
        <run_script name="'move.die'" sinceversion="2">
          <param name="byjump" value="$capship" />
          <param name="byhostile" value="true" />
        </run_script>
      </do_if>

      <resume label="find_destination"/>

    </actions>
  </attention>
  <on_abort>
    <do_if value="this.ship.owner != this.ship.trueowner">
      <get_control_entities groupname="$Entities" object="this.ship"/>
      <do_if value="$Entities?">
        <do_all exact="$Entities.count" counter="$i" > 
          <set_cover_owner object="$Entities.{$i}"/>
        </do_all> 
        <set_cover_owner object="this.ship"/>
      </do_if>
      <remove_value name="$Entities"/>
      <do_all exact="this.ship.subordinates.count" counter="$i">
        <get_control_entities groupname="$Entities" object="this.ship.subordinates.{$i}"/>
        <do_if value="$Entities?">
          <do_all exact="$Entities.count" counter="$j" > 
            <set_cover_owner object="$Entities.{$j}"/>
          </do_all> 
          <set_cover_owner object="this.ship.subordinates.{$i}"/>
        </do_if>
        <remove_value name="$Entities"/>
        <start_script name="'move.escort'" object="this.ship.subordinates.{$i}.pilot">
          <param name="target" value="this.ship" />
          <param name="formation" value="[formationshape.vshape, formationshape.invvshape].random" />              
        </start_script>
      </do_all>
    </do_if>
    <destroy_object object="this.ship.engineer" chance="if this.ship.isclass.[class.ship_s, class.ship_m] then 100 else 0"/>
    <start_script object="this.ship.engineer" name="'engineer.ai'" chance="if this.ship.isclass.[class.ship_l, class.ship_xl] then 100 else 0"/>
  </on_abort>
</aiscript>