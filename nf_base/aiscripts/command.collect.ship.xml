<?xml version="1.0" encoding="iso-8859-1" ?>
<aiscript name="command.collect.ship" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="aiscripts.xsd" priority="2" version="2" >
  <!--
  Wrapper script for player cargo collect mode
  by Adrian
  -->
  <params>
    <param name="target" default="null" />
    <param name="destination" default="this.ship" />
    <param name="dockingslot" default="null" />
    <param name="restore" default="false" />
    <param name="recycle" default="null" />
    <param name="pickup" default="true" />
    <param name="manageCargo" default="true" />
    <param name="collectdrops" default="true" />
    <param name="debugchance" default="0"/>
  </params>
  <init>
    <set_command command="command.support" param="player.primaryship" />
  </init>
  <attention min="unknown">
    <actions>

      <set_value name="$bigship" exact="this.ship.isclass.ship_xl or this.ship.isclass.ship_l" />
      <set_value name="$dorecycle" exact="if $recycle and typeof $recycle == datatype.list and $recycle.count then true else false" />
      <do_if value="typeof $collectdrops == datatype.list">
        <set_value name="$basket" exact="$collectdrops.clone"/>
        <set_value name="$collectdrops" exact="if $basket.count then true else false"/>
      </do_if>


      <!-- Label to allow us to repeat indefinitely -->
      <label name="start" />

      <!-- command action for waiting time -->
      <set_command_action commandaction="commandaction.calculating" />

      <do_if value="not ($restore or $dorecycle) and $target.exists and $target.iswreck">
        <return />
      </do_if>
      <do_elseif value="not $target.exists and not $target.iswreck">
        <return />
      </do_elseif>
      <do_elseif value="$target.exists and not $target.iswreck">
        <set_command command="command.support" param="$target" />
      </do_elseif>
      <do_elseif value="$target.exists and $target.iswreck">
        <set_command command="command.move" param="$target" />
      </do_elseif>

      <!-- recall drones -->
      <run_script name="'lib.recall.drones'" />      

      <run_script name="'move.undock'" />

      <do_if value="$target.zone.isclass.highway">
        <wait exact="3s" />
        <resume label="start" />
      </do_if>


      <!-- Warp to different zone -->
      <label name="warp" />

      <do_if value="this.ship.zone != $target.zone">
        <!-- TODO @Owen add check if jumping is actually possible ! -->
        <wait exact="10s"/>
        <do_if value="$target.zone.isclass.highway">
          <resume label="start" />
        </do_if>
        <run_script name="if not global.$mmcarrierconfig.$mm_carriers_ad_glob or @this.ship.pilot.$mm_carriers_ad then 'move.generic' else if this.ship.macro.ismacro.{global.$mmcarriers} then 'move.generic.carrier' else 'move.generic'">
          <param name="destination" value="$target"/>
          <param name="forcesteering" value="not $bigship" />
          <param name="endintargetzone" value="true" />
          <param name="debugchance" value="$debugchance"/>
        </run_script>
        <wait exact="3s" />
      </do_if>


      <!-- ...and go there! -->
      <label name="move" />

      <do_if value="not ($restore or $dorecycle) and $target.exists and $target.iswreck">
        <return />
      </do_if>
      <do_elseif value="not $target.exists and not $target.iswreck">
        <return />
      </do_elseif>
      <set_command_action commandaction="commandaction.flying" />

      <do_if value="$bigship">
        <!-- go close to player or wait-->
        <do_if value="this.ship.distanceto.{$target}" min="1km + this.ship.size">
          <!--set_value name="$safepos" exact="position.[$target.position.x, $target.position.y + this.ship.size, $target.position.z]" chance="$secondTry? * 100"/-->
          <get_safe_pos object="$target" zone="$target.zone" radius="this.ship.size/2" result="$safepos" allowyaxis="false" ignored="this.ship" value="position.[0, 500m, 0]" chance="$secondTry? * 100"/>
          <get_safe_pos object="$target" zone="$target.zone" radius="this.ship.size" result="$safepos" allowyaxis="true" ignored="this.ship" direction="quadrant.up" direction2="quadrant.front" chance="if $secondTry? then 0 else 100" />
          <!-- Pick a target point near the object we need to follow -->
          <move_to object="this.ship" destination="$target.zone" usehighways="not $bigship" forceposition="true" forcesteering="not $bigship" finishonapproach="true" sinceversion="1" >
            <position value="$safepos" />
            <rotation value="$target.rotation" />
            <!--interrupt_after_time time="10s" /-->
          </move_to>
        </do_if>
        <do_else>
          <stop_moving object="this.ship" />
          <wait exact="1s" />
        </do_else>

        <do_if value="$target.exists and this.ship.distanceto.{$target} gt 2km + this.ship.size and not $secondTry?">
          <set_value name="$secondTry" />
          <resume label="move" />
        </do_if>
        <do_elseif value="not $target.exists and not $target.iswreck">
          <return />
        </do_elseif>
      </do_if>

      <stop_moving object="this.ship" />
      <set_command_action commandaction="commandaction.waitingdrones" />

      <do_if value="$restore">
        <resume label="restore" />
      </do_if>
      <do_if value="$dorecycle">
        <resume label="recycle" />
      </do_if>


      <wait exact="8s" />

      <!-- check if there is a suitable dock at the destination at all -->
      <do_if value="$dockingslot">
        <do_if value="$destination.exists">
          <do_if value="$dockingslot.component.container != $destination">
            <assert value="false" text="'The dockslots container ' + $dockingslot.component.container.knownname + ' is different to $destination: ' + $destination.knownname" break="1"/>
            <set_value name="$destination" exact="$dockingslot.component.container"/>
          </do_if>
        </do_if>
        <do_else>
          <set_value name="$destination" exact="$dockingslot.component.container"/>
        </do_else>
      </do_if>
      <do_else>
        <find_dock_location container="$destination" name="$dockingslot" size="$target.docksize"/>
      </do_else>

      <do_if value="$dockingslot == null">
        <debug_text text="'could not find valid dockingslot for \'%1\' at destination \'%2\'(%3) - %4!'.[$target.macro.id, $destination.macro.id, $destination, this.cluster.knownname]" chance="$debugchance" />
        <resume label="endofdocking" />
      </do_if>

      <check_object result="$result" object="$destination">
        <match_relation object="$target" relation="kill" comparison="not"/>
      </check_object>
      <do_if value="not $result">
        <debug_text text="'The destination will not allow ship to dock due to relations'" chance="$debugchance" />
        <resume label="endofdocking" />
      </do_if>
      <remove_value name="$result"/>

      <!-- check if we are currently docked / parked -->
      <do_if value="$target.dockslot != null or $target.docklink or $target.parkedat">
        <do_if value="$target.container" exact="$destination">
          <debug_text text="'we are already docked at our destination!'" chance="$debugchance" />
          <resume label="endofdocking" />
        </do_if>
      </do_if>

      <!-- leave formation (if there is any) as that would block our movement -->
      <leave_formation object="$target" />

      <do_if value="not $dockingslot.component.isoperational or ($dockingslot.component.external and $dockingslot.component.docked.count)">
        <debug_text text="'dockingslot was lost. look for new one of size ' + $target.docksize + ' on ' + $destination" chance="$debugchance" />
        <find_dock_location name="$dockingslot" container="$destination" size="$target.docksize" />
        <do_if value="not $dockingslot or ($dockingslot.component.external and $dockingslot.component.docked.count)" >
          <debug_text text="'hm, now apparently the dock location cannot be found, HELP!'" chance="$debugchance" />
          <resume label="endofdocking" />
        </do_if>
        <debug_text text="'Found new dock slot found: ' + $dockingslot.component" chance="$debugchance" />
      </do_if>

      <!-- ok, everything checks out, now start the docking procedure and request approach path -->
      <debug_text text="'request docking (queued)'" chance="$debugchance" />
      <request_docking ship="$target" dock="$dockingslot" queued="1" result="$success" />
      <do_while value="$success" exact="0">        
        <wait min="2s" max="10s" />
        <do_if value="not $dockingslot.component.isoperational">
          <debug_text text="'dockingslot has become invalid while waiting for docking clearance'" chance="$debugchance" />
          <resume label="endofdocking" />          
        </do_if>
        <!-- TODO: this is where we would either move to waiting position or go into a holding pattern -->
        <request_docking ship="$target" dock="$dockingslot" queued="1" result="$success" />
        <do_if value="not $success">
          <do_if value="not $queuestarttime?">
            <set_value name="$queuestarttime" exact="player.age" />
            <set_value name="$maxtime" exact="5min" />
          </do_if>
          <do_if value="(player.age - $queuestarttime) gt $maxtime">
            <debug_text text="'been waiting for more than %1s to get docking clearance, aborting'.[$maxtime]" chance="$debugchance" />
            <resume label="endofdocking" />
          </do_if>
        </do_if>
      </do_while>

      <!-- ok, got a clear approach path -->
      <debug_text text="'request docking, open doors'" chance="$debugchance" />
      <request_docking ship="$target" dock="$dockingslot" result="$success" />
      <do_while value="$success" exact="0">
        <do_if value="not $dockingslot.component.isoperational">
          <do_if value="$target.docklink">
            <!-- we should have a docklink because the queued request above must have succeeded for us to be in here, force-disconnect that to avoid stale connections -->
            <undock ship="$target" />
          </do_if>
          <debug_text text="'dockingslot has become invalid during docking'" chance="$debugchance" />
          <resume label="endofdocking" />
        </do_if>
        <request_docking ship="$target" dock="$dockingslot" result="$success" />
        <do_if value="not $success">
          <do_if value="not $queuestarttime?">
            <set_value name="$queuestarttime" exact="player.age" />
            <set_value name="$maxtime" exact="30min" />
            <do_if value="$target.isclass.ship_xl or $target.isclass.ship_l">
              <set_value name="$maxtime" exact="3h" />
            </do_if>
          </do_if>
          <do_if value="(player.age - $queuestarttime) gt $maxtime">
            <do_if value="$target.docklink">
              <debug_text text="'been waiting for more than %1s to get final docking clearance, aborting and disconnecting'.[$maxtime]" chance="$debugchance" />
              <!-- we should have a docklink because the queued request above must have succeeded for us to be in here, force-disconnect that to avoid stale connections -->
              <undock ship="$target" />
            </do_if>
            <resume label="endofdocking" />
          </do_if>
        </do_if>
        <wait min="3s" max="8s" sinceversion="2" />
      </do_while>

      <disable_collisions_between object="$target" target="$destination" />
      <!--
      <debug_text text="'move_docking'" chance="$debugchance" />
      <do_if value="$precisiondocking">
        <move_docking object="$target" dock="$dockingslot" abortpath="false" />
      </do_if>
      <do_else>
        <move_to object="$target" destination="$dockingslot.component" finishonapproach="1" flightbehaviour="flightbehaviour.dock"/>
      </do_else>
-->
      <warp object="$target" zone="$destination.zone">
        <position object="$dockingslot.component" /><!-- object="$destination" y="-700m" -->
        <rotation value="$destination.rotation" />
      </warp>
      <wait min="1s" max="2s" />

      <do_if value="not $dockingslot.component.isoperational">
        <do_if value="$target.docklink">
          <!-- we should have a docklink because the queued request above must have succeeded for us to be in here, force-disconnect that to avoid stale connections -->
          <undock ship="$target" />
        </do_if>
        <debug_text text="'dockingslot has become invalid during final approach to the dock'" chance="$debugchance" />
        <clear_collision_filter object="$target" />
        <resume label="endofdocking" />
      </do_if>      

      <do_if value="not $dockingslot.component.external">
        <close_dockingbay_doors dock="$dockingslot" />
        <!-- wait for the doors to close! -->
        <wait exact="5s" />
      </do_if>
      <debug_text text="'dock!'" chance="$debugchance" />
      <dock ship="$target" />

      <do_if value="$target.dockslot == null">
        <debug_text text="'move.dockat returns true but we are not docked!'" chance="$debugchance" />
      </do_if>


      <label name="endofdocking" />
      <do_if value="$target.trueowner == faction.ownerless and $target.dockslot">
        <set_owner object="$target" faction="this.ship.trueowner" overridenpc="true"/>
      </do_if>
      <signal_objects object="this.ship" param="'hold position'" delay="5ms" />


      <label name="restore" />
      <do_if value="$restore and $target.exists">
        <set_command command="command.scan" />
        <set_command_action commandaction="commandaction.repairchecking" />
        <signal_objects object="player.computer" param="'Care.DO.restore'" param2="[$target, this.ship, $pickup]" delay="2s" />
        <signal_objects object="this.ship" param="'hold position'" delay="500ms" />
      </do_if>


      <label name="recycle" />
      <do_if value="$recycle and typeof $recycle == datatype.list and $recycle.count and $target.exists">
        <set_command command="command.scan" />
        <set_command_action commandaction="commandaction.repairchecking" />
        <signal_objects object="player.computer" param="'Care.DO.restore'" param2="[$target, this.ship, false, true]" delay="2s" />
        <set_value name="$time" exact="player.age" />
        <set_value name="$time" exact="if $target.macro.class == class.ship_xl then 30min else 20min" operation="add"/>
        <set_value name="$wait" exact="if $recycle.count gt 3 then 5min else 10min"/>
        <do_while value="$target.exists">        
          <wait min="$wait*0.33f" max="$wait" />
          <do_if value="$target.exists and $recycle.count">
            <set_value name="$tmp" exact="$recycle.random" />      
            <do_if value="typeof $tmp == datatype.list and typeof $tmp.{1} == datatype.ware and this.ship.cargo.{$tmp.{1}}.free">
              <add_cargo ware="$tmp.{1}" object="this.ship" exact="$tmp.{2}" result="$result" />
              <do_if value="$tmp.{2} gt $result">
                <set_value name="$tmp2" exact="[$tmp.{1}, $tmp.{2}-$result]" />
              </do_if>
            </do_if>
            <remove_value name="$result"/>
            <remove_value name="$recycle.{$recycle.indexof.{$tmp}}"/>
            <do_if value="$tmp2?">
              <append_to_list name="$recycle" exact="$tmp2" />
            </do_if>
            <remove_value name="$tmp2"/>
            <remove_value name="$tmp"/>
          </do_if>
          <do_if value="$time lt player.age and $target.exists">
            <destroy_object object="$target" explosion="false" />
            <set_value name="$wait" exact="2min"/>
          </do_if>
        </do_while>
        <remove_value name="$time"/>
        <remove_value name="$wait"/>
      </do_if>
        <!-- 
        * find small cargo ships (docked)
        * transfer cargo
        * send fully loaded ships for unload at owend stations in range (?)
        -->
      <label name="cargo" />
      <do_if value="$manageCargo">
        <create_group groupname="$docks" />
        <create_group groupname="$docked" />
        <create_list name="$unload" />
        <do_all exact="4" counter="$j">
          <find_dock_location container="this.ship" size="[tag.dock_xl, tag.dock_l, tag.dock_m, tag.dock_s].{$j}" name="$dock" multiple="true"/>
          <do_all exact="$dock.count" counter="$i">
            <do_if value="$docks.indexof.{$dock.{$i}.component} == 0">
              <add_to_group groupname="$docks" object="$dock.{$i}.component" />
            </do_if>
            <do_else>
              <continue />
            </do_else>
            <do_if value="$dock.{$i}.component.docked.count">
              <add_to_group groupname="$docked" list="$dock.{$i}.component.docked" />
            </do_if>
          </do_all>
          <remove_value name="$dock"/>
        </do_all>
        <remove_value name="$docks"/>
        <set_value name="$cargo" exact="this.ship.cargo.list" />
        <do_all exact="$cargo.count" counter="$j">
          <do_if value="$cargo.{$j}" exact="ware.fuelcells">
            <continue />
          </do_if>
          <do_all exact="$docked.count" counter="$i">
            <do_if value="$docked.{$i}.trueowner" exact="this.ship.trueowner" negate="true">
              <continue />
            </do_if>
            <do_if value="$docked.{$i}.cargo.{$cargo.{$j}}.free">
              <set_value name="$amount" exact="[this.ship.cargo.{$cargo.{$j}}.count, $docked.{$i}.cargo.{$cargo.{$j}}.free].min" />
              <add_cargo ware="$cargo.{$j}" object="$docked.{$i}" exact="$amount" result="$doneamount" />
              <remove_cargo ware="$cargo.{$j}" object="this.ship" exact="$doneamount" />
            </do_if>
            <do_if value="$unload.indexof.{$docked.{$i}} == 0 and $docked.{$i}.cargo.{$cargo.{$j}}.max and $docked.{$i}.cargo.{$cargo.{$j}}.free == 0">
              <append_to_list name="$unload" exact="$docked.{$i}" />
            </do_if>
            <do_if value="this.ship.cargo.{$cargo.{$j}}.count == 0">
              <break />
            </do_if>
          </do_all>
        </do_all>
        <remove_value name="$docked"/>
        <remove_value name="$cargo"/>
        <!-- signal $unload $commander -->
        <remove_value name="$unload"/>
        <do_if value="$drops?">
          <set_value name="$collectdrops" exact="false" />
        </do_if>
      </do_if>

      <label name="drops" />
      <do_if value="$collectdrops">
        <set_command_action commandaction="commandaction.waitingdrones" />
        <!-- The target is destroyed or disenganged: Find crates that match the basket -->
        <find_object name="$crates" class="class.collectable" space="this.ship.sector" multiple="true">
          <match_distance object="this.ship" max="8km"/>
        </find_object>
        <set_value name="$drops" exact="[]"/>
        <do_if value="$basket?" negate="true">
          <create_list name="$basket" />
        </do_if>
        <debug_text text="'Crates to collect %1, basket: %2'.[$crates, $basket]" chance="$debugchance"/>
        <do_all exact="$crates.count" counter="$i">
          <set_value name="$cratewares" exact="$crates.{$i}.wares.list"/>
          <debug_text text="'target dropped crate with: ' + $cratewares" chance="$debugchance"/>
          <do_all exact="$cratewares.count" counter="$o">
            <do_if value="this.ship.cargo.{$cratewares.{$o}}.free">
              <do_if value="$basket.indexof.{$cratewares.{$o}} or $basket.count == 0">
                <debug_text text="$cratewares.{$o} + ' added to final crates'" chance="$debugchance"/>
                <append_to_list name="$drops" exact="$crates.{$i}"/>
                <break/>
              </do_if>
            </do_if>
          </do_all>
        </do_all>
        <!-- Either if it was destroyed or disengaged, there might be some drops, if not end -->
        <do_if value="$drops.count">
          <!-- Collect -->
          <do_all exact="$drops.count" counter="$i" reverse="true">
            <do_if value="$drops.{$i}.exists and $drops.{$i}.isclass.collectable" negate="true">
              <resume label="$drops.{$i}"/>
            </do_if>
          </do_all>
          <sort_collectables_by_value name="$sortedlist" collectables="$drops" object="this.ship" />
          <do_if value="$sortedlist.count">
            <add_to_group groupname="$sorteddrops" list="$sortedlist"/>
            <debug_text text="'Target was destroyed. Checking for crates. Basket %1, drops %2'.[$basket, $sorteddrops]" chance="$debugchance"/>
            <run_script name="'move.collect.ship'">
              <param name="targetgroup" value="$sorteddrops"/>
              <param name="debugoutputchance" value="$debugchance"/>
            </run_script>
            <set_value name="$doWait" exact="player.age+1h"/>
            <do_while value="player.age lt $doWait and this.ship.availableunits.{unitcategory.transport}.count != this.ship.units.{unitcategory.transport}.count">        
              <wait min="20*player.timewarp.factor" max="30*player.timewarp.factor"/>
            </do_while>
          </do_if>

          <do_if value="$manageCargo">
            <resume label="cargo"/>
          </do_if>
        </do_if>
      </do_if>
      <!--do_else>
        <signal_objects object="this.ship" param="'stop order'" delay="3s"/>
      </do_else-->

      <wait exact="1s" />

    </actions>
  </attention>
</aiscript>