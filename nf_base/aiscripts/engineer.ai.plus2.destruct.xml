<?xml version="1.0" encoding="utf-8" ?>
<aiscript name="engineer.ai.plus2.destruct" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="aiscripts.xsd" >
  <params>
    <param name="Defensible" default="this.defensible"/>
    <param name="part" default="null"/>
    <param name="stage" default="null"/>
    <param name="debugoutputchance" default="0"/>
    <param name="debugoutputchance2" default="0"/>
  </params>
  <interrupts>
    <handler comment="Destroyed">
      <conditions>
        <event_object_destroyed object="$Defensible"/>
      </conditions>
      <actions>
        <abort_called_scripts resume="end"/>
      </actions>
    </handler>
  </interrupts>
  <init>
    <set_value name="$repairfrequency" exact="120s" />
    <set_value name="$nextelementcheck" exact="0" />
    <set_value name="$baserepairrate" exact="50" />
    <set_value name="$CurrentElement" exact="null"/>
    <set_value name="this.$work" exact="table[$object = $Defensible, $element = $CurrentElement, $deconstruction = true]" />
    <set_value name="$hulldamagelimit" exact="100"/>
  </init>
  <attention min="unknown">
    <actions>


      <label name="checkforrepair" />

      <debug_text text="'Begin wait'" chance="$debugoutputchance2"/>
      <wait min="$repairfrequency" max="$repairfrequency + player.timewarp.factor*6" />

      <!--after coffee break check-->
      <do_if value="$Defensible.iswreck">
        <resume label="end" />
      </do_if>

      <!--TODO: empty storage -->
      <!--TODO: empty drones -->
      <!--TODO: clear buildmodules -->
      <!--TODO: prevent adding new NPC -->

      <!--Find surface elements and put them in the correct lists/groups-->
      <!--This can be quite expensive so only do it once finished with the $CurrentElement-->
      <do_if value="not $CurrentElement.exists and player.age ge $nextelementcheck">
        <create_group groupname="$PossibleElements"/>
        <create_list name="$PossibleElementsTMP"/>
        <set_value name="$nextelementcheck" min="player.age + player.timewarp.factor*60" max="player.age + player.timewarp.factor*120"/>

        <do_if value="typeof $part == datatype.component and $part.exists and not $stage">
          <add_to_group groupname="$PossibleElements" object="$part" />
          <find_object_component groupname="$PossibleElements" class="class.destructible" object="$Defensible" checkoperational="false" multiple="true">
            <match_buildsource sequence="if typeof $part == datatype.component then $part.sequence else $part.component.sequence" stage="if typeof $part == datatype.component then $part.stage else $part.component.stage" />
          </find_object_component>
          <do_all exact="$PossibleElements.list.count" counter="$x" reverse="true">
            <do_if value="@$PossibleElements.list.{$x}" negate="true">
              <continue />
            </do_if>
            <do_if value="$PossibleElements.list.{$x}" exact="$part">
              <continue />
            </do_if>
            <do_if value="$PossibleElements.list.{$x}.macro and $PossibleElements.list.{$x}.macro.id" negate="true">
              <remove_from_group group="$PossibleElements" object="$PossibleElements.list.{$x}" />
              <continue />
            </do_if>
            <substitute_text text="$result" source="$PossibleElements.list.{$x}.macro.id" >
              <replace string="'playerdock'" with="'match'" />
              <replace string="'adsigns'" with="'match'" />
            </substitute_text>
            <do_if value="$result == $PossibleElements.list.{$x}.macro.id">
              <remove_from_group group="$PossibleElements" object="$PossibleElements.list.{$x}" />
            </do_if>
          </do_all>
          <remove_value name="$result"/>
        </do_if>
        <do_elseif value="typeof $part == datatype.component and $part.exists">
          <find_object_component groupname="$PossibleElements" class="[class.destructible, class.production, class.buildmodule, class.storage, class.radar]" object="$Defensible" checkoperational="false" multiple="true">
            <match_buildsource sequence="if typeof $part == datatype.component then $part.sequence else $part.component.sequence" stage="if typeof $part == datatype.component then $part.stage else $part.component.stage" />
          </find_object_component>
          <do_all exact="$PossibleElements.list.count" counter="$x" reverse="true">
            <do_if value="@$PossibleElements.list.{$x}" negate="true">
              <continue />
            </do_if>
            <do_if value="@$PossibleElements.list.{$x}.class" list="[class.destructible, class.production, class.buildmodule, class.storage, class.radar]" negate="true">
              <append_to_list name="$PossibleElementsTMP" exact="$PossibleElements.list.{$x}"/>
              <remove_from_group group="$PossibleElements" object="$PossibleElements.list.{$x}" />
            </do_if>
          </do_all>
        </do_elseif>
        <do_elseif value="$stage and typeof $stage == datatype.list and $stage.count">
          <find_object_component groupname="$PossibleElements" object="$Defensible" checkoperational="false" multiple="true">
            <match_buildsource sequence="$stage.{1}" stage="$stage.{2}" />
          </find_object_component>
          <do_all exact="$PossibleElements.list.count" counter="$x" reverse="true">
            <do_if value="@$PossibleElements.list.{$x}" negate="true">
              <continue />
            </do_if>
            <do_if value="@$PossibleElements.list.{$x}.class" list="[class.destructible, class.production, class.buildmodule, class.storage, class.radar]" negate="true">
              <append_to_list name="$PossibleElementsTMP" exact="$PossibleElements.list.{$x}"/>
              <remove_from_group group="$PossibleElements" object="$PossibleElements.list.{$x}" />
            </do_if>
          </do_all>
        </do_elseif>
        <do_elseif value="$stage == 'remove'">
          <set_value name="$finalStage"/>
          <find_object_component groupname="$PossibleElements" object="$Defensible" checkoperational="false" multiple="true">
            <match_buildsource sequence="''" stage="0" negate="true" />
          </find_object_component>
          <do_all exact="$PossibleElements.list.count" counter="$x" reverse="true">
            <do_if value="@$PossibleElements.list.{$x}" negate="true">
              <continue />
            </do_if>
            <do_if value="@$PossibleElements.list.{$x}.class" list="[class.destructible, class.production, class.buildmodule, class.storage, class.radar]" negate="true">
              <append_to_list name="$PossibleElementsTMP" exact="$PossibleElements.list.{$x}"/>
              <remove_from_group group="$PossibleElements" object="$PossibleElements.list.{$x}" />
            </do_if>
          </do_all>
        </do_elseif>
        <do_else>
          <remove_value name="this.$Defensible"/>
          <resume label="end" />
        </do_else>
        <!--TODO: remove this.plattform -->
        <do_if value="this.room and $PossibleElements.list.indexof.{this.room}">
          <remove_from_group group="$PossibleElements" object="this.room" />
          <do_if value="$PossibleElementsTMP? and $PossibleElementsTMP.indexof.{this.room}">
            <remove_value name="$PossibleElementsTMP.{$PossibleElementsTMP.indexof.{this.room}}" />
          </do_if>
        </do_if>
        <do_if value="$PossibleElements.list.count == 0 and $PossibleElementsTMP.count">
          <add_to_group groupname="$PossibleElements" list="$PossibleElementsTMP" />
        </do_if>
        <remove_value name="$PossibleElementsTMP" />

        <debug_text text="$PossibleElements.count + ' potential things to repair found'" chance="$debugoutputchance2"/>

        <do_if value="$PossibleElements.count" min="1">
          <remove_value name="$finished"/>
          <set_value name="$MassTrafficTargets" exact="$PossibleElements.list"/>
          <do_if value="typeof $part == datatype.component and $part.exists and $PossibleElements.list.count gt 1">
            <set_value name="$PossibleElements2" exact="$PossibleElements.list.clone"/>
            <remove_value name="$PossibleElements2.{$PossibleElements2.indexof.{$part}}"/>
            <set_value name="$CurrentElement" exact="$PossibleElements2.random"/>
            <remove_value name="$PossibleElements2"/>
          </do_if>
          <do_else>
            <set_value name="$CurrentElement" exact="$PossibleElements.random"/>
          </do_else>
          <do_if value="player.room and $CurrentElement == player.room">
            <set_value name="$CurrentElement" exact="null"/>
            <set_value name="$nextelementcheck" exact="0"/>
            <resume label="checkforrepair" />
          </do_if>
          <set_command_action commandaction="commandaction.repairingto" param="$CurrentElement" />
          <set_value name="$BaseRestoreTime" exact="($CurrentElement.size)s"/>

          <do_if value="$BaseRestoreTime" min="20min">
            <set_value name="$BaseRestoreTime" exact="if $repairratefactor? and $repairratefactor gt 30 then 5min else 20" comment="cap time for large components"/>
          </do_if>
          <do_elseif value="$BaseRestoreTime" max="1min">
            <set_value name="$BaseRestoreTime" exact="1min" comment="cap time for small components"/>
          </do_elseif>
          <debug_text text="'BaseRestoreTime is ' + $BaseRestoreTime" chance="$debugoutputchance"/>
          <set_value name="$RestoreTime" min="player.age + $BaseRestoreTime" max="player.age + $BaseRestoreTime + 1s"/>
        </do_if>
        <do_else>
          <set_value name="$finished" />
        </do_else>
        <clear_group group="$PossibleElements"/>
        <do_if value="$RestoreTime? and $RestoreTime">
          <set_value name="$nextelementcheck" min="$RestoreTime + 2min" max="$RestoreTime + 3min"/>
        </do_if>

        <!-- If no elements or main hull to repair -->
        <do_if value="$finished? and $stage != 'remove'">
          <do_if value="this.$Defensible? and this.$Defensible == $Defensible">
            <remove_value name="this.$Defensible"/>
          </do_if>
          <resume label="end" />
        </do_if>
      </do_if>


      <label name="checkelement" />
      <do_if value="$CurrentElement.exists">
        <resume label="startrepair"/>
      </do_if>
      <set_value name="$CurrentElement" exact="null"/>

      <!--Check if there is nothing to fix-->
      <do_if value="not $CurrentElement.exists">
        <debug_text text="$Defensible.knownname + ' is ending mass traffic (nothing left to repair)'" chance="$debugoutputchance" />
        <end_repair_mass_traffic object="this.defensible" />
        <remove_value name="$networkid" />
        <do_if value="$nextelementcheck gt player.age + 2min">
          <set_value name="$nextelementcheck" exact="0"/>
        </do_if>
        <resume label="checkforrepair"/>
      </do_if>


      <label name="startrepair" />
      <do_if value="this.$work?" negate="true">
        <set_value name="this.$work" exact="table[$object = $Defensible, $element = $CurrentElement, $deconstruction = true]" />
        <do_if value="$RestoreTime?">
          <set_value name="this.$work.$elementTime" exact="$RestoreTime" />
        </do_if>
      </do_if>
      <!-- send out the repair drones -->
      <do_if value="not @$networkid" chance="0">
        <do_if value="not $MassTrafficTargets?">
          <set_value name="$MassTrafficTargets" exact="[this.defensible]" />
        </do_if>
        <launch_repair_drones object="this.defensible" target="$Defensible" components="$MassTrafficTargets" result="$networkid" />
        <debug_text text="this.defensible.knownname + ' launched mass traffic - network id: ' + $networkid" chance="$debugoutputchance" />
        <set_value name="$MassTrafficTargets" exact="[]"/>
      </do_if>

      <!-- calculate repair speed -->
      <set_value name="$repairratefactor" exact="0" />

      <do_if value="@$networkid" chance="0">
        <find_active_repair_mass_traffic object="this.defensible" result="$networkid" />
        <get_units_in_mass_traffic masstraffic="$networkid" category="unitcategory.welder" amounts="$unitamounts" />

        <do_if value="$unitamounts">
          <do_all exact="unitcategory.welder.maxmk" counter="$i">
            <debug_text text="$unitamounts.{$i} + ' welders mk ' + $i" chance="$debugoutputchance" />
            <set_value name="$repairratefactor" operation="add" exact="$unitamounts.{$i} * $i" />
          </do_all>
          <remove_value name="$unitamounts" />
        </do_if>
      </do_if>

      <do_if value="$repairratefactor == 0">
        <do_if value="@$networkid">
          <debug_text text="this.defensible.knownname + ' is ending mass traffic (no more units are flying)'" chance="$debugoutputchance" />
          <end_repair_mass_traffic object="this.defensible" />
          <remove_value name="$networkid" />
        </do_if>

        <do_if value="this.defensible.isclass.[class.ship_l, class.ship_xl]">
          <set_value name="$repairratefactor" exact="[this.defensible.units.{unitcategory.welder}.count + this.defensible.availableunits.{unitcategory.marine}.count, 0.1f].max" />
        </do_if>
        <do_elseif value="this.defensible.isclass.station">
          <set_value name="$repairratefactor" exact="[[this.defensible.units.{unitcategory.welder}.count + this.defensible.availableunits.{unitcategory.marine}.count, 6].max, 40].min" />
        </do_elseif>
        <do_elseif value="this.defensible.isclass.[class.ship_s, class.ship_m] and this.ship.dockslot != null">
          <!-- rate like a mk1 drone -->
          <set_value name="$repairratefactor" exact="1" />
        </do_elseif>
        <do_elseif value="this.isclass.computer">
          <set_value name="$repairratefactor" exact="0.6" />
        </do_elseif>
        <do_else>
          <set_value name="$repairratefactor" exact="0.2" />
        </do_else>
      </do_if>

      <set_value name="$repairratefactor" operation="add" exact="$repairratefactor * this.combinedskill / 25" comment="engineer speeds up repair by up to 400% (meaning a fifth of the normal repair time)" />

      <set_value name="$repairrate" exact="$baserepairrate * $repairratefactor" />
      <debug_text text="'Repairrate: ' + $repairrate" chance="$debugoutputchance" />

      <do_if value="$CurrentElement">
        <do_if value="$CurrentElement.iswreck" negate="true">
          <do_if value="@$RestoreTime" min="1">
            <do_if value="player.age" min="$RestoreTime">
              <!--Restore the $CurrentElement and all of its contained components to 1% hull-->
              <destroy_object object="$CurrentElement" explosion="true" />
              <set_value name="$RestoreTime" exact="0"/>
              <debug_text text="'Restoring ' + $CurrentElement + ' ' + $CurrentElement.knownname" chance="$debugoutputchance"/>
            </do_if>
          </do_if>
          <do_else>
            <!--Component is wrecked but no restore time is defined. It may have been recently wrecked.-->
            <set_value name="$CurrentElement" exact="null"/>
          </do_else>
        </do_if>
        <do_else>
          <destroy_object object="$CurrentElement" explosion="false" />
        </do_else>
        <signal_objects object="player.galaxy" param="'learned.something'" param2="[this, ware.inv_virtualseminarengineering, 'repair']" />
        <do_if value="this.$work?">
          <set_value name="this.$work.$element" exact="$CurrentElement" />
          <do_if value="$RestoreTime?">
            <set_value name="this.$work.$elementTime" exact="$RestoreTime" />
          </do_if>
        </do_if>
      </do_if>
      <!--Repair Defensible Hull-->
      <do_elseif value="$Defensible.isclass.[class.ship, class.station] and $Defensible.maxhull ge 1">
        <do_if value="$Defensible.hullpercentage lt $hulldamagelimit" >
          <set_value name="$addedhullpercentage" exact="100f * $repairrate / $Defensible.maxhull" />
          <!-- handle the case of the percentage being < 0 -->
          <do_if value="$addedhullpercentage lt 1">
            <set_value name="$addedhullpercentage" exact="[1.0f, 1.1f, 1.2f, 1.3f, 1.33f].random"/>
          </do_if>
          <do_if value="$addedhullpercentage" min="1">
            <!-- set the repair command action -->
            <set_command_action commandaction="commandaction.repairingto" param="$Defensible" />
            <!-- repair the hull -->
            <set_value name="$tempCheckHull" exact="($Defensible.hullpercentage)i" />
            <set_object_hull object="$Defensible" exact="$Defensible.hullpercentage - $addedhullpercentage" />
            <do_if value="($Defensible.hullpercentage)i" exact="$tempCheckHull" chance="if $tempCheckHull lt 2 then 0 else 100">
              <set_object_hull object="$Defensible" exact="($Defensible.hullpercentage)i - [$addedhullpercentage*2, 3].max" />
            </do_if>
            <do_if value="($Defensible.hullpercentage)i == $tempCheckHull or $Defensible.hullpercentage le 1">
              <resume label="end"/>
            </do_if>
            <remove_value name="$tempCheckHull" /> 
            <debug_text text="'repaired main object ' + $Defensible + ' ' + $Defensible.knownname + ' to hull value ' + $Defensible.hull + ' (' + $Defensible.hullpercentage + '%)'" chance="$debugoutputchance" />
            <do_if value="$Defensible.hullpercentage ge $hulldamagelimit">
              <debug_text text="$Defensible + ' ' + $Defensible.knownname + ' was repaired as much as possible.'" chance="$debugoutputchance"/>
            </do_if>
          </do_if>
        </do_if>
      </do_elseif>
      <do_else>
        <resume label="end"/>
      </do_else>

      <resume label="checkforrepair" />


      <label name="end" />

      <do_if value="$finalStage?">
        <signal_objects object="player.galaxy" param="'do.remove.this'" param2="$Defensible" delay="5s"/>
      </do_if>
      <set_value name="$Defensible" exact="this.defensible"/>
      <end_repair_mass_traffic object="this.defensible" />
      <set_command command="command.repair" />
      <remove_value name="this.$work" /> 

    </actions>
  </attention>
  <on_abort>
    <do_if value="$finalStage?">
      <signal_objects object="player.galaxy" param="'Care.DO.recycle.work'" param2="this" param3="$Defensible" delay="10s" />
    </do_if>
    <end_repair_mass_traffic object="this.defensible" />
    <remove_value name="this.$work" /> 
  </on_abort>
</aiscript>
