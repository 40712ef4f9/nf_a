<?xml version="1.0" encoding="utf-8" ?>
<aiscript name="engineer.ai.plus2.process" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="aiscripts.xsd" >
  <params>
    <param name="Defensible" default="this.defensible"/>
    <param name="debugoutputchance" default="0"/>
    <param name="debugoutputchance2" default="0"/>
  </params>
  <interrupts>
    <handler comment="Destroyed">
      <conditions>
        <event_object_destroyed object="$Defensible"/>
      </conditions>
      <actions>
        <abort_called_scripts resume="end"/>
      </actions>
    </handler>
    <handler comment="repair object">
      <conditions>
        <event_object_signalled object="this.object" param="'engineer.repair.this'" />
        <check_value value="event.param2? and event.param2.exists and event.param2.container == $Defensible"/>
      </conditions>
      <actions>
        <set_value name="$CurrentElement" exact="event.param2" />
        <set_command_action commandaction="commandaction.repairingto" param="$CurrentElement" />
        <do_if value="$CurrentElement? and $RestoreTime? and $CurrentElement != event.param2">
          <set_value name="$RestoreTime" exact="0"/>
        </do_if>
        <abort_called_scripts resume="checkelement"/>
      </actions>
    </handler>
  </interrupts>
  <init>
    <set_value name="$repairfrequency" exact="20s" />
    <set_value name="$nextelementcheck" exact="0" />
    <set_value name="$baserepairrate" exact="50" />
    <set_value name="$CurrentElement" exact="null"/>
  </init>
  <attention min="unknown">
    <actions>


      <label name="checkforrepair" />

      <do_if value="this.defensible.isclass.station">
        <set_value name="$hulldamagelimit" exact="100" comment="below what percentage hull is a component considered damaged"/>
      </do_if>
      <do_else>
        <set_value name="$hulldamagelimit" exact="60 + (40 * this.combinedskill / 100)" comment="below what percentage hull is a component considered damaged (ship engineer repairs up to a value between 60% and 100%, dependent on skill)"/>
      </do_else>

      <do_if value="not $Defensible? or 
          not $Defensible.exists or 
          $Defensible.iswreck or
          ($Defensible != this.defensible and this.defensible.hullpercentage lt $hulldamagelimit-5) or 
          ($Defensible != this.defensible and this.defensible.distanceto.{$Defensible} gt this.defensible.maxradarrange*0.55f)
      ">
        <resume label="end" />
      </do_if>

      <debug_text text="'Begin wait'" chance="$debugoutputchance2"/>
      <wait min="$repairfrequency" max="$repairfrequency + player.timewarp.factor*6" />

      <!--after coffee break check-->
      <do_if value="$Defensible.iswreck">
        <resume label="end" />
      </do_if>

      <!--spend shieldpower-->
      <do_if value="$Defensible != this.defensible and $Defensible.maxshield and this.defensible.maxshield and this.defensible.shieldpercentage gt 80 and $Defensible.shieldpercentage lt 50 and this.defensible.maxshield/100 ge $Defensible.maxshield/30 and this.defensible.distanceto.{$Defensible} lt 5km">
        <set_value name="$spend" exact="this.defensible.shield - (this.defensible.maxshield*0.5f)" />
        <set_value name="$required" exact="$Defensible.maxshield*0.5f - $Defensible.shield" />
        <set_value name="$spendpercent" exact="$spend / $Defensible.maxshield" />
        <set_value name="$droppercent" exact="$Defensible.maxshield / this.defensible.shield"/>
        <set_value name="$newShieldPercent" exact="0"/>
        <do_if value="$spend gt $Defensible.maxshield*10">
          <set_value name="$newShieldPercent" exact="100"/>
          <set_value name="$dropShieldPercent" exact="($Defensible.maxshield - $Defensible.shield)*2 / this.defensible.shield *100"/>
        </do_if>
        <do_elseif value="$spend gt $Defensible.maxshield*2">
          <set_value name="$newShieldPercent" exact="if $Defensible.shieldpercentage gt 40 then 50 else if $Defensible.shieldpercentage gt 30 then 40 else if $Defensible.shieldpercentage gt 20 then 30 else if $Defensible.shieldpercentage gt 10 then 20 else 10"/>
          <set_value name="$dropShieldPercent" exact="$droppercent * 10"/>
        </do_elseif>
        <do_elseif value="$spend ge $required*2 and $spendpercent ge 2">
          <set_value name="$newShieldPercent" exact="$Defensible.shieldpercentage + $spendpercent*0.5f"/>
          <set_value name="$dropShieldPercent" exact="$droppercent"/>
        </do_elseif>
        <do_elseif value="$spend and $required and $spendpercent le 1">
          <set_value name="$newShieldPercent" exact="$Defensible.shieldpercentage + $spendpercent"/>
          <set_value name="$dropShieldPercent" exact="$droppercent * 2"/>
        </do_elseif>
        <do_elseif value="$spend and $required and $spendpercent lt 1 and $spendpercent gt 0">
          <set_value name="$newShieldPercent" exact="$Defensible.shieldpercentage + 1"/>
          <set_value name="$dropShieldPercent" exact="($droppercent * (1/$spendpercent)) *2"/>
        </do_elseif>
        <do_if value="$newShieldPercent gt ($Defensible.shieldpercentage)i">
          <set_object_shield object="$Defensible" exact="[$newShieldPercent, 100].min"/>
          <do_if value="$dropShieldPercent gt 1">
            <set_object_shield object="this.defensible" exact="[this.defensible.shieldpercentage - $dropShieldPercent, 1].max"/>
          </do_if>
        </do_if>
        <remove_value name="$dropShieldPercent"/>
        <remove_value name="$newShieldPercent"/>
        <remove_value name="$spendpercent"/>
        <remove_value name="$droppercent"/>
        <remove_value name="$required"/>
        <remove_value name="$spend"/>
      </do_if>

      <!--Find surface elements and put them in the correct lists/groups-->
      <!--This can be quite expensive so only do it once finished with the $CurrentElement-->
      <do_if value="player.age" min="$nextelementcheck">
        <create_group groupname="$PossibleElements"/>
        <set_value name="$nextelementcheck" min="player.age + player.timewarp.factor*60" max="player.age + player.timewarp.factor*120"/>
        <set_value name="$FindChance" exact="100"/>

        <!--If ship, find engines and jumpdrives - High priority-->
        <do_if value="$Defensible.isclass.ship">
          <find_object_component chance="$FindChance" groupname="$PossibleElements" object="$Defensible" class="[class.jumpdrive, class.engine]" checkoperational="false" multiple="true">
            <match_any>
              <match restorable="true" comment="wrecked"/>
              <match repairable="true" invulnerable="false">
                <match_hull min="$hulldamagelimit" negate="true" />
              </match>
            </match_any>
          </find_object_component>
          <do_if value="$PossibleElements.count" chance="66">
            <set_value name="$FindChance" exact="10"/>
          </do_if>
        </do_if>
        <!--find large, non surface element destructibles-->
        <find_object_component chance="$FindChance" groupname="$PossibleElements" object="$Defensible" class="class.destructible" surfaceelement="false" checkoperational="false" multiple="true">
          <match class="[class.adsign, class.ship]" checkoperational="false" negate="true"/>
          <match_macro_children min="1" comment="Does this component have children, use macro so collapsed surface elements also count"/>
          <match_any>
            <match restorable="true" comment="wrecked"/>
            <match repairable="true" invulnerable="false">
              <match_hull min="$hulldamagelimit" negate="true" />
            </match>
          </match_any>
        </find_object_component>
        <debug_text text="$PossibleElements.count + ' priority things to repair found'" chance="$debugoutputchance2"/>
        <do_all exact="$PossibleElements.count" counter="$Counter" chance="$debugoutputchance2">
          <debug_text text="'Priority Destructible: ' + $PossibleElements.{$Counter} + ' ' + $PossibleElements.{$Counter}.macro.id"/>
        </do_all>
        <do_if value="$PossibleElements.count" min="1">
          <!--If something important was found there is only a small chance of finding something small to fix instead-->
          <!--TODO: Could be based on Engineer skill-->
          <set_value name="$FindChance" exact="5"/>
        </do_if>
        <!--A chance to find something small to fix. (100% if nothing important was found)-->
        <find_object_component chance="$FindChance" groupname="$PossibleElements" object="$Defensible" class="class.destructible" checkoperational="false" multiple="true">
          <match class="class.ship" checkoperational="false" negate="true"/>
          <match_any>
            <match restorable="true" comment="wrecked"/>
            <match repairable="true" invulnerable="false">
              <match_hull min="$hulldamagelimit" negate="true" />
            </match>
          </match_any>
        </find_object_component>
        <debug_text text="$PossibleElements.count + ' potential things to repair found'" chance="$debugoutputchance2"/>

        <do_if value="$PossibleElements.count" min="1">
          <remove_value name="$finished"/>
          <set_value name="$MassTrafficTargets" exact="$PossibleElements.list"/>
          <do_all exact="$PossibleElements.count">
            <set_value name="$CurrentElement" exact="$PossibleElements.random"/>
            <do_if value="$CurrentElement.iswreck">
              <!--Do not fix wrecked components where the parent is also a wreck-->
              <do_if value="$CurrentElement.parent.iswreck">
                <remove_from_group group="$PossibleElements" object="$CurrentElement" />
                <continue />
              </do_if>
            </do_if>
            <break />
          </do_all>
          <do_if value="$CurrentElement.iswreck">
            <debug_text text="'CurrentElement is now the wreck of ' + $CurrentElement + ' ' + $CurrentElement.knownname" chance="$debugoutputchance"/>
            <set_value name="$BaseRestoreTime" exact="($CurrentElement.size)s"/>
            <do_if value="$BaseRestoreTime" min="20min">
              <set_value name="$BaseRestoreTime" exact="if $repairratefactor? and $repairratefactor gt 30 then 5min else 20" comment="cap time for large components"/>
            </do_if>
            <do_elseif value="$BaseRestoreTime" max="1min">
              <set_value name="$BaseRestoreTime" exact="1min" comment="cap time for small components"/>
            </do_elseif>
            <debug_text text="'BaseRestoreTime is ' + $BaseRestoreTime" chance="$debugoutputchance"/>
            <set_value name="$RestoreTime" min="player.age + $BaseRestoreTime" max="player.age + $BaseRestoreTime + 1s"/>
          </do_if>
          <do_else>
            <debug_text text="'CurrentElement is now the damaged ' + $CurrentElement + ' ' + $CurrentElement.knownname" chance="$debugoutputchance"/>
          </do_else>
        </do_if>
        <do_else>
          <set_value name="$finished" />
        </do_else>
        <clear_group group="$PossibleElements"/>
        <do_if value="$RestoreTime? and $RestoreTime">
          <set_value name="$nextelementcheck" min="$RestoreTime + 2min" max="$RestoreTime + 3min"/>
        </do_if>
      </do_if>

      <!-- If no elements or main hull to repair -->
      <do_if value="$finished? and $Defensible.hullpercentage ge $hulldamagelimit">
        <do_if value="this.$Defensible? and this.$Defensible == $Defensible">
          <remove_value name="this.$Defensible"/>
        </do_if>
        <resume label="end" />
      </do_if>
      <do_elseif value="$finished? and $Defensible.isclass.station and $Defensible.maxhull ge 1 and $Defensible.hullpercentage le $hulldamagelimit">
        <do_if value="this.$Defensible? and this.$Defensible == $Defensible">
          <remove_value name="this.$Defensible"/>
        </do_if>
        <set_object_hull object="$Defensible" exact="$hulldamagelimit" />
        <resume label="end" />
      </do_elseif>

      <label name="checkelement" />
      <do_if value="$CurrentElement.exists">
        <do_if value="$CurrentElement.iswreck">
          <!--Do not fix wrecked components where the parent is also a wreck-->
          <do_if value="not $CurrentElement.parent.iswreck">
            <resume label="startrepair"/>
          </do_if>
        </do_if>

        <do_if value="$CurrentElement.hullpercentage lt $hulldamagelimit">
          <!--Have a chance to break out if the component is already functional again-->
          <do_if value="$CurrentElement.isfunctional">
            <resume label="startrepair" chance="70"/>
          </do_if>
          <do_else>
            <resume label="startrepair"/>
          </do_else>
        </do_if>
      </do_if>
      <set_value name="$CurrentElement" exact="null"/>

      <!--Check if there is nothing to fix-->
      <do_if value="not $CurrentElement.exists">
        <do_if value="$Defensible.hullpercentage ge $hulldamagelimit">
          <!--Remove mass traffic. Don't care about damaged summaries-->
          <debug_text text="$Defensible.knownname + ' is ending mass traffic (nothing left to repair)'" chance="$debugoutputchance" />
          <end_repair_mass_traffic object="this.defensible" />
          <remove_value name="$networkid" />

          <do_if value="$Defensible.summary.numadsigns.wreck
          + $Defensible.summary.numefficiencyupgrades.wreck
          + $Defensible.summary.numshields.wreck
          + $Defensible.summary.numsurfacedestructible.wreck
          + $Defensible.summary.numturrets.wreck" exact="0">

            <!-- set command action to repair checking -->
            <set_command_action commandaction="commandaction.repairchecking" />

            <do_if value="$nextelementcheck gt player.age + 2min">
              <set_value name="$nextelementcheck" exact="0"/>
            </do_if>

            <resume label="checkforrepair"/>
          </do_if>
        </do_if>
      </do_if>


      <label name="startrepair" />
      <do_if value="this.$work?" negate="true">
        <set_value name="this.$work" exact="table[$object = $Defensible, $element = $CurrentElement]" />
        <do_if value="$RestoreTime?">
          <set_value name="this.$work.$elementTime" exact="$RestoreTime" />
        </do_if>
      </do_if>
      <!-- send out the repair drones -->
      <do_if value="not @$networkid" chance="0">
        <do_if value="not $MassTrafficTargets?">
          <set_value name="$MassTrafficTargets" exact="[this.defensible]" />
        </do_if>
        <launch_repair_drones object="this.defensible" target="$Defensible" components="$MassTrafficTargets" result="$networkid" />
        <debug_text text="this.defensible.knownname + ' launched mass traffic - network id: ' + $networkid" chance="$debugoutputchance" />
        <set_value name="$MassTrafficTargets" exact="[]"/>
      </do_if>

      <!-- calculate repair speed -->
      <set_value name="$repairratefactor" exact="0" />

      <do_if value="@$networkid" chance="0">
        <find_active_repair_mass_traffic object="this.defensible" result="$networkid" />
        <get_units_in_mass_traffic masstraffic="$networkid" category="unitcategory.welder" amounts="$unitamounts" />

        <do_if value="$unitamounts">
          <do_all exact="unitcategory.welder.maxmk" counter="$i">
            <debug_text text="$unitamounts.{$i} + ' welders mk ' + $i" chance="$debugoutputchance" />
            <set_value name="$repairratefactor" operation="add" exact="$unitamounts.{$i} * $i" />
          </do_all>
          <remove_value name="$unitamounts" />
        </do_if>
      </do_if>

      <do_if value="$repairratefactor == 0">
        <do_if value="@$networkid">
          <debug_text text="this.defensible.knownname + ' is ending mass traffic (no more units are flying)'" chance="$debugoutputchance" />
          <end_repair_mass_traffic object="this.defensible" />
          <remove_value name="$networkid" />
        </do_if>

        <do_if value="this.defensible.isclass.[class.ship_l, class.ship_xl]">
          <set_value name="$repairratefactor" exact="[this.defensible.units.{unitcategory.welder}.count + this.defensible.availableunits.{unitcategory.marine}.count, 0.1f].max" />
        </do_if>
        <do_elseif value="this.defensible.isclass.station">
          <set_value name="$repairratefactor" exact="[[this.defensible.units.{unitcategory.welder}.count + this.defensible.availableunits.{unitcategory.marine}.count, 6].max, 40].min" />
        </do_elseif>
        <do_elseif value="this.defensible.isclass.[class.ship_s, class.ship_m] and this.ship.dockslot != null">
          <!-- rate like a mk1 drone -->
          <set_value name="$repairratefactor" exact="1" />
        </do_elseif>
        <do_elseif value="this.isclass.computer">
          <set_value name="$repairratefactor" exact="0.6" />
        </do_elseif>
        <do_else>
          <set_value name="$repairratefactor" exact="0.2" />
        </do_else>
      </do_if>

      <set_value name="$repairratefactor" operation="add" exact="$repairratefactor * this.combinedskill / 25" comment="engineer speeds up repair by up to 400% (meaning a fifth of the normal repair time)" />

      <set_value name="$repairrate" exact="$baserepairrate * $repairratefactor" />
      <debug_text text="'Repairrate: ' + $repairrate" chance="$debugoutputchance" />

      <!--Fix summary components first-->
      <!--Currently only attempt to fix one. Only fix those which have an operational parent-->
      <!--TODO: Balance-->
      <do_if value="$Defensible.attention lt attention.visible">
        <do_if value="$Defensible.summary.numadsigns.wreck" min="1">
          <set_summarised_adsign_state object="$Defensible" state="operational" parentstate="operational" previous="wreck" exact="1"/>
        </do_if>
        <do_if value="$Defensible.summary.numefficiencyupgrades.wreck" min="1">
          <set_summarised_efficiencyupgrade_state object="$Defensible" state="operational" parentstate="operational" previous="wreck" exact="1"/>
        </do_if>
        <do_if value="$Defensible.summary.numshields.wreck" min="1">
          <set_summarised_shield_state object="$Defensible" state="operational" parentstate="operational" previous="wreck" exact="1"/>
        </do_if>
        <do_if value="$Defensible.summary.numsurfacedestructible.wreck" min="1">
          <set_summarised_surfacedestructible_state object="$Defensible" state="operational" parentstate="operational" previous="wreck" exact="1"/>
        </do_if>
        <do_if value="$Defensible.summary.numturrets.wreck" min="1">
          <set_summarised_turret_state object="$Defensible" state="operational" parentstate="operational" previous="wreck" exact="1"/>
        </do_if>
      </do_if>

      <!--Repair Defensible Hull-->
      <do_if value="not $Defensible.isclass.station and $Defensible.maxhull ge 1">
        <do_if value="$Defensible.hullpercentage lt $hulldamagelimit" chance="if ($Defensible.hullpercentage ge $hulldamagelimit-5 and $CurrentElement.exists) then 0 else if ($Defensible.hullpercentage ge $hulldamagelimit-11 and $CurrentElement.exists) then 33 else 100">
          <set_value name="$addedhullpercentage" exact="100f * $repairrate / $Defensible.maxhull" />
          <!-- handle the case of the percentage being < 0 -->
          <do_if value="$addedhullpercentage lt 1">
            <set_value name="$addedhullpercentage" exact="[1.0f, 1.1f, 1.2f, 1.3f, 1.33f].random"/>
          </do_if>
          <do_if value="$addedhullpercentage" min="1">
            <!-- set the repair command action -->
            <set_command_action commandaction="commandaction.repairingto" param="$Defensible" />
            <!-- repair the hull -->
            <set_value name="$tempCheckHull" exact="($Defensible.hullpercentage)i" />
            <set_object_hull object="$Defensible" exact="$Defensible.hullpercentage + $addedhullpercentage" />
            <do_if value="($Defensible.hullpercentage)i" exact="$tempCheckHull">
              <set_object_hull object="$Defensible" exact="($Defensible.hullpercentage)i + [$addedhullpercentage*2, 3].max" />
            </do_if>
            <remove_value name="$tempCheckHull" /> 
            <debug_text text="'repaired main object ' + $Defensible + ' ' + $Defensible.knownname + ' to hull value ' + $Defensible.hull + ' (' + $Defensible.hullpercentage + '%)'" chance="$debugoutputchance" />
            <do_if value="$Defensible.hullpercentage ge $hulldamagelimit">
              <debug_text text="$Defensible + ' ' + $Defensible.knownname + ' was repaired as much as possible.'" chance="$debugoutputchance"/>
            </do_if>
          </do_if>
        </do_if>
      </do_if>

      <do_if value="$CurrentElement">
        <do_if value="$CurrentElement.iswreck">
          <do_if value="@$RestoreTime" min="1">
            <do_if value="player.age" min="$RestoreTime">
              <!--Restore the $CurrentElement and all of its contained components to 1% hull-->
              <restore_object object="$CurrentElement" hull="1" recursive="true" />
              <set_value name="$RestoreTime" exact="0"/>
              <debug_text text="'Restoring ' + $CurrentElement + ' ' + $CurrentElement.knownname" chance="$debugoutputchance"/>
            </do_if>
          </do_if>
          <do_else>
            <!--Component is wrecked but no restore time is defined. It may have been recently wrecked.-->
            <set_value name="$CurrentElement" exact="null"/>
          </do_else>
        </do_if>
        <do_else>
          <do_if value="$CurrentElement.maxhull" min="1">
            <do_if value="$CurrentElement.hullpercentage ge $hulldamagelimit">
              <!--Component is as repaired as possible-->
              <debug_text text="$CurrentElement + ' ' + $CurrentElement.knownname + ' was repaired as much as possible.'" chance="$debugoutputchance"/>
            </do_if>
            <do_else>
              <!--Repair Damaged Component-->
              <set_value name="$addedhullpercentage" exact="100f * $repairrate / $CurrentElement.maxhull" />
              <!-- handle the case of the percentage being < 0 -->
              <do_if value="$addedhullpercentage lt 1">
                <set_value name="$addedhullpercentage" exact="[1.0f, 1.1f, 1.2f, 1.3f, 1.33f].random"/>
              </do_if>
              <do_if value="$addedhullpercentage gt 0">
                <!-- set the repair command action -->
                <set_command_action commandaction="commandaction.repairingto" param="$CurrentElement" />
                <!-- repair the hull -->
                <set_value name="$tempCheckHull" exact="($CurrentElement.hullpercentage)i" />
                <set_object_hull object="$CurrentElement" exact="$CurrentElement.hullpercentage + $addedhullpercentage" />
                <do_if value="($CurrentElement.hullpercentage)i" exact="$tempCheckHull">
                  <set_object_hull object="$CurrentElement" exact="($CurrentElement.hullpercentage)i + [$addedhullpercentage*2, 3].max" />
                </do_if>
                <remove_value name="$tempCheckHull" /> 
                <debug_text text="player.age + ' repaired ' + $CurrentElement + ' ' + $CurrentElement.knownname + ' to hull value ' + $CurrentElement.hull + ' (' + $CurrentElement.hullpercentage + '%)'" chance="$debugoutputchance" />
                <do_if value="$CurrentElement.hullpercentage ge $hulldamagelimit">
                  <debug_text text="$CurrentElement + ' ' + $CurrentElement.knownname + ' was repaired as much as possible.'" chance="$debugoutputchance"/>
                </do_if>
              </do_if>
            </do_else>
          </do_if>
        </do_else>
        <signal_objects object="player.galaxy" param="'learned.something'" param2="[this, ware.inv_virtualseminarengineering, 'repair']" />
        <do_if value="this.$work?">
          <set_value name="this.$work.$element" exact="$CurrentElement" />
          <do_if value="$RestoreTime?">
            <set_value name="this.$work.$elementTime" exact="$RestoreTime" />
          </do_if>
        </do_if>
      </do_if>

      <resume label="checkforrepair" />


      <label name="end" />

      <set_value name="$Defensible" exact="this.defensible"/>
      <end_repair_mass_traffic object="this.defensible" />
      <set_command command="command.repair" />
      <remove_value name="this.$work" /> 

    </actions>
  </attention>
  <on_abort>
    <end_repair_mass_traffic object="this.defensible" />
    <remove_value name="this.$work" /> 
  </on_abort>
</aiscript>
